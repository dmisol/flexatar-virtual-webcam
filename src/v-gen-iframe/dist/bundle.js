/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../util/util.js":
/*!***********************!*\
  !*** ../util/util.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64ToUint8Array: () => (/* binding */ base64ToUint8Array),\n/* harmony export */   bufferToBase64: () => (/* binding */ bufferToBase64),\n/* harmony export */   cacheObjectURL: () => (/* binding */ cacheObjectURL),\n/* harmony export */   checkFileType: () => (/* binding */ checkFileType),\n/* harmony export */   fetchArrayBuffer: () => (/* binding */ fetchArrayBuffer),\n/* harmony export */   getCookie: () => (/* binding */ getCookie),\n/* harmony export */   getUint8ArrayFromCache: () => (/* binding */ getUint8ArrayFromCache),\n/* harmony export */   imageMimeTypes: () => (/* binding */ imageMimeTypes),\n/* harmony export */   listCacheKeys: () => (/* binding */ listCacheKeys),\n/* harmony export */   mediaStreamFromArrayBufer: () => (/* binding */ mediaStreamFromArrayBufer),\n/* harmony export */   mediaStreamFromUrl: () => (/* binding */ mediaStreamFromUrl),\n/* harmony export */   retrieveObjectURLFromCache: () => (/* binding */ retrieveObjectURLFromCache),\n/* harmony export */   retryWithDelay: () => (/* binding */ retryWithDelay),\n/* harmony export */   storeInCache: () => (/* binding */ storeInCache),\n/* harmony export */   wait: () => (/* binding */ wait)\n/* harmony export */ });\n\nasync function  wait(ms){\n    await new Promise(resolve=>{setTimeout(resolve,ms)})\n}\n\nasync function retryWithDelay(handler,delayList){\n    if (delayList.length == 0){\n        return false\n    }\n    await wait(delayList[0])\n    delayList.shift()\n    const isComplete  = await handler()\n    if (isComplete) return true\n    return await retryWithDelay(handler,delayList)\n}\n\nfunction getCookie(name) {\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) return parts.pop().split(';').shift();\n}\n// export function eraseAllCookie() {\n//     let cookies = document.cookie.split(\"; \");\n//     for (let c = 0; c < cookies.length; c++) {\n//         let d = window.location.hostname.split(\".\");\n//         while (d.length > 0) {\n//             let cookieBase = encodeURIComponent(cookies[c].split(\";\")[0].split(\"=\")[0]) + '=; expires=Thu, 01-Jan-1970 00:00:01 GMT; domain=' + d.join('.') + ' ;path=';\n//             let p = location.pathname.split('/');\n         \n//             document.cookie = cookieBase + '/';\n           \n//             while (p.length > 0) {\n//                 document.cookie = cookieBase + p.join('/');\n//                 p.pop();\n//             };\n//             d.shift();\n//         }\n//     }\n// }\n\nasync function bufferToBase64(buffer) {\n    // use a FileReader to generate a base64 data URI:\n    const base64url = await new Promise(r => {\n      const reader = new FileReader()\n      reader.onload = () => r(reader.result)\n      reader.readAsDataURL(new Blob([buffer]))\n    });\n    // remove the `data:...;base64,` part from the start\n    return base64url;\n}\n\nasync function base64ToUint8Array(base64) {\n    const response = await fetch(base64);\n    const buffer = await response.arrayBuffer();\n    return new Uint8Array(buffer);\n}\nconst cacheName = \"ftarcache\";\nasync function storeInCache( url, responseData) {\n    const cache = await caches.open(cacheName); // Open or create a named cache\n    const response = new Response(responseData, {\n      headers: { 'Content-Type': 'application/octet-stream' }\n    });\n    await cache.put(url, response); // Store the data in the cache\n    // console.log(`Data cached for ${url}`);\n}\n\nasync function getUint8ArrayFromCache(key) {\n    const cache = await caches.open(cacheName);\n    const response = await cache.match(key);\n    \n    if (!response) {\n    //   console.log(`No data found for key: ${key}`);\n      return null;\n    }\n    \n    const arrayBuffer = await response.arrayBuffer(); // Read as ArrayBuffer\n    const uint8Array = new Uint8Array(arrayBuffer); // Convert to Uint8Array\n    // console.log(`Retrieved Uint8Array from key: ${key}`);\n    return uint8Array;\n  }\n\n\n  async function fetchBlobFromObjectURL(objectURL) {\n    const response = await fetch(objectURL); // Fetch the Blob data behind the ObjectURL\n    const blob = await response.blob(); // Get the Blob\n    return blob;\n  }\n\n  async function cacheObjectURL( key, objectURL) {\n    const blob = await fetchBlobFromObjectURL(objectURL); // Get the Blob from the ObjectURL\n    const cache = await caches.open(cacheName); // Open the cache\n    const response = new Response(blob, { \n      headers: { 'Content-Type': blob.type || 'application/octet-stream' } \n    });\n    await cache.put(key, response); // Cache the Blob\n    // console.log(`Cached ObjectURL under key: ${key}`);\n  }\n\n\n  async function retrieveObjectURLFromCache( key) {\n    const cache = await caches.open(cacheName);\n    const response = await cache.match(key); // Retrieve the cached Response\n  \n    if (!response) {\n    //   console.log(`No data found for key: ${key}`);\n      return null;\n    }\n  \n    const blob = await response.blob(); // Convert the Response to a Blob\n    const objectURL = URL.createObjectURL(blob); // Recreate the ObjectURL\n    // console.log(`Recreated ObjectURL from cache for key: ${key}`);\n    return objectURL;\n  }\n\n  async function listCacheKeys() {\n    const cache = await caches.open(cacheName); // Open the specific cache\n    const keys = await cache.keys(); // Get all keys (URLs) in the cache\n    // console.log(`Cache keys in ${cacheName}:`, keys);\n    return [keys,cache];\n  }\n\nasync function fetchArrayBuffer(url){\n  const response = await fetch(url)\n  if (!response.ok){\n    console.error(`can't load from ${url}`)\n    return\n  }\n  let arrayBuffer;\n  try {\n    arrayBuffer = await response.arrayBuffer();\n  } catch (error) {\n    console.error(`Error while reading arrayBuffer: ${error.message}`);\n    return;\n  }\n  return arrayBuffer\n}\nasync function mediaStreamFromArrayBufer(arrayBuffer,audioContext,callback){\n\n\n  let audioBuffer;\n  try {\n    audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n  } catch (error) {\n    console.error(`Error while decoding audio data: ${error.message}`);\n    return;\n  }\n  const bufferSource = audioContext.createBufferSource();\n  bufferSource.buffer = audioBuffer;\n\n  const destination = audioContext.createMediaStreamDestination();\n  let isStoped = false\n\n  bufferSource.connect(destination);\n  const mediaStream = destination.stream;\n  bufferSource.onended = () => {\n      // console.log('Playback has finished.');\n      if (!isStoped){\n        const track = mediaStream.getAudioTracks()[0]\n        if (track){\n          track.stop()\n          track.dispatchEvent(new Event(\"ended\"));\n        }\n        // callback()\n      }\n  };\n\n \n\n  bufferSource.start();\n\n  mediaStream.stopBufferSource = ()=>{\n      isStoped = true\n      bufferSource.stop()\n  }\n  return mediaStream;\n}\n\nasync function mediaStreamFromUrl(url,audioContext,callback){\n\n    const arrayBuffer = await fetchArrayBuffer(url)\n    if (!arrayBuffer) return \n    return mediaStreamFromArrayBufer(arrayBuffer,audioContext,callback)\n}\n\nconst imageMimeTypes = [\n  \"image/jpeg\",\"image/png\",\"image/bmp\",\"image/webp\",\"image/avif\",\"image/x-portable-bitmap\",\n  \"image/x-portable-anymap\",\"image/x-portable-pixmap\",\"image/tiff\"\n]\n\nfunction checkFileType(fileType, typelist){\n  for (const mimeType of typelist){\n      \n      if (fileType == mimeType) {\n          return true\n      }\n  }\n  return false\n}\n\n//# sourceURL=webpack://videogen/../util/util.js?");

/***/ }),

/***/ "./node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FFmpeg: () => (/* binding */ FFmpeg)\n/* harmony export */ });\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./const.js */ \"./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js\");\n\n\n\n/**\n * Provides APIs to interact with ffmpeg web worker.\n *\n * @example\n * ```ts\n * const ffmpeg = new FFmpeg();\n * ```\n */\nclass FFmpeg {\n    #worker = null;\n    /**\n     * #resolves and #rejects tracks Promise resolves and rejects to\n     * be called when we receive message from web worker.\n     */\n    #resolves = {};\n    #rejects = {};\n    #logEventCallbacks = [];\n    #progressEventCallbacks = [];\n    loaded = false;\n    /**\n     * register worker message event handlers.\n     */\n    #registerHandlers = () => {\n        if (this.#worker) {\n            this.#worker.onmessage = ({ data: { id, type, data }, }) => {\n                switch (type) {\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LOAD:\n                        this.loaded = true;\n                        this.#resolves[id](data);\n                        break;\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.MOUNT:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.UNMOUNT:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.EXEC:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.FFPROBE:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.WRITE_FILE:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.READ_FILE:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.DELETE_FILE:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.RENAME:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.CREATE_DIR:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LIST_DIR:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.DELETE_DIR:\n                        this.#resolves[id](data);\n                        break;\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LOG:\n                        this.#logEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.PROGRESS:\n                        this.#progressEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.ERROR:\n                        this.#rejects[id](data);\n                        break;\n                }\n                delete this.#resolves[id];\n                delete this.#rejects[id];\n            };\n        }\n    };\n    /**\n     * Generic function to send messages to web worker.\n     */\n    #send = ({ type, data }, trans = [], signal) => {\n        if (!this.#worker) {\n            return Promise.reject(_errors_js__WEBPACK_IMPORTED_MODULE_2__.ERROR_NOT_LOADED);\n        }\n        return new Promise((resolve, reject) => {\n            const id = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getMessageID)();\n            this.#worker && this.#worker.postMessage({ id, type, data }, trans);\n            this.#resolves[id] = resolve;\n            this.#rejects[id] = reject;\n            signal?.addEventListener(\"abort\", () => {\n                reject(new DOMException(`Message # ${id} was aborted`, \"AbortError\"));\n            }, { once: true });\n        });\n    };\n    on(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks.push(callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks.push(callback);\n        }\n    }\n    off(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks = this.#logEventCallbacks.filter((f) => f !== callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks = this.#progressEventCallbacks.filter((f) => f !== callback);\n        }\n    }\n    /**\n     * Loads ffmpeg-core inside web worker. It is required to call this method first\n     * as it initializes WebAssembly and other essential variables.\n     *\n     * @category FFmpeg\n     * @returns `true` if ffmpeg core is loaded for the first time.\n     */\n    load = ({ classWorkerURL, ...config } = {}, { signal } = {}) => {\n        if (!this.#worker) {\n            this.#worker = classWorkerURL ?\n                new Worker(new URL(classWorkerURL, \"file:///home/naospennikov/workspace/flexatar-virtual-webcam/src/v-gen-iframe/node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js\"), {\n                    type: \"module\",\n                }) :\n                // We need to duplicated the code here to enable webpack\n                // to bundle worekr.js here.\n                new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(\"node_modules_ffmpeg_ffmpeg_dist_esm_worker_js\"), __webpack_require__.b), {\n                    type: undefined,\n                });\n            this.#registerHandlers();\n        }\n        return this.#send({\n            type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LOAD,\n            data: config,\n        }, undefined, signal);\n    };\n    /**\n     * Execute ffmpeg command.\n     *\n     * @remarks\n     * To avoid common I/O issues, [\"-nostdin\", \"-y\"] are prepended to the args\n     * by default.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // ffmpeg -i video.avi video.mp4\n     * await ffmpeg.exec([\"-i\", \"video.avi\", \"video.mp4\"]);\n     * const data = ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    exec = (\n    /** ffmpeg command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.EXEC,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Execute ffprobe command.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // Getting duration of a video in seconds: ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 video.avi -o output.txt\n     * await ffmpeg.ffprobe([\"-v\", \"error\", \"-show_entries\", \"format=duration\", \"-of\", \"default=noprint_wrappers=1:nokey=1\", \"video.avi\", \"-o\", \"output.txt\"]);\n     * const data = ffmpeg.readFile(\"output.txt\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    ffprobe = (\n    /** ffprobe command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.FFPROBE,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Terminate all ongoing API calls and terminate web worker.\n     * `FFmpeg.load()` must be called again before calling any other APIs.\n     *\n     * @category FFmpeg\n     */\n    terminate = () => {\n        const ids = Object.keys(this.#rejects);\n        // rejects all incomplete Promises.\n        for (const id of ids) {\n            this.#rejects[id](_errors_js__WEBPACK_IMPORTED_MODULE_2__.ERROR_TERMINATED);\n            delete this.#rejects[id];\n            delete this.#resolves[id];\n        }\n        if (this.#worker) {\n            this.#worker.terminate();\n            this.#worker = null;\n            this.loaded = false;\n        }\n    };\n    /**\n     * Write data to ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", await fetchFile(\"../video.avi\"));\n     * await ffmpeg.writeFile(\"text.txt\", \"hello world\");\n     * ```\n     *\n     * @category File System\n     */\n    writeFile = (path, data, { signal } = {}) => {\n        const trans = [];\n        if (data instanceof Uint8Array) {\n            trans.push(data.buffer);\n        }\n        return this.#send({\n            type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.WRITE_FILE,\n            data: { path, data },\n        }, trans, signal);\n    };\n    mount = (fsType, options, mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.MOUNT,\n            data: { fsType, options, mountPoint },\n        }, trans);\n    };\n    unmount = (mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.UNMOUNT,\n            data: { mountPoint },\n        }, trans);\n    };\n    /**\n     * Read data from ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * const data = await ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @category File System\n     */\n    readFile = (path, \n    /**\n     * File content encoding, supports two encodings:\n     * - utf8: read file as text file, return data in string type.\n     * - binary: read file as binary file, return data in Uint8Array type.\n     *\n     * @defaultValue binary\n     */\n    encoding = \"binary\", { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.READ_FILE,\n        data: { path, encoding },\n    }, undefined, signal);\n    /**\n     * Delete a file.\n     *\n     * @category File System\n     */\n    deleteFile = (path, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.DELETE_FILE,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Rename a file or directory.\n     *\n     * @category File System\n     */\n    rename = (oldPath, newPath, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.RENAME,\n        data: { oldPath, newPath },\n    }, undefined, signal);\n    /**\n     * Create a directory.\n     *\n     * @category File System\n     */\n    createDir = (path, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.CREATE_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * List directory contents.\n     *\n     * @category File System\n     */\n    listDir = (path, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LIST_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Delete an empty directory.\n     *\n     * @category File System\n     */\n    deleteDir = (path, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.DELETE_DIR,\n        data: { path },\n    }, undefined, signal);\n}\n\n\n//# sourceURL=webpack://videogen/./node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js?");

/***/ }),

/***/ "./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CORE_URL: () => (/* binding */ CORE_URL),\n/* harmony export */   CORE_VERSION: () => (/* binding */ CORE_VERSION),\n/* harmony export */   FFMessageType: () => (/* binding */ FFMessageType),\n/* harmony export */   MIME_TYPE_JAVASCRIPT: () => (/* binding */ MIME_TYPE_JAVASCRIPT),\n/* harmony export */   MIME_TYPE_WASM: () => (/* binding */ MIME_TYPE_WASM)\n/* harmony export */ });\nconst MIME_TYPE_JAVASCRIPT = \"text/javascript\";\nconst MIME_TYPE_WASM = \"application/wasm\";\nconst CORE_VERSION = \"0.12.7\";\nconst CORE_URL = `https://unpkg.com/@ffmpeg/core@${CORE_VERSION}/dist/umd/ffmpeg-core.js`;\nvar FFMessageType;\n(function (FFMessageType) {\n    FFMessageType[\"LOAD\"] = \"LOAD\";\n    FFMessageType[\"EXEC\"] = \"EXEC\";\n    FFMessageType[\"FFPROBE\"] = \"FFPROBE\";\n    FFMessageType[\"WRITE_FILE\"] = \"WRITE_FILE\";\n    FFMessageType[\"READ_FILE\"] = \"READ_FILE\";\n    FFMessageType[\"DELETE_FILE\"] = \"DELETE_FILE\";\n    FFMessageType[\"RENAME\"] = \"RENAME\";\n    FFMessageType[\"CREATE_DIR\"] = \"CREATE_DIR\";\n    FFMessageType[\"LIST_DIR\"] = \"LIST_DIR\";\n    FFMessageType[\"DELETE_DIR\"] = \"DELETE_DIR\";\n    FFMessageType[\"ERROR\"] = \"ERROR\";\n    FFMessageType[\"DOWNLOAD\"] = \"DOWNLOAD\";\n    FFMessageType[\"PROGRESS\"] = \"PROGRESS\";\n    FFMessageType[\"LOG\"] = \"LOG\";\n    FFMessageType[\"MOUNT\"] = \"MOUNT\";\n    FFMessageType[\"UNMOUNT\"] = \"UNMOUNT\";\n})(FFMessageType || (FFMessageType = {}));\n\n\n//# sourceURL=webpack://videogen/./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js?");

/***/ }),

/***/ "./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js":
/*!********************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_IMPORT_FAILURE: () => (/* binding */ ERROR_IMPORT_FAILURE),\n/* harmony export */   ERROR_NOT_LOADED: () => (/* binding */ ERROR_NOT_LOADED),\n/* harmony export */   ERROR_TERMINATED: () => (/* binding */ ERROR_TERMINATED),\n/* harmony export */   ERROR_UNKNOWN_MESSAGE_TYPE: () => (/* binding */ ERROR_UNKNOWN_MESSAGE_TYPE)\n/* harmony export */ });\nconst ERROR_UNKNOWN_MESSAGE_TYPE = new Error(\"unknown message type\");\nconst ERROR_NOT_LOADED = new Error(\"ffmpeg is not loaded, call `await ffmpeg.load()` first\");\nconst ERROR_TERMINATED = new Error(\"called FFmpeg.terminate()\");\nconst ERROR_IMPORT_FAILURE = new Error(\"failed to import ffmpeg-core.js\");\n\n\n//# sourceURL=webpack://videogen/./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js?");

/***/ }),

/***/ "./node_modules/@ffmpeg/ffmpeg/dist/esm/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FFmpeg: () => (/* reexport safe */ _classes_js__WEBPACK_IMPORTED_MODULE_0__.FFmpeg)\n/* harmony export */ });\n/* harmony import */ var _classes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes.js */ \"./node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js\");\n\n\n\n//# sourceURL=webpack://videogen/./node_modules/@ffmpeg/ffmpeg/dist/esm/index.js?");

/***/ }),

/***/ "./node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMessageID: () => (/* binding */ getMessageID)\n/* harmony export */ });\n/**\n * Generate an unique message ID.\n */\nconst getMessageID = (() => {\n    let messageID = 0;\n    return () => messageID++;\n})();\n\n\n//# sourceURL=webpack://videogen/./node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js?");

/***/ }),

/***/ "./node_modules/@ffmpeg/util/dist/esm/const.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ffmpeg/util/dist/esm/const.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeaderContentLength: () => (/* binding */ HeaderContentLength)\n/* harmony export */ });\nconst HeaderContentLength = \"Content-Length\";\n\n\n//# sourceURL=webpack://videogen/./node_modules/@ffmpeg/util/dist/esm/const.js?");

/***/ }),

/***/ "./node_modules/@ffmpeg/util/dist/esm/errors.js":
/*!******************************************************!*\
  !*** ./node_modules/@ffmpeg/util/dist/esm/errors.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_INCOMPLETED_DOWNLOAD: () => (/* binding */ ERROR_INCOMPLETED_DOWNLOAD),\n/* harmony export */   ERROR_RESPONSE_BODY_READER: () => (/* binding */ ERROR_RESPONSE_BODY_READER)\n/* harmony export */ });\nconst ERROR_RESPONSE_BODY_READER = new Error(\"failed to get response body reader\");\nconst ERROR_INCOMPLETED_DOWNLOAD = new Error(\"failed to complete download\");\n\n\n//# sourceURL=webpack://videogen/./node_modules/@ffmpeg/util/dist/esm/errors.js?");

/***/ }),

/***/ "./node_modules/@ffmpeg/util/dist/esm/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ffmpeg/util/dist/esm/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   downloadWithProgress: () => (/* binding */ downloadWithProgress),\n/* harmony export */   fetchFile: () => (/* binding */ fetchFile),\n/* harmony export */   importScript: () => (/* binding */ importScript),\n/* harmony export */   toBlobURL: () => (/* binding */ toBlobURL)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/@ffmpeg/util/dist/esm/errors.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./const.js */ \"./node_modules/@ffmpeg/util/dist/esm/const.js\");\n\n\nconst readFromBlobOrFile = (blob) => new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n        const { result } = fileReader;\n        if (result instanceof ArrayBuffer) {\n            resolve(new Uint8Array(result));\n        }\n        else {\n            resolve(new Uint8Array());\n        }\n    };\n    fileReader.onerror = (event) => {\n        reject(Error(`File could not be read! Code=${event?.target?.error?.code || -1}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n});\n/**\n * An util function to fetch data from url string, base64, URL, File or Blob format.\n *\n * Examples:\n * ```ts\n * // URL\n * await fetchFile(\"http://localhost:3000/video.mp4\");\n * // base64\n * await fetchFile(\"data:<type>;base64,wL2dvYWwgbW9yZ...\");\n * // URL\n * await fetchFile(new URL(\"video.mp4\", import.meta.url));\n * // File\n * fileInput.addEventListener('change', (e) => {\n *   await fetchFile(e.target.files[0]);\n * });\n * // Blob\n * const blob = new Blob(...);\n * await fetchFile(blob);\n * ```\n */\nconst fetchFile = async (file) => {\n    let data;\n    if (typeof file === \"string\") {\n        /* From base64 format */\n        if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(file)) {\n            data = atob(file.split(\",\")[1])\n                .split(\"\")\n                .map((c) => c.charCodeAt(0));\n            /* From remote server/URL */\n        }\n        else {\n            data = await (await fetch(file)).arrayBuffer();\n        }\n    }\n    else if (file instanceof URL) {\n        data = await (await fetch(file)).arrayBuffer();\n    }\n    else if (file instanceof File || file instanceof Blob) {\n        data = await readFromBlobOrFile(file);\n    }\n    else {\n        return new Uint8Array();\n    }\n    return new Uint8Array(data);\n};\n/**\n * importScript dynamically import a script, useful when you\n * want to use different versions of ffmpeg.wasm based on environment.\n *\n * Example:\n *\n * ```ts\n * await importScript(\"http://localhost:3000/ffmpeg.js\");\n * ```\n */\nconst importScript = async (url) => new Promise((resolve) => {\n    const script = document.createElement(\"script\");\n    const eventHandler = () => {\n        script.removeEventListener(\"load\", eventHandler);\n        resolve();\n    };\n    script.src = url;\n    script.type = \"text/javascript\";\n    script.addEventListener(\"load\", eventHandler);\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n});\n/**\n * Download content of a URL with progress.\n *\n * Progress only works when Content-Length is provided by the server.\n *\n */\nconst downloadWithProgress = async (url, cb) => {\n    const resp = await fetch(url);\n    let buf;\n    try {\n        // Set total to -1 to indicate that there is not Content-Type Header.\n        const total = parseInt(resp.headers.get(_const_js__WEBPACK_IMPORTED_MODULE_1__.HeaderContentLength) || \"-1\");\n        const reader = resp.body?.getReader();\n        if (!reader)\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ERROR_RESPONSE_BODY_READER;\n        const chunks = [];\n        let received = 0;\n        for (;;) {\n            const { done, value } = await reader.read();\n            const delta = value ? value.length : 0;\n            if (done) {\n                if (total != -1 && total !== received)\n                    throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ERROR_INCOMPLETED_DOWNLOAD;\n                cb && cb({ url, total, received, delta, done });\n                break;\n            }\n            chunks.push(value);\n            received += delta;\n            cb && cb({ url, total, received, delta, done });\n        }\n        const data = new Uint8Array(received);\n        let position = 0;\n        for (const chunk of chunks) {\n            data.set(chunk, position);\n            position += chunk.length;\n        }\n        buf = data.buffer;\n    }\n    catch (e) {\n        console.log(`failed to send download progress event: `, e);\n        // Fetch arrayBuffer directly when it is not possible to get progress.\n        buf = await resp.arrayBuffer();\n        cb &&\n            cb({\n                url,\n                total: buf.byteLength,\n                received: buf.byteLength,\n                delta: 0,\n                done: true,\n            });\n    }\n    return buf;\n};\n/**\n * toBlobURL fetches data from an URL and return a blob URL.\n *\n * Example:\n *\n * ```ts\n * await toBlobURL(\"http://localhost:3000/ffmpeg.js\", \"text/javascript\");\n * ```\n */\nconst toBlobURL = async (url, mimeType, progress = false, cb) => {\n    const buf = progress\n        ? await downloadWithProgress(url, cb)\n        : await (await fetch(url)).arrayBuffer();\n    const blob = new Blob([buf], { type: mimeType });\n    return URL.createObjectURL(blob);\n};\n\n\n//# sourceURL=webpack://videogen/./node_modules/@ffmpeg/util/dist/esm/index.js?");

/***/ }),

/***/ "./src/caching.js":
/*!************************!*\
  !*** ./src/caching.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFlexatarWraped: () => (/* binding */ getFlexatarWraped),\n/* harmony export */   getPreviewWraped: () => (/* binding */ getPreviewWraped),\n/* harmony export */   updateCahceByList: () => (/* binding */ updateCahceByList)\n/* harmony export */ });\n/* harmony import */ var _util_util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/util.js */ \"../util/util.js\");\n\n\n\n// localStorage.clear();\n\nasync function getFlexatarWraped(ftarLink,token){\n  \n    const savedFtar = await (0,_util_util_js__WEBPACK_IMPORTED_MODULE_0__.getUint8ArrayFromCache)(\"/ftar/\"+ftarLink.id)\n      if (savedFtar){\n\n        // console.log(\"fetch saved ftar\",savedFtar)\n        return {data: savedFtar,ready:Promise.resolve(true),id:ftarLink.id,name:ftarLink.meta?.name}\n    }\n    const fEnt = await FtarView.flexatarEntry(token,ftarLink.id,{ftar:true})\n    const result = await FtarView.getFlexatar(fEnt);\n    await (0,_util_util_js__WEBPACK_IMPORTED_MODULE_0__.storeInCache)(\"/ftar/\"+ftarLink.id,result.data)\n\n    return result\n}\n\nasync function getPreviewWraped(ftarLink){\n  \n    const savedPreview = await (0,_util_util_js__WEBPACK_IMPORTED_MODULE_0__.retrieveObjectURLFromCache)(\"/ftarpreview/\"+ftarLink.id)\n      if (savedPreview){\n\n        // console.log(\"fetch saved ftar\",savedFtar)\n        return savedPreview\n    }\n    const result = await FtarView.getPreview(ftarLink);\n    await (0,_util_util_js__WEBPACK_IMPORTED_MODULE_0__.cacheObjectURL)(\"/ftarpreview/\"+ftarLink.id,result)\n\n    return result\n}\n\nasync function updateCahceByList(ftarList){\n    // console.log(ftarList)\n    const [keys,cache] = await (0,_util_util_js__WEBPACK_IMPORTED_MODULE_0__.listCacheKeys)();\n    \n    for (const cahceKey of keys){\n        const parts = cahceKey.url.split(\"/\")\n        const id = parts[parts.length-1]\n        let notFound = true\n        for (const ftarLink of ftarList){\n            if (ftarLink.id == id){\n                notFound = false\n                break\n            }\n        }\n        // console.log(parts)\n        if (notFound){\n            cache.delete(cahceKey)\n            // console.log (\"del cahce key\",id)\n        }\n\n    }\n\n}\n\n\n//# sourceURL=webpack://videogen/./src/caching.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _video_conversions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./video_conversions.js */ \"./src/video_conversions.js\");\n/* harmony import */ var _caching_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./caching.js */ \"./src/caching.js\");\n/* harmony import */ var _locale_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale.js */ \"./src/locale.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_locale_js__WEBPACK_IMPORTED_MODULE_2__]);\n_locale_js__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\nlet reloadTokenResolve \n\nwindow.addEventListener('message', async (event) => {\n    let data = event.data;\n    // console.log(\"message \", data)\n    if (!data.flexatar){return}\n    data = data.flexatar\n    if (data.type === \"reload_token\"){\n        reloadTokenResolve(data.token)\n    }\n    \n})\n\nconst queryString = window.location.search;\nconst urlParams = new URLSearchParams(queryString);\nlet token;\n/*\nlet tokenVal\nurlParams.forEach((value, key) => {\n    if (key === \"token\"){\n        tokenVal = value\n        // console.log(\"user token updated\",userToken)\n    }\n    // console.log(`${key}: ${value}`);\n});*/\nlet iframeId;\nurlParams.forEach((value, key) => {\n    if (key === \"id\"){\n        iframeId = value\n\n    }\n});\n\n// let tokenPromise;\ntoken = new FtarView.GetToken(async ()=>{\n        // console.log(\"reload token iframe\")\n\n            const tokenPromise = new Promise((resolve)=>{reloadTokenResolve=resolve})\n          \n            const sendObject = {}\n            sendObject[iframeId] = {type:\"reload_token\"}\n            window.parent.postMessage({flexatar:sendObject}, '*');\n            // console.log(\"post message reload_token from iframe\")\n        // }\n        const tok = await tokenPromise\n        // console.log(\"reload token iframe finished\")\n        token.token = tok\n        // tokenPromise = null\n        return tok\n    }\n);\n// token.token = tokenVal\n\nconst buttonsGroup = [chooseMainPanelButton,settingsMainPanelButton,audioMainPanelButton,recordMainPanelButton];\n\nconst ftarCanvasReplacment = new FtarView.util.DispatchQueue();\n\nbuttonsHidden(true)\n// waitMainPanelButton.disabled = true\nvideosMainPanelButton.disabled = true\n\nlet replacedPreview\nlet loadedFtars = {}\nasync function getFtar(ftarId){\n    if (!(ftarId in loadedFtars)){\n        loaderSign.classList.remove(\"invisible\")\n\n        // loaderSign.style.display = \"flex\"\n        // const fEnt = await FtarView.flexatarEntry(token,ftarId,{ftar:true})\n        \n        loadedFtars[ftarId] = await (0,_caching_js__WEBPACK_IMPORTED_MODULE_1__.getFlexatarWraped)({id:ftarId},token)\n        loaderSign.classList.add(\"invisible\")\n        // loaderSign.style.display = \"none\"\n    }\n    return loadedFtars[ftarId]\n}\nlet selectedImgSrc\nlet oldPressedPreview = [null,null];\nasync function addPreview(ftarEntry,renderer,previewHolder,previewSrc,slot){\n    const preview = document.createElement(\"img\")\n    // loaderSign.style.display = \"flex\"\n    \n    // const imSource = await FtarView.getPreview(ftarEntry)\n    // loaderSign.style.display = \"none\"\n    preview.src = previewSrc\n\n    // await new Promise(resolve =>{\n    //         preview.onload = () =>{\n    //             resolve()\n    //         }\n    //     }\n    // )\n    preview.className = \"ftar-preview-size\"\n    // preview.style.cursor = \"pointer\"\n    // preview.style.width = '75px'; \n    // preview.style.height = 'auto';\n    // preview.style.objectFit = 'contain';\n\n    preview.ftarEntry = ftarEntry\n    const currentSlotIdx = slot\n    // console.log(ftarEntry)\n    if (previewList[0].length == 0){\n        slotFtarId[0] = ftarEntry.id\n        slotFtarId[1] = ftarEntry.id\n        slotIdx[0] = 0\n        slotIdx[1] = 0\n        if (currentSlotIdx == 0)\n            selectedImgSrc = previewSrc\n        buttonsHidden(false)\n    }\n    // preview.array = previewIdx\n    \n    preview.onclick = async () => {\n        if (oldPressedPreview[currentSlotIdx]){\n\n            oldPressedPreview[currentSlotIdx].classList.remove(\"active\")\n            \n        }\n        oldPressedPreview[currentSlotIdx] = preview\n        preview.classList.add(\"active\")\n\n        const idx = previewList[currentSlotIdx].indexOf(preview)\n        slotIdx[currentSlotIdx] = idx\n        if (currentSlotIdx == 0)\n            selectedImgSrc = previewSrc\n\n\n            await getFtar(ftarEntry.id)\n\n            slotFtarId[currentSlotIdx] = ftarEntry.id\n\n            if (currentSlotIdx == 0){\n                renderer.slot1 = loadedFtars[ftarEntry.id]\n            }else{\n                renderer.slot2 = loadedFtars[ftarEntry.id]\n            }\n            renderer.effect =  ()=>{ return { mode: 2, parameter: 0.35 }}\n\n        renderer.start()\n\n        renderer.canvas.width =  75;\n        renderer.canvas.height = 100\n    }\n    previewHolder.appendChild(preview)\n    // flexatarListContainer.appendChild(preview)\n    return preview\n}\n\nlet ftarList;\nlet renderer;\nlet firstLoaded = false\nlet flexatarSDK\nconst previewList = [[],[]]\n\n\nasync function downloadStartupFlexatars(){\n    if (ftarList.length>=1){\n        const ftarEntry = ftarList[0]\n\n\n        await getFtar(ftarEntry.id)\n        slotIdx[0] = 0\n        slotIdx[1] = 0\n        renderer.slot1 = loadedFtars[ftarEntry.id]\n        slotFtarId[0] = ftarEntry.id\n        slotFtarId[1] = ftarEntry.id\n        renderer.pause()\n        renderer.start()\n    }\n\n\n}\n\nlet isPaidSubscribtion = true\nasync function updateUserInfo(){\n    const userInfo = await FtarView.userInfo(token)\n        // console.log(\"userInfo\",userInfo)\n        audioCountContainer.style.display = \"none\"\n        // if (userInfo.AudioCount>1800){\n        //     isPaidSubscribtion = true\n        //     audioCountContainer.style.display = \"none\"\n        // }else{\n        //     audioAvalibleSign.innerText = \" \" + formatDuration(userInfo.AudioCount)\n        // }\n        flexatarAvalibleSign.innerText = userInfo.FtarCount\n        // console.log(\"userInfo\",userInfo)\n   \n}\n\nconst start = async ()=>{\n    await updateUserInfo()\n    // return\n    flexatarSDK = new FtarView.SDK(token)\n    renderer = await flexatarSDK.newRenderer()\n    if (renderer.error == \"session_limit\"){\n        showPopup(_locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.sessionLimit)\n        // showPopup(\"Session limit reached.\")\n        // loaderSign.style.display = \"none\"\n        loaderSign.classList.add(\"invisible\")\n        return\n    }\n\n    const animator = await flexatarSDK.newAnimator()\n    renderer.animator = animator\n    \n    \n    for (const patternId of [\"All\"].concat(animator.patternList)){\n        // console.log(patternId)\n        const option = document.createElement(\"option\");\n        option.text = _locale_js__WEBPACK_IMPORTED_MODULE_2__.texts[\"emo\"+patternId]\n        option.value = patternId\n        animationSelect.appendChild(option);\n    }\n    animationSelect.disabled = false\n\n    animationSelect.onchange = () => {\n        animator.currentAnimationPattern = animationSelect.options[animationSelect.selectedIndex].value\n    }\n\n    ftarList = await FtarView.flexatarList(token,{preview:true})\n    ;(0,_caching_js__WEBPACK_IMPORTED_MODULE_1__.updateCahceByList)(ftarList)\n    // console.log(\"ftarList\",ftarList)\n    if (!ftarList){\n        showPopup(_locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.noService)\n        // showPopup(\"Service unavailable.\")\n        // loaderSign.style.display = \"none\"\n        loaderSign.classList.add(\"invisible\")\n        return\n    }\n    // ftarList = ftarList.concat(ftarList)\n    await downloadStartupFlexatars()\n    // loaderSign.style.display = \"none\"\n    loaderSign.classList.add(\"invisible\")\n    // console.log(\"startup flx downloaded\")\n    \n\n\n    const loadFtarQueue = new FtarView.util.DispatchQueue()\n    let previewCounter = 0\n    for (const ftarEntry of ftarList){\n        loadFtarQueue.addTask(async ()=>{\n\n                const imSource = await (0,_caching_js__WEBPACK_IMPORTED_MODULE_1__.getPreviewWraped)(ftarEntry)\n                const previewElement = await addPreview(ftarEntry,renderer,flexatarListContainer,imSource,0)\n                const previewElement1 = await addPreview(ftarEntry,renderer,flexatarListContainer1,imSource,1)\n                if (previewCounter == 0){\n                    buttonsHidden(false)\n                }\n                previewCounter ++;\n\n                previewList[0].push(previewElement)\n                previewList[1].push(previewElement1)\n            // }\n\n        },0,false)\n    }\n\n};\nstart();\n\n\nlet activeSlot = 0\nlet slotIdx = [0,0]\nlet slotFtarId = [null,null]\n\n\nlet lipsyncer;\nconst startLipsyncer = async () =>{\n    lipsyncer = await FtarLipsyncFile.newInstance();\n}\nstartLipsyncer();\n\nconst imageMimeTypes = [\n    \"image/jpeg\",\"image/png\",\"image/bmp\",\"image/webp\",\"image/avif\",\"image/x-portable-bitmap\",\n    \"image/x-portable-anymap\",\"image/x-portable-pixmap\",\"image/tiff\"\n]\nfunction checkFileType(fileType, typelist){\n    for (const mimeType of typelist){\n        \n        if (fileType == mimeType) {\n            return true\n        }\n    }\n    return false\n}\n\nfunction checkFileTypeIsAudio(fileType){\n    return fileType.startsWith(\"audio/\")\n}\n\nfunction showPopup(text){\n    popup.classList.remove(\"invisible\")\n    // popup.style.display = \"block\"\n    popupText.innerText = text\n    \n}\n\nfunction hidePopup(){\n    popup.classList.add(\"invisible\")\n    // popup.style.display = \"none\";\n}\n\nlet oldTab = tabCreate;\nlet oldButton = createMainPanelButton;\nasync function showTab(tabButton,tab){\n    if (oldTab === tab) return;\n    if (isRecording){\n        showPopup(_locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.cantChange)\n        // showPopup(\"Can't change tab while recording!\")\n        return\n    }\n    await leavePage(oldTab)\n    oldButton.classList.remove(\"active\")\n    // oldButton.className = oldButton.className.replace(\"button-on-panel-pressed\",\"\").replace(\" \",\"\")\n    \n    oldTab.classList.add(\"invisible\")\n    tab.classList.remove(\"invisible\")\n\n    // oldTab.style.display = \"none\"\n    // tab.style.display = \"flex\"\n    oldButton = tabButton\n    oldButton.classList.add(\"active\")\n    // oldButton.className = `${oldButton.className} button-on-panel-pressed`\n    oldTab = tab\n    if (tab === tabChoose){\n        await setupChoose()\n    }else if (tab === tabRecord){\n        initPlayer()\n        showFlexatarWithRecorded()\n        setEffect(effectId)\n        \n    }else if (tab === tabSettings){\n        setupSettings()\n        setEffect(effectId)\n    }\n    \n}   \n\nconst chooseFtarPlaceholder1 = chooseFtarPlaceholder\nasync function leavePage(page){\n    if (!page) return;\n    if (page === tabChoose){\n        headerChooseContainer.replaceChild(chooseFtarPlaceholder1,renderer.canvas)\n\n    } else if  (page === tabRecord){\n        cancelPreviewRec()\n    }else{\n        await ftarCanvasReplacment.addTask(async ()=>{\n            try{\n                \n                    renderer.canvas.remove()\n                \n            }catch{\n                // console.log(\"canvas can not be removed\")\n            }\n        },0,false)\n    }\n    recVideoElement.pause()\n}\n\nfunction buttonsHidden(v){\n    for (const b of buttonsGroup){\n        b.disabled = v\n    }\n}\n\nasync function setupChoose(){\n    await ftarCanvasReplacment.addTask(async ()=>{\n        headerChooseContainer.replaceChild(renderer.canvas,chooseFtarPlaceholder)\n    },0,false) \n\n    const currentPreview = previewList[0][slotIdx[0]]\n    if (currentPreview)\n        currentPreview.click()\n    const currentPreview1 = previewList[1][slotIdx[1]]\n    if (currentPreview1)\n        currentPreview1.click()\n\n    // renderer.effect = FtarView.effect.no()\n}\n\nasync function setupSettings(){\n\n    settingsCanvasContainer.appendChild(renderer.canvas)\n    renderer.canvas.width=240\n    renderer.canvas.height=320\n    await setupFtarRender()\n}\n\nasync function setupFtarRender(){\n    \n    if (slotFtarId[0]){\n        const ftar = await getFtar(slotFtarId[0])\n        renderer.slot1 = ftar\n    }\n    if (slotFtarId[1]){\n        const ftar = await getFtar(slotFtarId[1])\n        renderer.slot2 = ftar\n    }\n   \n    renderer.start()\n    if (effectId!=0){\n        setEffect(effectId)\n    }\n}\n\nlet player\nfunction initPlayer(){\n    if (player) return\n    player = new Audio()\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const audioStream = FtarView.util.mediaStreamFromAudio(player,audioContext)\n    ftarMediastream = renderer.canvas.captureStream(30)\n    FtarView.util.addAudioStream(ftarMediastream,audioStream)\n}\n\nfunction replaceFileExtension(filename, newExtension) {\n    const lastDotIndex = filename.lastIndexOf('.');\n    if (lastDotIndex === -1) {\n        return `${filename}.${newExtension}`;\n    }\n    return `${filename.substring(0, lastDotIndex)}.${newExtension}`;\n}\n\nlet isRecording = false\nasync function startPreview(isRec){\n    if (!ftarRecord){\n        showPopup(_locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.prepAudio)\n        // showPopup(\"Prepare audio first\")\n        return\n    }\n    previewButton.hidden = true;\n    recordButton.hidden = true;\n    recStop.hidden = false;\n    // const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    // const player = new Audio()\n    player.src = currentAudioFileCell.audioUrl\n    // const audioStream = FtarView.util.mediaStreamFromAudio(player,audioContext)\n    const animTimer = currentAudioFileCell.ftarRecord.playWithPlayer(renderer,player);\n\n    \n\n    await player.play()\n    if (isRec){\n        isRecording = true\n        ftarRecorder = new FtarView.util.FlexatarRecorder(ftarMediastream)\n        ftarRecorder.onready = async (url,file) => {\n\n            // urlMp4 = await convert(file)\n\n            let ext = \"webm\"\n            let urlMp4Promise\n            let secondButtonText\n            if ( !file.type.includes(\"webm\")){\n                ext = \"mp4\"\n            }else{\n                // urlMp4Promise = convert(file)\n                secondButtonText = \"mp4\"\n            }\n           \n             \n            \n            const videoFileName = replaceFileExtension(fileNameHolder.innerText,ext)\n            const cell = new StatusCell(videoFileName,selectedImgSrc,\"download\",secondButtonText)\n            cell.status = _locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.videoReady\n            // cell.status = \"Video ready to download\"\n            cell.ondownloadpressed = () => {\n                const link = document.createElement('a');\n                link.href = url;\n                link.download = videoFileName;\n                // document.body.appendChild(link);\n                link.click();\n                // document.body.removeChild(link);\n            }\n            // urlMp4Promise.then(urlMp4=>{\n            let urlMp4Ready\n            cell.onoptiondownloadpressed = () => {\n                // showConfirm(\"Convert form webm to mp4? May take time.\",()=>{\n                showConfirm(_locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.convert,()=>{\n                    cell.onoptiondownloadpressed = null\n                    cell.optContainer.innerText = _locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.wait\n                    ;(0,_video_conversions_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(file).then(urlMp4=>{\n                        cell.optContainer.innerText = _locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.mp4\n                        urlMp4Ready = urlMp4\n                        cell.onoptiondownloadpressed = () => {\n                            const link = document.createElement('a');\n                            link.href = urlMp4;\n                            link.download = videoFileName;\n                            link.click();\n                        }\n                        const link = document.createElement('a');\n                        link.href = urlMp4;\n                        link.download = videoFileName;\n                        link.click();\n\n                    })\n                },()=>{})\n                \n               \n            }\n            // })\n            \n\n            // cell.color = \"orange\"\n\n            tabVideos.appendChild(cell.container)\n            videosMainPanelButton.disabled = false\n            showPopup(_locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.findVideo)\n            // showPopup(\"Find result in videos section\")\n\n        }\n        ftarRecorder.start()\n    }\n\n    player.onpause = () =>{\n        isRecording = false\n        // console.log(\"player paused\")\n        clearInterval(animTimer)\n        setTimeout(()=>{\n            renderer.shutUp()\n        },200)\n        if (ftarRecorder)\n            ftarRecorder.stop()\n\n        previewButton.hidden = false;\n        recordButton.hidden = false;\n        recStop.hidden = true;\n        \n    }\n\n  \n}\n\nfunction cancelPreviewRec(){\n    player.pause()\n    // recBottomPanelControl.hidden = false;\n    previewButton.hidden = false;\n    recordButton.hidden = false;\n    recStop.hidden = true;\n}\n\nlet ftarRecorder\nlet ftarMediastream\nasync function showFlexatarWithRecorded(){\n    \n    const resolutionOption = videoResolutionSelect.options[videoResolutionSelect.selectedIndex].value\n    if (resolutionOption == \"option1\"){\n        renderer.canvas.width = 480\n        renderer.canvas.height = 640\n    }else{\n        renderer.canvas.width = 240\n        renderer.canvas.height = 320\n    }\n    if (!recVideoElement.srcObject)\n        recVideoElement.srcObject = ftarMediastream\n    recVideoContainer.appendChild(renderer.canvas)\n    recVideoElement.play()\n\n    await setupFtarRender()\n}\n\n\n\nclass DropZone {\n\n    constructor(text,accept){\n        this.dropZone = document.createElement(\"div\")\n        this.dropZone.className = \"drop-zone\"\n        this.dropZoneText = document.createElement(\"p\")\n        this.dropZoneText.innerText = text\n        this.dropZone.appendChild(this.dropZoneText)\n        const input=document.createElement('input');\n        input.type=\"file\";\n        if (accept){\n            input.accept = accept\n        }else{\n            input.accept=\"image/*\"\n        }\n        input.onchange = e => this.handleFiles(e)\n\n        this.dropZone.onclick = () =>{\n            input.click()\n        }\n        this.dropZone.ondragover = (e)=>{\n            e.preventDefault();\n            this.dropZone.classList.add('hover');\n        }\n        \n        this.dropZone.ondragleave = (e)=>{\n            this.dropZone.classList.remove('hover');\n        }\n        this.dropZone.ondrop = e =>{\n            e.preventDefault();\n            this.dropZone.classList.remove('hover');\n            const files = e.dataTransfer.files;\n            this.handleFiles({ target: { files } });\n        }\n\n    }\n    hide(){\n        this.dropZone.classList.add(\"invisible\")\n        // this.dropZone.style.display = \"none\"\n    }\n    show(){\n        this.dropZone.classList.remove(\"invisible\")\n        // this.dropZone.style.display = \"\"\n    }\n}\n\nclass StatusCell{\n    constructor(name,imgSrc,button,seccondButton){\n        const cellContainer = document.createElement(\"div\")\n        cellContainer.className = \"line-cell\"\n\n        if (imgSrc){\n            // console.log(\"imgSrc not null\")\n            const photo = document.createElement(\"img\")\n            photo.className = \"profile-photo\"\n            photo.src = imgSrc\n            cellContainer.appendChild(photo)\n        }\n\n        const detailsContainer = document.createElement(\"div\")\n        detailsContainer.className = \"details\"\n\n        const nameElement = document.createElement(\"span\")\n        nameElement.className = \"name\"\n        nameElement.innerText = name\n        detailsContainer.appendChild(nameElement)\n        const statusElement = document.createElement(\"span\")\n        statusElement.className = \"status\"\n        statusElement.innerText = \"In Progress (~20 seconds)\"\n        detailsContainer.appendChild(statusElement)\n        cellContainer.appendChild(detailsContainer)\n        let dotContainer\n        let seccondButtonContainer\n        \n        if (button){\n            if (seccondButton){\n                seccondButtonContainer = document.createElement(\"div\")\n                seccondButtonContainer.className = \"conver-button\"\n                seccondButtonContainer.innerText = seccondButton\n\n                cellContainer.appendChild(seccondButtonContainer)\n                seccondButtonContainer.onclick = () => {\n                    if (this.onoptiondownloadpressed) this.onoptiondownloadpressed()\n                }\n            }\n\n            dotContainer = document.createElement(\"div\")\n            dotContainer.className = \"download-button material-symbols-outlined\"\n            dotContainer.innerText = button\n            cellContainer.appendChild(dotContainer)\n            dotContainer.onclick = () => {\n                if (this.ondownloadpressed) this.ondownloadpressed()\n            }\n        }else{\n            dotContainer = document.createElement(\"div\")\n            dotContainer.className = \"status-dot\"\n            cellContainer.appendChild(dotContainer)\n        }   \n        \n\n        this.container = cellContainer\n        this.statusEl = statusElement\n        this.dotContainer = dotContainer\n        this.optContainer = seccondButtonContainer\n\n    }\n    set status(val){\n        this.statusEl.innerText = val\n       \n    }\n    set color(val){\n        \n        this.dotContainer.style.backgroundColor = val\n    }\n    set pulse(val){\n        \n        if (val){\n            this.dotContainer.classList.add(\"pulsing\");\n        }else{\n            this.dotContainer.classList.remove(\"pulsing\");\n        }\n    }\n    set icon(val){\n        this.dotContainer.innerText = val\n    }\n    ondownloadpressed\n    onoptiondownloadpressed\n\n}\n\n\nconst imageDropZone = new DropZone(_locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.dropPhoto)\n// const imageDropZone = new DropZone(\"Drag & drop frontal photo here or click to upload\")\nlet imgSrc\nlet currentImgFile\nimageDropZone.handleFiles = (e) =>{\n    // console.log(\"file chosen\",e.target.files)\n    const file = e.target.files[0];\n    \n    currentImgFile = file\n    const fileType = file.type;\n    if (checkFileType(fileType,imageMimeTypes)){\n        imageDropZone.hide()\n        // imgForFtarPreview.style.display = \"block\"\n        imgSrc =  URL.createObjectURL(file);\n        imgForFtarPreview.src = imgSrc;\n        // imgForFtarPreview.style.display = \"block\"\n        confirmImageBlock.classList.remove(\"invisible\")\n        // confirmImageBlock.style.display = \"block\"\n        flexatarImageDropDownContainer.classList.add(\"invisible\")\n        // flexatarImageDropDownContainer.style.display = \"none\"\n    }else{\n        showPopup(_locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.notAnImage)\n        // showPopup(\"This is not an image file!\")\n\n    }\n}\n\nflexatarImageDropDownContainer.appendChild(imageDropZone.dropZone)\n\n\nfunction formatDuration(seconds) {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n\n    // Pad with leading zeros if needed\n    const formattedHours = String(hours).padStart(2, '0');\n    const formattedMinutes = String(minutes).padStart(2, '0');\n    const formattedSeconds = String(secs).padStart(2, '0');\n\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n}\n\n\nlet ftarRecord\nlet audioUrl\nlet oldAudioFileCell\nlet currentAudioFileCell\nconst audioDropZone = new DropZone(_locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.dropAudio,\"audio/*\")\n// const audioDropZone = new DropZone(\"Drag & drop audio here or click to upload\",\"audio/*\")\naudioDropZone.handleFiles = async (e) =>{\n    const file = e.target.files[0];\n    const fileType = file.type;\n    if (!checkFileTypeIsAudio(fileType)){\n        showPopup(_locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.notAnAudio)\n        // showPopup(\"This is not an audio file!\")\n        return\n    }\n\n    const currentAudioUrl = URL.createObjectURL(file);\n    audioUrl = currentAudioUrl\n    audioProgressBar.style.width = `${0}%`;\n    fileNameHolder.innerText = file.name\n    audioDropZone.hide()\n    completionForm.classList.remove(\"invisible\")\n    // completionForm.style.display = \"block\"\n    // audioDropDownContainer.style.display = \"none\"\n    audioDropDownContainer.classList.add(\"invisible\")\n\n\n    // const lipsyncer = await FtarLipsyncFile.newInstance()\n\n    let checkResponsePromise \n    if (!isPaidSubscribtion){\n        checkResponsePromise = fetch(\n            \"https://api.flexatar-sdk.com/checkoptional/AudioCount\",\n            {\n                method: 'GET',\n                headers:{'Authorization': 'Bearer ' + token}\n            }\n        )\n    }\n    // const response = await checkResponsePromise \n    // if (!response.ok) {\n    //     showPopup(\"No connection to service\")\n    //     return false\n    // }\n    // const audioCheck = await response.json()\n    // console.log(\"audioCheck\",audioCheck)\n    // return\n\n    readyIndicator.innerText = _locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.processinTime\n    // readyIndicator.innerText = \"Processing can take some time if file is big.\"\n    let duration = \"\"\n    let durationSeconds\n    lipsyncer.makeAnimation(file,async (animationArray)=>{\n            audioProgressBar.style.width = `${100}%`;\n            readyIndicator.innerText = _locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.processComplete\n            // readyIndicator.innerText = \"Process complete!\"\n            if (!isPaidSubscribtion){\n                const chargeResponse = await fetch(\n                    \"https://api.flexatar-sdk.com/chargeoptional/AudioCount/\"+Math.floor(durationSeconds),\n                    {\n                        method: 'GET',\n                        headers:{'Authorization': 'Bearer ' + token}\n                    }\n                )\n                if (!chargeResponse.ok){\n                    showPopup(\"Service Unavailable\")\n                    cancelAudio()\n                    return\n                }\n            }\n            \n            ftarRecord = new FtarView.FtarRecord(animationArray)\n\n            if (oldAudioFileCell){\n                oldAudioFileCell.icon = \"check_box_outline_blank\"\n            }\n\n            const cell = new StatusCell(file.name,undefined,\"select_check_box\")\n            cell.status = duration\n            oldAudioFileCell = cell\n            audioListContanier.insertBefore(cell.container, audioListContanier.firstChild);\n            cell.ftarRecord = ftarRecord\n            cell.audioUrl = currentAudioUrl\n            cell.ondownloadpressed = () => {\n                if (oldAudioFileCell){\n                    oldAudioFileCell.icon = \"check_box_outline_blank\"\n                    cell.icon = \"select_check_box\"\n                    currentAudioFileCell = cell\n                    \n                }\n                oldAudioFileCell = cell\n            }\n            currentAudioFileCell = cell\n           \n            cancelAudio()\n\n            // setTimeout(()=> {\n            //     updateUserInfo()\n            // },1000)\n            // const cell = new StatusCell(file.name,null,\"check_box_outline_blank\")\n        \n        },\n        progress => {\n            audioProgressBar.style.width = `${Math.floor(progress)}%`;\n        },async (audioPar) => {\n            if (isPaidSubscribtion){\n                return true\n            }\n            durationSeconds = audioPar.duration\n            duration = new Date(audioPar.duration * 1000).toISOString().substring(11, 19)\n\n            const response = await checkResponsePromise \n            if (!response.ok) {\n                showPopup(\"No connection to service\")\n                return false\n            }\n            const audioCheck = await response.json()\n            // console.log(\"audioCheck\",audioCheck)\n            if (audioCheck.count<audioPar.duration){\n                showPopup(\"Out of Subscribtion\")\n                cancelAudio()\n                return false\n            }\n            return true\n        }\n    )\n}\n\naudioDropDownContainer.appendChild(audioDropZone.dropZone)\n\nfunction cancelAudio(){\n    // console.log(\"cancel audio\")\n    completionForm.classList.add(\"invisible\")\n    // completionForm.style.display = \"none\"\n    audioDropDownContainer.classList.remove(\"invisible\")\n    // audioDropDownContainer.style.display = \"flex\"\n    lipsyncer.cancel()\n    audioDropZone.show()\n    \n}\n\n\nfunction resetInputImgForFtar(){\n    \n    // confirmImageBlock.style.display = \"none\"\n    confirmImageBlock.classList.add(\"invisible\")\n\n    // flexatarImageDropDownContainer.style.display = \"flex\"\n    flexatarImageDropDownContainer.classList.remove(\"invisible\")\n    imageDropZone.show()\n}\n\nasync function sendImgToCreateFtar(){\n    \n\n    const cell = new StatusCell(currentImgFile.name,imgSrc)\n    cell.color = \"orange\"\n    cell.pulse = true\n    imageListContanier.insertBefore(cell.container, imageListContanier.firstChild);\n\n    resetInputImgForFtar()\n\n    const ftarLink = await FtarView.makeFlexatar(token,currentImgFile,\"noname\",{ftar:true,preview:true})\n    if (!ftarLink){\n        cell.status = _locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.unknownErr\n        // cell.status = \"Unknown error\"\n        cell.color = \"red\"\n        cell.pulse = false\n        return\n    }\n    if (ftarLink.err){\n        if (ftarLink.reason){\n            if (ftarLink.reason === \"queue_limit\"){\n                cell.status = _locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.onlyOne\n                // cell.status = \"Only one process at time allowed\"\n            }else if (ftarLink.reason === \"subscription_limit\") {\n                cell.status = _locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.outOfSubs\n                // cell.status = \"Out of Subscription Limit\"\n            }\n        }else{\n            cell.status = _locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.badPhoto\n            // cell.status = \"Bad Photo\"\n        }\n        \n        cell.color = \"red\"\n        cell.pulse = false\n        return\n    }\n    cell.status = _locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.ready\n    cell.color = \"green\"\n    cell.pulse = false\n    const imSource = await (0,_caching_js__WEBPACK_IMPORTED_MODULE_1__.getPreviewWraped)(ftarLink)\n    const previewElement = await addPreview(ftarLink,renderer,flexatarListContainer,imSource,0)\n    const previewElement1 = await addPreview(ftarLink,renderer,flexatarListContainer1,imSource,1)\n    previewList[0].push(previewElement)\n    previewList[1].push(previewElement1)\n    if (previewList[0].length==1){\n        loadedFtars[ftarLink.id] = await FtarView.getFlexatar(ftarLink)\n        slotIdx[0] = 0\n        slotIdx[1] = 0\n        slotFtarId[0] = ftarLink.id\n        slotFtarId[1] = ftarLink.id\n    }\n    setTimeout(()=> {\n        updateUserInfo()\n    },1000)\n}\n\n\n\nconst backgroundDropZone = new DropZone(_locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.dropBkg)\n// const backgroundDropZone = new DropZone(\"Drag & drop background image here or click to upload\")\nbackgroundDropZone.handleFiles = async (e) =>{\n    const file = e.target.files[0];\n    const fileType = file.type;\n    // console.log(\"fileType\",fileType)\n    if (!checkFileType(fileType,imageMimeTypes)){\n        showPopup(_locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.notAnImage)\n        // showPopup(\"This is not an image file!\")\n        return\n    }\n    const resizedFile = await FtarView.util.resizeImageToWidth(file,480)\n    const overlayUrl = URL.createObjectURL(resizedFile);\n    const overlay = await flexatarSDK.newOverlay(overlayUrl);\n    // console.log(\"overlay accepted\")\n    renderer.addOverlay(overlay,{x:0,y:0,width:100,height:100,mode:\"back\"});\n    backgroundDropZone.hide()\n    removeBackgroundButton.hidden = false\n    \n}\nbackgroundZone.appendChild(backgroundDropZone.dropZone)\n\nfunction cancelBackground(){\n    removeBackgroundButton.hidden = true\n    backgroundDropZone.show()\n    renderer.addOverlay(null,{x:0,y:0,width:100,height:100,mode:\"back\"});\n}\n\n\nfunction hexToRgb(hexColor) {\n    if (typeof hexColor !== 'string') {\n      throw new Error(\"Invalid input: color must be a string.\");\n    }\n  \n    // Remove the hash symbol if present\n    if (hexColor.startsWith(\"#\")) {\n      hexColor = hexColor.slice(1);\n    }\n  \n    // Validate the hex format\n    const validHex = /^([A-Fa-f0-9]{3}|[A-Fa-f0-9]{6})$/;\n    if (!validHex.test(hexColor)) {\n      throw new Error(\"Invalid hex color format.\");\n    }\n  \n    // Support shorthand hex format (e.g., #abc -> #aabbcc)\n    if (hexColor.length === 3) {\n      hexColor = hexColor.split(\"\").map(char => char + char).join(\"\");\n    }\n  \n    // Parse the color components\n    const r = parseInt(hexColor.slice(0, 2), 16) / 255;\n    const g = parseInt(hexColor.slice(2, 4), 16) / 255;\n    const b = parseInt(hexColor.slice(4, 6), 16) / 255;\n  \n    if (isNaN(r) || isNaN(g) || isNaN(b)) {\n      throw new Error(\"Failed to parse the hex color.\");\n    }\n  \n    return [r, g, b];\n}\n\ncolorInput.oninput = (event) => {\n    const value = event.target.value;\n    try{\n        \n        renderer.backgroundColor = hexToRgb(value)\n        // console.log(\"color input\",rgbCol)\n    }catch{\n\n    }\n}\n\nfunction setEffect(i){\n    if (toggleEffectAnimation.checked){\n        if (i==1)\n            renderer.effect = FtarView.effect.morph()\n        else if (i==2)\n            renderer.effect = FtarView.effect.hybrid()\n        else if (i==0)\n            renderer.effect = FtarView.effect.no()\n    }\n    else\n        effectSlider.dispatchEvent( new Event('change'));\n}\n\n\neffectSlider.disabled = true\nlet effectId = 0\nconst effectButtons = [noEffectButton,morphEffectButton,hybridEffectButton]\nfunction chooseEffect(effectIdx,button){\n    if (effectId == effectIdx) return\n    effectId = effectIdx\n    for (const b of effectButtons){\n        if (b === button){\n            b.classList.add('active');\n        }else{\n            try{\n                b.classList.remove('active') \n            }catch{}\n        }\n    }\n\n    effectSlider.disabled = effectId == 0\n    if (effectId == 0){\n        renderer.effect = FtarView.effect.no()\n        effectSlider.disabled = true\n    }else{\n        effectSlider.disabled = false\n        setEffect(effectId)\n    }\n    \n}\n\n/*\nfunction effectNo(){\n    renderer.effect = FtarView.effect.no()\n    effectSlider.disabled = true\n    effectId = 0\n}\n\nfunction effectMorph(){\n\n    effectSlider.disabled = false\n    effectId = 1\n    setEffect(effectId)\n}\nfunction effectHybrid(){\n    effectSlider.disabled = false\n    effectId = 2\n    setEffect(effectId)\n}\n*/\n\ntoggleEffectAnimation.onchange = () => {\n    setEffect(effectId)\n\n}\neffectSlider.onchange = () =>{\n    if (effectId != 0){\n        renderer.effect =  ()=>{ return { mode: effectId, parameter: effectSlider.value / 100 }}\n        toggleEffectAnimation.checked = false\n    }else{\n        renderer.effect = FtarView.effect.no()\n    }\n}\n\nfunction deleteFlexatar(){\n    showConfirm(\n        _locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.deleteQuest,\n        // \"Sure, delete this flexatar?\",\n        async () =>{\n            const fEntry = previewList[0][slotIdx[0]].ftarEntry\n            fEntry.token = token\n            const deletionResult = await FtarView.deleteFlexatar(fEntry)\n            if (!deletionResult){\n                showPopup(_locale_js__WEBPACK_IMPORTED_MODULE_2__.texts.wentWrong)\n                return\n            }\n\n            previewList[0][slotIdx[0]].remove()\n            previewList[0].splice(slotIdx[0],1)\n            previewList[1][slotIdx[0]].remove()\n            previewList[1].splice(slotIdx[0],1)\n\n            ftarList.splice(slotIdx[0],1)\n            const deletionIndex = slotIdx[0]\n            if (slotIdx[0]>=previewList[0].length){\n                slotIdx[0] --;\n            }\n            if (previewList[0].length == 0){\n                // console.log(\"No more flexatars\")\n                slotIdx[0] = 0\n                slotIdx[1] = 0\n                createMainPanelButton.click()\n                buttonsHidden(true)\n                return;\n            }\n            if (slotIdx[1]>deletionIndex){\n                slotIdx[1]--\n                slotFtarId[1] = previewList[0][slotIdx[1]].ftarEntry.id\n                renderer.slot2 = loadedFtars[slotFtarId[1]]\n            }else if (slotIdx[1]==deletionIndex){\n                slotIdx[1] = slotIdx[0]\n             \n                slotFtarId[1] = previewList[0][slotIdx[1]].ftarEntry.id\n                renderer.slot2 = loadedFtars[slotFtarId[1]]\n            }\n            \n\n            replacedPreview = null;\n            const newActiveFtarEntry = previewList[0][slotIdx[0]].ftarEntry\n            await getFtar(newActiveFtarEntry.id)\n\n            slotFtarId[0] = newActiveFtarEntry.id\n            renderer.slot1 = loadedFtars[newActiveFtarEntry.id]\n            \n        },\n        () =>{\n\n        }\n    )\n}\n\nfunction showConfirm(text,onConfirm,onCancel){\n    \n    onCancelGlob = () => {\n\n        onCancel()\n        popupConfirm.classList.add(\"invisible\")\n        // popupConfirm.style.display = \"none\"\n    }\n\n    onConfirmGlob = () => {\n        onConfirm()\n        popupConfirm.classList.add(\"invisible\")\n        // popupConfirm.style.display = \"none\"\n    }\n\n    confirmText.innerText = text\n    popupConfirm.classList.remove(\"invisible\")\n    // popupConfirm.style.display = \"block\"\n}\n\nlet onConfirmGlob\nfunction confirmChosen(){\n    if (onConfirmGlob) onConfirmGlob();\n}\nlet onCancelGlob\nfunction cancelChosen(){\n    if (onCancelGlob) onCancelGlob();\n}\n\nrecVideoElement.muted=false\nfunction muteAudioWhileRecording(){\n    recVideoElement.muted = !recVideoElement.muted\n    if (recVideoElement.muted){\n        muteButton.innerText = \"volume_up\"\n    }else{\n        muteButton.innerText = \"volume_off\"\n    }\n    \n}\n\nwindow.showTab = showTab\nwindow.sendImgToCreateFtar = sendImgToCreateFtar\nwindow.resetInputImgForFtar = resetInputImgForFtar\nwindow.cancelAudio = cancelAudio\nwindow.muteAudioWhileRecording = muteAudioWhileRecording\nwindow.startPreview = startPreview\nwindow.cancelPreviewRec = cancelPreviewRec\nwindow.cancelBackground = cancelBackground\nwindow.chooseEffect = chooseEffect\nwindow.deleteFlexatar = deleteFlexatar\nwindow.hidePopup = hidePopup\nwindow.confirmChosen = confirmChosen\nwindow.cancelChosen = cancelChosen\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://videogen/./src/index.js?");

/***/ }),

/***/ "./src/locale.js":
/*!***********************!*\
  !*** ./src/locale.js ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   texts: () => (/* binding */ texts)\n/* harmony export */ });\n\n\nconst locale = await (await fetch(\"./res/locale_en.json\")).json()\nconst htmlTexts = locale.html\nfor (const elementId in htmlTexts){\n    // console.log(elementId)\n    document.getElementById(elementId).textContent = htmlTexts[elementId]\n}\nconst texts = locale.js\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://videogen/./src/locale.js?");

/***/ }),

/***/ "./src/video_conversions.js":
/*!**********************************!*\
  !*** ./src/video_conversions.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ convert)\n/* harmony export */ });\n/* harmony import */ var _ffmpeg_ffmpeg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ffmpeg/ffmpeg */ \"./node_modules/@ffmpeg/ffmpeg/dist/esm/index.js\");\n/* harmony import */ var _ffmpeg_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ffmpeg/util */ \"./node_modules/@ffmpeg/util/dist/esm/index.js\");\n\n\n\nconst ffmpeg = new _ffmpeg_ffmpeg__WEBPACK_IMPORTED_MODULE_0__.FFmpeg();\nlet ffmpegLoadPromies\nconst load = async () => {\n    // console.log(\"Start load ffmpeg\")\n    const baseURL = '.'\n   \n    ffmpeg.on('log', ({ message }) => {\n        // messageRef.current.innerHTML = message;\n        \n        // console.log(message);\n    });\n    // toBlobURL is used to bypass CORS issue, urls with the same\n    // domain can be used directly.\n    ffmpegLoadPromies =  ffmpeg.load({\n        coreURL: await (0,_ffmpeg_util__WEBPACK_IMPORTED_MODULE_1__.toBlobURL)(`${baseURL}/res/ffmpeg-core.js`, 'text/javascript'),\n        wasmURL: await (0,_ffmpeg_util__WEBPACK_IMPORTED_MODULE_1__.toBlobURL)(`${baseURL}/res/ffmpeg-core.wasm`, 'application/wasm'),\n    });\n    // console.log(\"ffmpeg ready\")\n\n}\nfunction checkCodecs(){\n    const options = [\n        { mimeType: 'video/mp4;codecs=avc1' }, // MP4 with H.264\n        { mimeType: 'video/mp4'}, // MP4 with default coded\n        { mimeType: 'video/webm;codecs=h264' }, // WebM with H.264\n        { mimeType: 'video/webm;codecs=vp8' },  // WebM with VP8\n        { mimeType: 'video/webm' },             // WebM with default codec\n        { mimeType: 'video/x-matroska;codecs=avc1' }, // MKV with H.264 (if supported)\n        { mimeType: 'video/ogg' },              // Ogg as a fallback\n      ];\n    \n      for (const option of options) {\n        if (MediaRecorder.isTypeSupported(option.mimeType)) {\n          return option.mimeType; // Return the first supported type\n        }\n      }\n}\nconst codec = checkCodecs()\nif (!codec.startsWith(\"video/mp4\"))\n    load()\n\nasync function convert(file,prompt) {\n    if (!ffmpegLoadPromies) return\n    if (prompt) {\n        if (await prompt(codec.includes(\"h264\"))){\n            return\n        }\n    }\n    await ffmpegLoadPromies\n    const name = \"input.webm\"\n    await ffmpeg.writeFile(name, await (0,_ffmpeg_util__WEBPACK_IMPORTED_MODULE_1__.fetchFile)(file));\n    if (codec.includes(\"h264\")){\n        await ffmpeg.exec(['-i', name, \"-codec\", \"copy\", \"-strict\", \"-2\", 'output.mp4']);\n    }else{\n        await ffmpeg.exec(['-i', name, \"-c:v\",\"libx264\", \"-preset\",\"ultrafast\",\"-c:a\",\"aac\", 'output.mp4']);\n    }\n    const data = await ffmpeg.readFile('output.mp4');\n    // console.log(\"transcoded\",data)\n    const blob = new Blob([data], { type: 'video/mp4' });\n\n    // Generate a URL for the Blob\n    const url = URL.createObjectURL(blob);\n    return url\n}\n\n\n//# sourceURL=webpack://videogen/./src/video_conversions.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/async module */
/******/ 	(() => {
/******/ 		var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 		var resolveQueue = (queue) => {
/******/ 			if(queue && queue.d < 1) {
/******/ 				queue.d = 1;
/******/ 				queue.forEach((fn) => (fn.r--));
/******/ 				queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
/******/ 			}
/******/ 		}
/******/ 		var wrapDeps = (deps) => (deps.map((dep) => {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackQueues]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					queue.d = 0;
/******/ 					dep.then((r) => {
/******/ 						obj[webpackExports] = r;
/******/ 						resolveQueue(queue);
/******/ 					}, (e) => {
/******/ 						obj[webpackError] = e;
/******/ 						resolveQueue(queue);
/******/ 					});
/******/ 					var obj = {};
/******/ 					obj[webpackQueues] = (fn) => (fn(queue));
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 			ret[webpackQueues] = x => {};
/******/ 			ret[webpackExports] = dep;
/******/ 			return ret;
/******/ 		}));
/******/ 		__webpack_require__.a = (module, body, hasAwait) => {
/******/ 			var queue;
/******/ 			hasAwait && ((queue = []).d = -1);
/******/ 			var depQueues = new Set();
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var promise = new Promise((resolve, rej) => {
/******/ 				reject = rej;
/******/ 				outerResolve = resolve;
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {}));
/******/ 			module.exports = promise;
/******/ 			body((deps) => {
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn;
/******/ 				var getResult = () => (currentDeps.map((d) => {
/******/ 					if(d[webpackError]) throw d[webpackError];
/******/ 					return d[webpackExports];
/******/ 				}))
/******/ 				var promise = new Promise((resolve) => {
/******/ 					fn = () => (resolve(getResult));
/******/ 					fn.r = 0;
/******/ 					var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
/******/ 					currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
/******/ 				});
/******/ 				return fn.r ? promise : getResult();
/******/ 			}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
/******/ 			queue && queue.d < 0 && (queue.d = 0);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;