var e={512:e=>{e.exports=function(e,t,n,r){var s=self||window;try{try{var a;try{a=new s.Blob([e])}catch(t){(a=new(s.BlobBuilder||s.WebKitBlobBuilder||s.MozBlobBuilder||s.MSBlobBuilder)).append(e),a=a.getBlob()}var o=s.URL||s.webkitURL,i=o.createObjectURL(a),u=new s[t](i,n);return o.revokeObjectURL(i),u}catch(r){return new s[t]("data:application/javascript,".concat(encodeURIComponent(e)),n)}}catch(e){if(!r)throw Error("Inline worker is not supported");return new s[t](r,n)}}}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var r={};n.d(r,{U:()=>u});var s=n(512),a=n.n(s);function o(){return a()('/*! For license information please see ftar_lipsync_umd.worker.js.LICENSE.txt */\nvar e={570:e=>{e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function r(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=r;var s={},a={};function o(e,t){var n,r,o;return t?(o=0<=(e>>>=0)&&e<256)&&(r=a[e])?r:(n=u(e,(0|e)<0?-1:0,!0),o&&(a[e]=n),n):(o=-128<=(e|=0)&&e<128)&&(r=s[e])?r:(n=u(e,e<0?-1:0,!1),o&&(s[e]=n),n)}function i(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=d)return T}else{if(e<=-f)return S;if(e+1>=f)return v}return e<0?i(-e,t).neg():u(e%h|0,e/h|0,t)}function u(e,t,r){return new n(e,t,r)}n.fromInt=o,n.fromNumber=i,n.fromBits=u;var l=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return c(e.substring(1),t,n).neg();for(var s=i(l(n,8)),a=g,o=0;o<e.length;o+=8){var u=Math.min(8,e.length-o),p=parseInt(e.substring(o,o+u),n);if(u<8){var h=i(l(n,u));a=a.mul(h).add(i(p))}else a=(a=a.mul(s)).add(i(p))}return a.unsigned=t,a}function p(e,t){return"number"==typeof e?i(e,t):"string"==typeof e?c(e,t):u(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=c,n.fromValue=p;var h=4294967296,d=h*h,f=d/2,m=o(1<<24),g=o(0);n.ZERO=g;var y=o(0,!0);n.UZERO=y;var x=o(1);n.ONE=x;var b=o(1,!0);n.UONE=b;var w=o(-1);n.NEG_ONE=w;var v=u(-1,2147483647,!1);n.MAX_VALUE=v;var T=u(-1,-1,!0);n.MAX_UNSIGNED_VALUE=T;var S=u(0,-2147483648,!1);n.MIN_VALUE=S;var E=n.prototype;E.toInt=function(){return this.unsigned?this.low>>>0:this.low},E.toNumber=function(){return this.unsigned?(this.high>>>0)*h+(this.low>>>0):this.high*h+(this.low>>>0)},E.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(S)){var t=i(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var s=i(l(e,6),this.unsigned),a=this,o="";;){var u=a.div(s),c=(a.sub(u.mul(s)).toInt()>>>0).toString(e);if((a=u).isZero())return c+o;for(;c.length<6;)c="0"+c;o=""+c+o}},E.getHighBits=function(){return this.high},E.getHighBitsUnsigned=function(){return this.high>>>0},E.getLowBits=function(){return this.low},E.getLowBitsUnsigned=function(){return this.low>>>0},E.getNumBitsAbs=function(){if(this.isNegative())return this.eq(S)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&!(e&1<<t);t--);return 0!=this.high?t+33:t+1},E.isZero=function(){return 0===this.high&&0===this.low},E.eqz=E.isZero,E.isNegative=function(){return!this.unsigned&&this.high<0},E.isPositive=function(){return this.unsigned||this.high>=0},E.isOdd=function(){return!(1&~this.low)},E.isEven=function(){return!(1&this.low)},E.equals=function(e){return r(e)||(e=p(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},E.eq=E.equals,E.notEquals=function(e){return!this.eq(e)},E.neq=E.notEquals,E.ne=E.notEquals,E.lessThan=function(e){return this.comp(e)<0},E.lt=E.lessThan,E.lessThanOrEqual=function(e){return this.comp(e)<=0},E.lte=E.lessThanOrEqual,E.le=E.lessThanOrEqual,E.greaterThan=function(e){return this.comp(e)>0},E.gt=E.greaterThan,E.greaterThanOrEqual=function(e){return this.comp(e)>=0},E.gte=E.greaterThanOrEqual,E.ge=E.greaterThanOrEqual,E.compare=function(e){if(r(e)||(e=p(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},E.comp=E.compare,E.negate=function(){return!this.unsigned&&this.eq(S)?S:this.not().add(x)},E.neg=E.negate,E.add=function(e){r(e)||(e=p(e));var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,a=65535&this.low,o=e.high>>>16,i=65535&e.high,l=e.low>>>16,c=0,h=0,d=0,f=0;return d+=(f+=a+(65535&e.low))>>>16,h+=(d+=s+l)>>>16,c+=(h+=n+i)>>>16,c+=t+o,u((d&=65535)<<16|(f&=65535),(c&=65535)<<16|(h&=65535),this.unsigned)},E.subtract=function(e){return r(e)||(e=p(e)),this.add(e.neg())},E.sub=E.subtract,E.multiply=function(e){if(this.isZero())return g;if(r(e)||(e=p(e)),t)return u(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(S))return e.isOdd()?S:g;if(e.eq(S))return this.isOdd()?S:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return i(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,s=65535&this.high,a=this.low>>>16,o=65535&this.low,l=e.high>>>16,c=65535&e.high,h=e.low>>>16,d=65535&e.low,f=0,y=0,x=0,b=0;return x+=(b+=o*d)>>>16,y+=(x+=a*d)>>>16,x&=65535,y+=(x+=o*h)>>>16,f+=(y+=s*d)>>>16,y&=65535,f+=(y+=a*h)>>>16,y&=65535,f+=(y+=o*c)>>>16,f+=n*d+s*h+a*c+o*l,u((x&=65535)<<16|(b&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},E.mul=E.multiply,E.divide=function(e){if(r(e)||(e=p(e)),e.isZero())throw Error("division by zero");var n,s,a;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return b;a=y}else{if(this.eq(S))return e.eq(x)||e.eq(w)?S:e.eq(S)?x:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?x:w:(s=this.sub(e.mul(n)),a=n.add(s.div(e)));if(e.eq(S))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=g}for(s=this;s.gte(e);){n=Math.max(1,Math.floor(s.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(n)/Math.LN2),c=o<=48?1:l(2,o-48),h=i(n),d=h.mul(e);d.isNegative()||d.gt(s);)d=(h=i(n-=c,this.unsigned)).mul(e);h.isZero()&&(h=x),a=a.add(h),s=s.sub(d)}return a},E.div=E.divide,E.modulo=function(e){return r(e)||(e=p(e)),t?u((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},E.mod=E.modulo,E.rem=E.modulo,E.not=function(){return u(~this.low,~this.high,this.unsigned)},E.and=function(e){return r(e)||(e=p(e)),u(this.low&e.low,this.high&e.high,this.unsigned)},E.or=function(e){return r(e)||(e=p(e)),u(this.low|e.low,this.high|e.high,this.unsigned)},E.xor=function(e){return r(e)||(e=p(e)),u(this.low^e.low,this.high^e.high,this.unsigned)},E.shiftLeft=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned)},E.shl=E.shiftLeft,E.shiftRight=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},E.shr=E.shiftRight,E.shiftRightUnsigned=function(e){if(r(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?u(this.low>>>e|t<<32-e,t>>>e,this.unsigned):u(32===e?t:t>>>e-32,0,this.unsigned)},E.shru=E.shiftRightUnsigned,E.shr_u=E.shiftRightUnsigned,E.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},E.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},E.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},E.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},E.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,r){return r?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},391:(e,t,n)=>{var r=n(180),s=n(181),a=n(31),o=n(67),i=n(833),u=n(717),l=n(801);l.alea=r,l.xor128=s,l.xorwow=a,l.xorshift7=o,l.xor4096=i,l.tychei=u,e.exports=l},180:function(e,t,n){var r;!function(e,s){function a(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function i(e,t){var n=new a(e),r=t&&t.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,s))||(s.exports=r):this.alea=i}(0,e=n.nmd(e),n.amdD)},717:function(e,t,n){var r;!function(e,s){function a(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function i(e,t){var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,s))||(s.exports=r):this.tychei=i}(0,e=n.nmd(e),n.amdD)},181:function(e,t,n){var r;!function(e,s){function a(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function i(e,t){var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,s))||(s.exports=r):this.xor128=i}(0,e=n.nmd(e),n.amdD)},833:function(e,t,n){var r;!function(e,s){function a(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,o,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,s=0==(n=i[127&a]^=r+o)?s+1:0);for(s>=128&&(i[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=i[s+34&127],n=i[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[s]=r^n;e.w=o,e.X=i,e.i=s}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function i(e,t){null==e&&(e=+new Date);var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,s))||(s.exports=r):this.xor4096=i}(0,e=n.nmd(e),n.amdD)},67:function(e,t,n){var r;!function(e,s){function a(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function i(e,t){null==e&&(e=+new Date);var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,s))||(s.exports=r):this.xorshift7=i}(0,e=n.nmd(e),n.amdD)},31:function(e,t,n){var r;!function(e,s){function a(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function i(e,t){var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,s))||(s.exports=r):this.xorwow=i}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var r;!function(s,a,o){var i,u=256,l=o.pow(u,6),c=o.pow(2,52),p=2*c,h=u-1;function d(e,t,n){var r=[],h=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,x(a)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(u):(e=new Uint8Array(u),(s.crypto||s.msCrypto).getRandomValues(e)),x(e)}catch(e){var t=s.navigator,n=t&&t.plugins;return[+new Date,s,n,s.screen,x(a)]}}():e,3),r),d=new f(r),b=function(){for(var e=d.g(6),t=l,n=0;e<c;)e=(e+n)*u,t*=u,n=d.g(1);for(;e>=p;)e/=2,t/=2,n>>>=1;return(e+n)/t};return b.int32=function(){return 0|d.g(4)},b.quick=function(){return d.g(4)/4294967296},b.double=b,y(x(d.S),a),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,d),e.state=function(){return m(d,{})}),n?(o.random=e,t):e})(b,h,"global"in t?t.global:this==o,t.state)}function f(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,o=r.S=[];for(n||(e=[n++]);s<u;)o[s]=s++;for(s=0;s<u;s++)o[s]=o[a=h&a+e[s%n]+(t=o[s])],o[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,o=r.S;e--;)t=o[s=h&s+1],n=n*u+o[h&(o[s]=o[a=h&a+t])+(o[a]=t)];return r.i=s,r.j=a,n})(u)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(g(e[n],t-1))}catch(e){}return r.length?r:"string"==s?e:e+"\\0"}function y(e,t){for(var n,r=e+"",s=0;s<r.length;)t[h&s]=h&(n^=19*t[h&s])+r.charCodeAt(s++);return x(t)}function x(e){return String.fromCharCode.apply(0,e)}if(y(o.random(),a),e.exports){e.exports=d;try{i=n(234)}catch(e){}}else void 0===(r=function(){return d}.call(t,n,t,e))||(e.exports=r)}("undefined"!=typeof self?self:this,[],Math)},817:()=>{},590:()=>{},234:()=>{}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var r={};n.r(r),n.d(r,{CompositeArrayBuffer:()=>In,browserFiles:()=>Vr,browserHTTPRequest:()=>Yr,concatenateArrayBuffers:()=>Hn,copyModel:()=>Cr,decodeWeights:()=>Fn,decodeWeightsStream:()=>Vn,encodeWeights:()=>Mn,fromMemory:()=>es,fromMemorySync:()=>ts,getLoadHandlers:()=>nr,getModelArtifactsForJSON:()=>Xn,getModelArtifactsForJSONSync:()=>qn,getModelArtifactsInfoForJSON:()=>Yn,getSaveHandlers:()=>tr,getWeightSpecs:()=>Qn,http:()=>Xr,isHTTPScheme:()=>jr,listModels:()=>kr,loadWeights:()=>Gr,moveModel:()=>Ar,registerLoadRouter:()=>er,registerSaveRouter:()=>Jn,removeModel:()=>_r,weightsLoaderFactory:()=>Hr,withSaveHandler:()=>ns,withSaveHandlerSync:()=>rs});var s={};n.r(s),n.d(s,{assertParamsValid:()=>ls,computeFlatOffset:()=>Ts,computeOutShape:()=>ps,getNormalizedAxes:()=>ms,isSliceContinous:()=>vs,maskToAxes:()=>cs,parseSliceParams:()=>Ss,sliceInfo:()=>Es,startForAxis:()=>bs,startIndicesWithElidedDims:()=>gs,stopForAxis:()=>ws,stopIndicesWithElidedDims:()=>ys,stridesForAxis:()=>xs,stridesWithElidedDims:()=>hs});var a={};n.r(a),n.d(a,{conv2d:()=>Ju,depthwiseConv2d:()=>nl,matMul:()=>rl});var o={};n.r(o),n.d(o,{collectGatherOpShapeInfo:()=>sp,computeOutShape:()=>rp,segOpComputeOptimalWindowSize:()=>np});var i={};n.r(i),n.d(i,{ERF_A1:()=>wc,ERF_A2:()=>vc,ERF_A3:()=>Tc,ERF_A4:()=>Sc,ERF_A5:()=>Ec,ERF_P:()=>bc,PARALLELIZE_THRESHOLD:()=>ic,RowPartitionType:()=>nc,SELU_SCALE:()=>xc,SELU_SCALEALPHA:()=>yc,applyActivation:()=>Qu,assertAndGetBroadcastShape:()=>os,assertAxesAreInnerMostDims:()=>so,assertParamsConsistent:()=>ec,assignToTypedArray:()=>Cc,axesAreInnerMostDims:()=>eo,calculateShapes:()=>Iu,checkEinsumDimSizes:()=>Pc,checkPadOnDimRoundingMode:()=>ea,combineLocations:()=>to,combineRaggedTensorToTensorShapes:()=>rc,complexWithEvenIndex:()=>Ic,complexWithOddIndex:()=>kc,computeConv2DInfo:()=>zs,computeConv3DInfo:()=>Gs,computeDefaultPad:()=>Hs,computeDilation2DInfo:()=>Us,computeOptimalWindowSize:()=>uc,computeOutAndReduceShapes:()=>no,computeOutShape:()=>tc,computePool2DInfo:()=>Vs,computePool3DInfo:()=>Ws,convertConv2DDataFormat:()=>Js,decodeEinsumEquation:()=>Lc,eitherStridesOrDilationsAreOne:()=>Qs,expandShapeToKeepDim:()=>ro,exponent:()=>Rc,exponents:()=>Ac,fromStringArrayToUint8:()=>op,fromUint8ToStringArray:()=>ap,getAxesPermutation:()=>ao,getBroadcastDims:()=>ss,getComplexWithIndex:()=>_c,getEinsumComputePath:()=>Uc,getEinsumPermutation:()=>Bc,getFusedBiasGradient:()=>Yu,getFusedDyActivation:()=>Xu,getImageCenter:()=>lc,getInnerMostAxes:()=>io,getPermuted:()=>pc,getRaggedRank:()=>ac,getReductionAxes:()=>as,getReshaped:()=>cc,getReshapedPermuted:()=>hc,getRowPartitionTypesHelper:()=>sc,getSliceBeginCoords:()=>dc,getSliceSize:()=>fc,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>Gc,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Hc,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>Kc,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>Xc,getSparseReshapeInputOutputMismatchErrorMessage:()=>Qc,getSparseReshapeInputOutputMultipleErrorMessage:()=>Yc,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>jc,getSparseReshapeNegativeOutputDimErrorMessage:()=>qc,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>tp,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Zc,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>Jc,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>ep,getUndoAxesPermutation:()=>oo,isIdentityPermutation:()=>Vc,log:()=>fe,mergeRealAndImagArrays:()=>Nc,prepareAndValidate:()=>mc,prepareSplitSize:()=>zc,segment_util:()=>o,shouldFuse:()=>Zu,slice_util:()=>s,splitRealAndImagArrays:()=>$c,stridesOrDilationsArePositive:()=>Zs,tupleValuesAreOne:()=>Ys,upcastType:()=>en,validateDefaultValueShape:()=>oc,validateInput:()=>$u,validateUpdateShape:()=>Nu,warn:()=>de});var u={};n.r(u),n.d(u,{json:()=>bp});var l={};n.r(l),n.d(l,{json:()=>wp});var c={};n.r(c),n.d(c,{json:()=>vp});var p={};n.r(p),n.d(p,{json:()=>Tp});var h={};n.r(h),n.d(h,{json:()=>Sp});var d={};n.r(d),n.d(d,{json:()=>Ep});var f={};n.r(f),n.d(f,{json:()=>Np});var m={};n.r(m),n.d(m,{json:()=>$p});var g={};n.r(g),n.d(g,{json:()=>Ip});var y={};n.r(y),n.d(y,{json:()=>kp});var x={};n.r(x),n.d(x,{json:()=>_p});var b={};n.r(b),n.d(b,{json:()=>Cp});var w={};n.r(w),n.d(w,{json:()=>Ap});var v={};n.r(v),n.d(v,{json:()=>Rp});var T={};n.r(T),n.d(T,{json:()=>Op});var S={};n.r(S),n.d(S,{json:()=>Dp});var E={};n.r(E),n.d(E,{json:()=>Mp});var N={};n.r(N),n.d(N,{json:()=>Fp});var $={};n.r($),n.d($,{json:()=>Lp});var I={};n.r(I),n.d(I,{OP_SCOPE_SUFFIX:()=>vn,abs:()=>$s,acos:()=>Is,acosh:()=>ks,add:()=>_s,addN:()=>Cs,all:()=>As,any:()=>Rs,argMax:()=>Os,argMin:()=>Ds,asin:()=>Ms,asinh:()=>Fs,atan:()=>Ls,atan2:()=>Bs,atanh:()=>Ps,avgPool:()=>na,avgPool3d:()=>ra,basicLSTMCell:()=>ca,batchNorm:()=>ha,batchNorm2d:()=>da,batchNorm3d:()=>fa,batchNorm4d:()=>ma,batchToSpaceND:()=>pa,bincount:()=>ga,bitwiseAnd:()=>ya,booleanMaskAsync:()=>Bu,broadcastArgs:()=>xa,broadcastTo:()=>ba,buffer:()=>Dr,cast:()=>Mr,ceil:()=>wa,clipByValue:()=>Ta,clone:()=>Fr,complex:()=>Sn,concat:()=>sa,concat1d:()=>Sa,concat2d:()=>Ea,concat3d:()=>Na,concat4d:()=>$a,conv1d:()=>ka,conv2d:()=>Ia,conv2dTranspose:()=>Ca,conv3d:()=>Aa,conv3dTranspose:()=>Oa,cos:()=>Da,cosh:()=>Ma,cosineWindow:()=>Ku,cumprod:()=>Fa,cumsum:()=>La,denseBincount:()=>Ba,depthToSpace:()=>Pa,depthwiseConv2d:()=>Ua,diag:()=>Va,dilation2d:()=>Wa,div:()=>Ga,divNoNan:()=>qa,dot:()=>Xa,dropout:()=>Gu,einsum:()=>Ya,elu:()=>Qa,enclosingPowerOfTwo:()=>Hu,ensureShape:()=>Za,equal:()=>Ha,erf:()=>Ja,euclideanNorm:()=>xo,exp:()=>bo,expandDims:()=>wo,expm1:()=>vo,eye:()=>So,fft:()=>uu,fill:()=>va,floor:()=>Eo,floorDiv:()=>za,fused:()=>a,gather:()=>No,gatherND:()=>zu,greater:()=>$o,greaterEqual:()=>Io,ifft:()=>lu,imag:()=>ko,image:()=>ql,inTopKAsync:()=>ju,irfft:()=>cu,isFinite:()=>_o,isInf:()=>Co,isNaN:()=>Ao,leakyRelu:()=>Ro,less:()=>Oo,lessEqual:()=>Do,linalg:()=>Xl,linspace:()=>Mo,localResponseNormalization:()=>Fo,log:()=>Lo,log1p:()=>Bo,logSigmoid:()=>Wo,logSoftmax:()=>Go,logSumExp:()=>Ho,logicalAnd:()=>Ko,logicalNot:()=>jo,logicalOr:()=>qo,logicalXor:()=>Xo,losses:()=>Yl,lowerBound:()=>Zo,matMul:()=>aa,max:()=>uo,maxPool:()=>Jo,maxPool3d:()=>ei,maxPoolWithArgmax:()=>ti,maximum:()=>ni,mean:()=>ri,meshgrid:()=>oi,min:()=>lo,minimum:()=>ii,mirrorPad:()=>ui,mod:()=>li,moments:()=>ci,movingAverage:()=>Uu,mul:()=>oa,multiRNNCell:()=>pi,multinomial:()=>hi,neg:()=>Uo,norm:()=>yo,notEqual:()=>di,oneHot:()=>fi,ones:()=>ai,onesLike:()=>mi,op:()=>Tn,outerProduct:()=>gi,pad:()=>yi,pad1d:()=>xi,pad2d:()=>bi,pad3d:()=>wi,pad4d:()=>vi,pool:()=>Si,pow:()=>co,prelu:()=>Ei,print:()=>Lr,prod:()=>Ni,raggedGather:()=>$i,raggedRange:()=>Ii,raggedTensorToTensor:()=>ki,rand:()=>_i,randomGamma:()=>Di,randomNormal:()=>Mi,randomStandardNormal:()=>Fi,randomUniform:()=>Li,randomUniformInt:()=>Bi,range:()=>Pi,real:()=>Ui,reciprocal:()=>Vi,relu:()=>Wi,relu6:()=>zi,reshape:()=>ta,reverse:()=>Gi,reverse1d:()=>Hi,reverse2d:()=>Ki,reverse3d:()=>ji,reverse4d:()=>qi,rfft:()=>hu,round:()=>Xi,rsqrt:()=>Yi,scalar:()=>po,scatterND:()=>Vu,searchSorted:()=>Qo,selu:()=>Qi,separableConv2d:()=>Zi,setdiff1dAsync:()=>Ji,sigmoid:()=>ia,sign:()=>eu,signal:()=>jl,sin:()=>tu,sinh:()=>nu,slice:()=>ua,slice1d:()=>ru,slice2d:()=>su,slice3d:()=>au,slice4d:()=>ou,softmax:()=>iu,softplus:()=>Vo,spaceToBatchND:()=>Ti,sparse:()=>Ql,sparseToDense:()=>Wu,spectral:()=>Kl,split:()=>pu,sqrt:()=>ho,square:()=>fo,squaredDifference:()=>du,squeeze:()=>fu,stack:()=>mu,step:()=>gu,stridedSlice:()=>yu,string:()=>Zl,sub:()=>zo,sum:()=>mo,tan:()=>xu,tanh:()=>la,tensor:()=>Nn,tensor1d:()=>bu,tensor2d:()=>wu,tensor3d:()=>vu,tensor4d:()=>Tu,tensor5d:()=>Su,tensor6d:()=>Eu,tensorScatterUpdate:()=>ku,tile:()=>To,topk:()=>_u,transpose:()=>Pu,truncatedNormal:()=>Cu,unique:()=>Au,unsortedSegmentSum:()=>Ru,unstack:()=>Ou,upperBound:()=>Du,variable:()=>Mu,where:()=>Ka,whereAsync:()=>Lu,zeros:()=>si,zerosLike:()=>ja});var k={};let _;function C(){if(null==_){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}_=e}return _}function A(e,t){const n=function(){const e=C();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}function R(e,t,n){return Math.max(e,Math.min(t,n))}function O(e){return e%2==0?e:e+1}function D(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function M(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function F(e,t,n=""){M(P(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function L(e){M(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function B(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function P(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function U(e){return e%1==0}function V(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function W(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function z(e,t=e=>0,n,r){return new Promise(((s,a)=>{let o=0;const i=()=>{if(e())return void s();o++;const u=t(o);null!=n&&o>=n?a():null!=r?r(i,u):setTimeout(i,u)};i()}))}function G(e,t){const n=t.length;return M((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),M(e.every((e=>U(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function H(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:G(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can\'t squeeze axis ${t} since its dim \'${e[t]}\' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function K(e,t){return j(e,t)}function j(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function q(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function X(e){return"string"==typeof e||e instanceof String}function Y(e){return Array.isArray(e)?Y(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":"number"==typeof e?"float32":X(e)?"string":"boolean"==typeof e?"bool":"float32"}function Q(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Z(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function J(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function ee(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=ee(e+t*i,o,n,r)}return s}function te(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return ee(0,e,t,n)}function ne(e,t){const n=re(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function re(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function se(e){e.forEach((t=>{M(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function ae(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function oe(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function ie(e){return e&&e.then&&"function"==typeof e.then}n.r(k),n.d(k,{mx:()=>qd,XI:()=>Yd,Nk:()=>Qd,f6:()=>Zd,ct:()=>Gd,YG:()=>nf,hH:()=>rf,z3:()=>sf,sG:()=>af,uM:()=>of,vS:()=>uf,qB:()=>lf,GG:()=>cf,lg:()=>hf,rq:()=>pf,cu:()=>ff,WR:()=>df,GE:()=>mf,px:()=>gf,jC:()=>yf,He:()=>xf,hE:()=>bf,BF:()=>wf,Dk:()=>Tf,cl:()=>Sf,_B:()=>Nf,ub:()=>If,_f:()=>_f,Ku:()=>Df,qy:()=>Mf,Zy:()=>Ff,bu:()=>Lf,zv:()=>Bf,dH:()=>Pd,HS:()=>Pf,yH:()=>Uf,l3:()=>Vf,z9:()=>Wf,x6:()=>zf,_m:()=>Gf,eW:()=>Hf,GK:()=>jf,SP:()=>Xf,yr:()=>Yf,dl:()=>Qf,Dw:()=>Jf,xT:()=>nm,_X:()=>Ef,wz:()=>rm});const ue="tfjsflags";class le{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=ce,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(pe().getBool("IS_TEST")||pe().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];pe().getBool("IS_TEST")||pe().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(ie(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag \'${e}\': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);ue in e&&e[ue].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){const n=t.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:t}(0,n)}))}}function ce(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function pe(){return he}let he=null;function de(...e){pe().getBool("IS_TEST")||pe().getBool("PROD")||console.warn(...e)}function fe(...e){pe().getBool("IS_TEST")||pe().getBool("PROD")||console.log(...e)}const me=A("kernelRegistry",(()=>new Map)),ge=A("gradRegistry",(()=>new Map));function ye(e,t){const n=ve(e,t);return me.get(n)}function xe(e){return ge.get(e)}function be(e){const t=me.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function we(e){const{kernelName:t,backendName:n}=e,r=ve(t,n);me.has(r)&&de(`The kernel \'${t}\' for backend \'${n}\' is already registered`),me.set(r,e)}function ve(e,t){return`${t}_${e}`}class Te{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class Se{refCount(e){return Ee("refCount")}incRef(e){return Ee("incRef")}timerAvailable(){return!0}time(e){return Ee("time")}read(e){return Ee("read")}readSync(e){return Ee("readSync")}readToGPU(e,t){return Ee("readToGPU")}numDataIds(){return Ee("numDataIds")}disposeData(e,t){return Ee("disposeData")}write(e,t,n){return Ee("write")}move(e,t,n,r,s){return Ee("move")}createTensorFromGPUData(e,t,n){return Ee("createTensorFromGPUData")}memory(){return Ee("memory")}floatPrecision(){return Ee("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return Ee("dispose")}}function Ee(e){throw new Error(`\'${e}\' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}const Ne="Add",$e="AddN",Ie="BitwiseAnd",ke="Cast",_e="Ceil",Ce="Concat",Ae="Conv2DBackpropInput",Re="Equal",Oe="Expm1",De="Fill",Me="Floor",Fe="Greater",Le="GreaterEqual",Be="Identity",Pe="Less",Ue="LessEqual",Ve="LinSpace",We="Maximum",ze="MaxPool",Ge="Minimum",He="Multiply",Ke="NotEqual",je="Pack",qe="Range",Xe="Relu",Ye="Reshape",Qe="Rsqrt",Ze="Slice",Je="Sigmoid",et="Sqrt",tt="StaticRegexReplace",nt="StridedSlice",rt="Tile",st="Transpose",at="_FusedMatMul",ot="FusedConv2D",it="FusedDepthwiseConv2D";function ut(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}var lt=n(570);const ct=n.n(lt)()||lt;function pt(e){return ct.fromString(e,!0,16)}const ht=pt("c3a5c85c97cb3127"),dt=pt("b492b66fbe98f273"),ft=pt("9ae16a3b2f90404f");function mt(e){return e.xor(e.shru(47))}function gt(e,t,n){const r=e.slice(t,t+n);return ct.fromBytes(Array.from(r),!0,!0)}function yt(e,t){return gt(e,t,8)}function xt(e,t){return gt(e,t,4)}function bt(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function wt(e,t,n=pt("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function vt(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=bt(a.add(s).add(r),21);const o=s;return s=(s=s.add(t)).add(n),a=a.add(bt(s,44)),[s.add(r),a.add(o)]}(yt(e,t),yt(e,t+8),yt(e,t+16),yt(e,t+24),n,r)}function Tt(e,t=e.length){const n=ct.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=ft.add(2*t),r=yt(e,0).add(ft),s=yt(e,t-8);return wt(bt(s,37).mul(n).add(r),bt(r,25).add(s).mul(n),n)}if(t>=4){const n=ft.add(2*t);return wt(xt(e,0).shl(3).add(t),xt(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return mt(ft.mul(n).xor(ht.mul(r))).mul(ft)}return ft}(e,t):function(e,t=e.length){const n=ft.add(2*t),r=yt(e,0).mul(dt),s=yt(e,8),a=yt(e,t-8).mul(n),o=yt(e,t-16).mul(ft);return wt(bt(r.add(s),43).add(bt(a,30)).add(o),r.add(bt(s.add(ft),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=ft.add(2*t),r=yt(e,0).mul(ft),s=yt(e,8),a=yt(e,t-8).mul(n),o=yt(e,t-16).mul(ft),i=bt(r.add(s),43).add(bt(a,30)).add(o),u=wt(i,r.add(bt(s.add(ft),18)).add(a),n),l=yt(e,16).mul(n),c=yt(e,24),p=i.add(yt(e,t-32)).mul(n),h=u.add(yt(e,t-24)).mul(n);return wt(bt(l.add(c),43).add(bt(p,30)).add(h),l.add(bt(c.add(r),18)).add(p),n)}(e,t);let r=n,s=n.mul(dt).add(113),a=mt(s.mul(ft).add(113)).mul(ft),o=[ct.UZERO,ct.UZERO],i=[ct.UZERO,ct.UZERO];r=r.mul(ft).add(yt(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{r=bt(r.add(s).add(o[0]).add(yt(e,u+8)),37).mul(dt),s=bt(s.add(o[1]).add(yt(e,u+48)),42).mul(dt),r=r.xor(i[1]),s=s.add(o[0]).add(yt(e,u+40)),a=bt(a.add(i[0]),33).mul(dt),o=vt(e,u,o[1].mul(dt),r.add(i[0])),i=vt(e,u+32,a.add(i[1]),s.add(yt(e,u+16))),[a,r]=[r,a],u+=64}while(u!==l);const p=dt.add(a.and(255).shl(1));return u=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=bt(r.add(s).add(o[0]).add(yt(e,u+8)),37).mul(p),s=bt(s.add(o[1]).add(yt(e,u+48)),42).mul(p),r=r.xor(i[1].mul(9)),s=s.add(o[0].mul(9).add(yt(e,u+40))),a=bt(a.add(i[0]),33).mul(p),o=vt(e,u,o[1].mul(p),r.add(i[0])),i=vt(e,u+32,a.add(i[1]),s.add(yt(e,u+16))),[a,r]=[r,a],wt(wt(o[0],i[0],p).add(mt(s).mul(ht)).add(a),wt(o[1],i[1],p).add(r),p)}function St(e,t){return"string"===t?$t(e):Et([e],t)}function Et(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=_t(e)),pe().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Nt(){return pe().platform.now()}function $t(e,t="utf-8"){return t=t||"utf-8",pe().platform.encode(e,t)}function It(e,t="utf-8"){return t=t||"utf-8",pe().platform.decode(e,t)}function kt(e){return null!=pe().platform.isTypedArray?pe().platform.isTypedArray(e):ut(e)}function _t(e,t=[],n=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||ie(e)||null==e||kt(e)&&n)t.push(e);else if(Array.isArray(e)||kt(e))for(let r=0;r<e.length;++r)_t(e[r],t,n);else{let r=-1;for(const t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(r=Math.max(r,Number(t)));for(let s=0;s<=r;s++)_t(e[s],t,n)}return t}class Ct{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Rt)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const o=Nt();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:Nt()-o})}if(pe().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{At(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function At(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of \'${n}\'`),!0}return!1}class Rt{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?W(`${r}ms`,9):r.error,i=W(e,25),u=t.rank,l=t.size,c=W(t.shape.toString(),14);let p="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;p+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\\t%c${o}\\t%c${u}D ${c}\\t%c${l}\\t%c${p}\\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const Ot=20,Dt=3,Mt=7;function Ft(e,t,n,r){const s=J(t),a=function(e,t,n,r){const s=B(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,u="complex64"===n?Ut(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],Lt(u[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=Pt(e,t,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map((e=>"    "+e)).join("\\n")),u.join("\\n")}function Lt(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(Mt))} + ${parseFloat(e[1].toFixed(Mt))}j`:X(e)?`\'${e}\'`:"bool"===n?Bt(e):parseFloat(e.toFixed(Mt)).toString(),W(r,t)}function Bt(e){return 0===e?"false":"true"}function Pt(e,t,n,r,s,a=!0){const o="complex64"===n?2:1,i=t[0],u=t.length;if(0===u)return"complex64"===n?[Lt(Ut(e)[0],0,n)]:"bool"===n?[Bt(e[0])]:[e[0].toString()];if(1===u){if(i>Ot){const t=Dt*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-Dt)*o,i*o));return"complex64"===n&&(r=Ut(r),a=Ut(a)),["["+r.map(((e,t)=>Lt(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>Lt(e,s[i-Dt+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Ut(e):Array.from(e)).map(((e,t)=>Lt(e,s[t],n))).join(", ")+"]"]}const l=t.slice(1),c=r.slice(1),p=r[0]*o,h=[];if(i>Ot){for(let t=0;t<Dt;t++){const r=t*p,a=r+p;h.push(...Pt(e.slice(r,a),l,n,c,s,!1))}h.push("...");for(let t=i-Dt;t<i;t++){const r=t*p,a=r+p;h.push(...Pt(e.slice(r,a),l,n,c,s,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,a=r+p;h.push(...Pt(e.slice(r,a),l,n,c,s,t===i-1))}const d=2===u?",":"";h[0]="["+(i>0?h[0]+d:"");for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let f=",\\n";for(let e=2;e<u;e++)f+="\\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":f),h}function Ut(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Vt{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=B(e),null!=n){const e=n.length;M(e===this.size,(()=>`Length of values \'${e}\' does not match the size inferred by the shape \'${this.size}\'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||j(t,this.size),this.strides=J(e)}set(e,...t){0===t.length&&(t=[0]),M(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Wt().makeTensor(this.values,this.shape,this.dtype)}}let Wt=null,zt=null,Gt=null;class Ht{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=B(e),this.strides=J(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return zt.buffer(this.shape,this.dtype,e)}bufferSync(){return zt.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return te(this.shape,e,"complex64"===this.dtype)}arraySync(){return te(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Wt().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>It(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Wt().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Wt().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>It(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Wt().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),Wt().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return zt.print(this,e)}clone(){return this.throwIfDisposed(),zt.clone(this)}toString(e=!1){return Ft(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),zt.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Wt().makeVariable(this,e,t,n)}}function Kt(){return A("Tensor",(()=>Ht))}Object.defineProperty(Ht,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Kt();class jt extends Ht{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!P(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Wt().disposeTensor(this),this.dataId=e.dataId,Wt().incRef(this,null)}dispose(){Wt().disposeVariable(this),this.isDisposedInternal=!0}}var qt,Xt,Yt,Qt,Zt;Object.defineProperty(jt,Symbol.hasInstance,{value:e=>e instanceof Ht&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(qt||(qt={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(Xt||(Xt={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Yt||(Yt={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Qt||(Qt={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Zt||(Zt={}));const Jt={float32:Qt,int32:Xt,bool:Yt,complex64:Zt};function en(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Jt[e][t]}function tn(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function nn(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}function rn(e,t){if(e.dtype===t.dtype)return[e,t];const n=en(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function sn(e){const t=[];return an(e,t,new Set),t}function an(e,t,n){if(null==e)return;if(e instanceof Ht)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),an(r,t,n))}}function on(e){return null!=e.kernelName}class un{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class ln{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new un}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend \'${this.backendName}\' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend \'${e}\' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(de(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name \'${e}\' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Ct(this.backendInstance),!0}setupRegisteredKernels(){be(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){be(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof Se||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,de(`Initialization of backend ${e} failed`),de(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return de(`Initialization of backend ${e} failed`),de(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return ln.nextTensorId++}nextVariableId(){return ln.nextVariableId++}clone(e){const t=pn.runKernel(Be,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return pn.runKernel(ke,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==ye(e,this.backendName))throw new Error(`Kernel \'${e}\' not registered for backend \'${this.backendName}\'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend \'${this.backendName}\' has an internal memory leak (${o} data ids) after running \'${e}\'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=on(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(on(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const u=ye(t,this.backendName);M(null!=u,(()=>`Cannot find registered kernel \'${t}\' for backend \'${this.backendName}\'`)),o=()=>{const e=this.backend.numDataIds();i=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const l=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:c}=e,p=on(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(u,l,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(u,l,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map((e=>null!=l[e]?l[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const r=xe(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(M(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&X(e[0])&&(s=e.map((e=>$t(e))));const a=r.write(s,t,n),o=new Ht(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=function(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new Ht(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new jt(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*q(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof jt||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*q(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=xe(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=re(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=sn(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(M(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have \'float32\' dtype, but has \'${n.dtype}\'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));M(s instanceof Ht,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=ne(B(e),"float32");return pn.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have \'float32\' dtype, but has \'${s.dtype}\'`);const o=a.inputs[t];if(!P(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input \'${t}\' has shape \'${s.shape}\', which does not match the shape of the input \'${o.shape}\'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}(e,a,(e=>this.tidy(e)),hn);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return M(Q(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;M(t.every((e=>e instanceof Ht)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return t.forEach(((e,t)=>{r[t]=e})),this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),M(n.value instanceof Ht,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),M(Q(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];M(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),M(a.every((e=>e instanceof Ht)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Nt(),n=await this.backend.time(e);return n.wallMs=Nt()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new un;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function cn(){const e=C();if(null==e._tfengine){const t=new le(e);e._tfengine=new ln(t)}var t;return t=e._tfengine.ENV,he=t,Wt=()=>e._tfengine,e._tfengine}ln.nextTensorId=0,ln.nextVariableId=0;const pn=cn();function hn(e,t){const n={a:e,b:t};return pn.runKernel(Ne,n)}function dn(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(t.substr(0,4))}return!1}function fn(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const mn=pe();function gn(e,t){let n=e;if(kt(e))return"string"===t?[]:[e.length];if(tn(e)){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(nn(e))return[e.buffer.size/(null==t?4:q(t))];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||kt(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&pe().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&yn(e,r,[]),r}function yn(e,t,n){if(n=n||[],!Array.isArray(e)&&!kt(e))return void M(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));M(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),M(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)yn(e[t],r,n.concat(t))}function xn(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument \'${n}\' passed to \'${r}\' must be ${e} tensor, but got ${t} tensor`)}}function bn(e,t,n,r="numeric"){if(e instanceof Kt())return xn(r,e.dtype,t,n),e;let s=Y(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),xn(r,s,t,n),null==e||!kt(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument \'${t}\' passed to \'${n}\' must be a Tensor or TensorLike, but got \'${r}\'`)}const a=gn(e,s);kt(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?Et(e,s):_t(e,[],!0);return pn.makeTensor(o,a,s)}function wn(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \\`Tensor[]\\` or \\`TensorLike[]\\``);return e.map(((e,s)=>bn(e,`${t}[${s}]`,n,r)))}mn.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),mn.registerFlag("IS_BROWSER",(()=>fn())),mn.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),mn.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),mn.registerFlag("IS_SAFARI",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor))),mn.registerFlag("PROD",(()=>!1)),mn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>mn.getBool("DEBUG"))),mn.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),mn.registerFlag("IS_TEST",(()=>!1)),mn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>mn.getBool("DEBUG"))),mn.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),mn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),mn.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const vn="__op";function Tn(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=vn;const s=(...e)=>{pn.startScope(n);try{const t=r(...e);return ie(t)&&console.error("Cannot return a Promise inside of tidy."),pn.endScope(t),t}catch(e){throw pn.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Sn=Tn({complex_:function(e,t){const n=bn(e,"real","complex"),r=bn(t,"imag","complex");F(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return pn.runKernel("Complex",s)}});function En(e,t,n,r){if(null==r)r=Y(e);else if("complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(nn(e)||tn(e)){if("float32"!==r&&"int32"!==r)throw new Error(`Creating tensor from GPU data only supports \'float32\'|\'int32\' dtype, while the dtype is ${r}.`);return pn.backend.createTensorFromGPUData(e,t||n,r)}if(!kt(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){se(t);const e=B(t),r=B(n);M(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==B(t.slice(e));M(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return kt(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?Et(e,r):_t(e,[],!0),pn.makeTensor(e,t,r)}function Nn(e,t,n){return En(e,t,gn(e,n),n)}const $n={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class In{static join(e){return new In(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,null==e)return;if(e instanceof Array||(e=[e]),0===(e=e.map((e=>kt(e)?e.buffer:e))).length)return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let n=0;n<e.length;n++){const r=e[n];n!==e.length-1&&r.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const s=t+r.byteLength;this.shards.push({buffer:r,start:t,end:s}),t=s}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e)return new ArrayBuffer(0);const n=this.findShardForByte(e);if(-1===n)throw new Error(`Could not find start shard for byte ${e}`);const r=new ArrayBuffer(t-e),s=new Uint8Array(r);let a=0;for(let r=n;r<this.shards.length;r++){const n=this.shards[r],o=e+a-n.start,i=a,u=Math.min(t,n.end)-n.start,l=new Uint8Array(n.buffer,o,u-o);if(s.set(l,i),a+=l.length,t<n.end)break}return r}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:e>=t.end?1:0}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(e,t){let n=0,r=e.length;for(;n<=r;){const s=Math.floor((r-n)/2)+n,a=t(e[s]);if(0===a)return s;a<0?r=s:n=s+1}return-1}(this.shards,t);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}function kn(){return pn}function _n(e,t){return pn.tidy(e,t)}function Cn(e){sn(e).forEach((e=>e.dispose()))}function An(e){return pn.keep(e)}function Rn(){return pn.backendName}function On(){return pn.backend}Gt=function(e){pe().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const Dn=4;async function Mn(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight \'${o}\': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+Dn*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=Dn,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:Wn(await Promise.all(r)),specs:n}}function Fn(e,t){const n=new In(e),r={};let s=0;for(const e of t){const t=Ln(e,((e,t)=>n.slice(s+e,s+t)));r[e.name]=Pn(e,n.slice(s,s+t)),s+=t}return r}function Ln(e,t){const n=B(e.shape);let r;if("quantization"in e){const t=e.quantization;r=$n[t.dtype]}else{if("string"===e.dtype){let e=0;for(let r=0;r<n;r++)e+=Dn+new Uint32Array(t(e,e+Dn))[0];return e}r=$n[e.dtype]}return n*r}async function Bn(e,t){const n=B(e.shape);let r;if("quantization"in e){const t=e.quantization;r=$n[t.dtype]}else{if("string"===e.dtype){let e=0;for(let r=0;r<n;r++)e+=Dn+new Uint32Array(await t(e,e+Dn))[0];return e}r=$n[e.dtype]}return n*r}function Pn(e,t){const n=e.name,r=e.dtype,s=e.shape,a=B(s);let o,i=0;if("quantization"in e){const s=e.quantization;if("uint8"===s.dtype||"uint16"===s.dtype){if(!("min"in s)||!("scale"in s))throw new Error(`Weight ${e.name} with quantization ${s.dtype} doesn\'t have corresponding metadata min and scale.`)}else{if("float16"!==s.dtype)throw new Error(`Weight ${e.name} has unknown quantization dtype ${s.dtype}. Supported quantization dtypes are: \'uint8\', \'uint16\', and \'float16\'.`);if("float32"!==r)throw new Error(`Weight ${e.name} is quantized with ${s.dtype} which only supports weights of type float32 not ${r}.`)}const u=$n[s.dtype],l="uint8"===s.dtype?new Uint8Array(t):new Uint16Array(t);if("float32"===r)if("uint8"===s.dtype||"uint16"===s.dtype){o=new Float32Array(l.length);for(let e=0;e<l.length;e++){const t=l[e];o[e]=t*s.scale+s.min}}else{if("float16"!==s.dtype)throw new Error(`Unsupported quantization type ${s.dtype} for weight type float32.`);{const e=function(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;!(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}();o=e(l)}}else{if("int32"!==r)throw new Error(`Unsupported dtype in weight \'${n}\': ${r}`);if("uint8"!==s.dtype&&"uint16"!==s.dtype)throw new Error(`Unsupported quantization type ${s.dtype} for weight type int32.`);o=new Int32Array(l.length);for(let e=0;e<l.length;e++){const t=l[e];o[e]=Math.round(t*s.scale+s.min)}}i+=a*u}else if("string"===r){const n=B(e.shape);o=[];for(let e=0;e<n;e++){const e=new Uint32Array(t.slice(i,i+Dn))[0];i+=Dn;const n=new Uint8Array(t.slice(i,i+e));o.push(n),i+=e}}else{const e=$n[r];if("float32"===r)o=new Float32Array(t);else if("int32"===r)o=new Int32Array(t);else{if("bool"!==r){if("complex64"===r){o=new Float32Array(t);const e=new Float32Array(o.length/2),n=new Float32Array(o.length/2);for(let t=0;t<e.length;t++)e[t]=o[2*t],n[t]=o[2*t+1];const r=Nn(e,s,"float32"),a=Nn(n,s,"float32"),i=Sn(r,a);return r.dispose(),a.dispose(),i}throw new Error(`Unsupported dtype in weight \'${n}\': ${r}`)}o=new Uint8Array(t)}i+=a*e}return Nn(o,s,r)}async function Un(e,t,n){let r=new Uint8Array(t);for(;r.byteLength<n;){const{done:t,value:s}=await e.read();if(t&&null==s){const e=n-r.byteLength;throw new Error(`Reader is done but ${e} bytes are still expected`)}const a=new Uint8Array(r.length+s.byteLength);a.set(r,0),a.set(new Uint8Array(s),r.length),r=a}return r.buffer}async function Vn(e,t){const n={},r=e.getReader();let s=new ArrayBuffer(0);for(const e of t){const t=await Bn(e,(async(e,t)=>(s=await Un(r,s,t),s.slice(e,t))));s=await Un(r,s,t);const a=s.slice(0,t);s=s.slice(t);const o=Pn(e,a);if(n[e.name]=o,"webgpu"===Rn()){const e=On();"uploadToGPU"in e&&B(o.shape)>=pe().get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD")&&e.uploadToGPU(o.dataId)}}return n}function Wn(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const zn="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Gn(e){return zn?Buffer.byteLength(e,"utf8"):new Blob([e]).size}function Hn(e){return In.join(e)}function Kn(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function jn(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function qn(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(r.initializerSignature=e.initializerSignature),r}async function Xn(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),qn(e,n,r)}function Yn(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Gn(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Gn(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:new In(e.weightData).byteLength}}function Qn(e){const t=[];for(const n of e)t.push(...n.weights);return t}class Zn{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Zn.instance&&(Zn.instance=new Zn),Zn.instance}static registerSaveRouter(e){Zn.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Zn.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Zn.getHandlers(e,"save")}static getLoadHandlers(e,t){return Zn.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Zn.getInstance().loadRouters:Zn.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const Jn=e=>Zn.registerSaveRouter(e),er=e=>Zn.registerLoadRouter(e),tr=e=>Zn.getSaveHandlers(e),nr=(e,t)=>Zn.getLoadHandlers(e,t),rr="tensorflowjs",sr="models_store",ar="model_info_store";function or(){if(!pe().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function ir(e){const t=e.result;t.createObjectStore(sr,{keyPath:"modelPath"}),t.createObjectStore(ar,{keyPath:"modelPath"})}class ur{constructor(e){if(this.indexedDB=or(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(rr,1);r.onupgradeneeded=()=>ir(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(sr,"readonly"),r=t.objectStore(sr).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path \'${this.modelPath}\' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{t.weightData=In.join(t.weightData);const r=Yn(t),a=s.transaction(ar,"readwrite");let o,i,u=a.objectStore(ar);try{o=u.put({modelPath:this.modelPath,modelArtifactsInfo:r})}catch(e){return n(e)}o.onsuccess=()=>{i=s.transaction(sr,"readwrite");const o=i.objectStore(sr);let l;try{l=o.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r})}catch(e){return n(e)}l.onsuccess=()=>e({modelArtifactsInfo:r}),l.onerror=e=>{u=a.objectStore(ar);const t=u.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(l.error)),t.onerror=e=>(s.close(),n(l.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==i?s.close():i.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}ur.URL_SCHEME="indexeddb://";const lr=e=>{return pe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ur.URL_SCHEME)?(t=e.slice(ur.URL_SCHEME.length),new ur(t)):null;var t};Zn.registerSaveRouter(lr),Zn.registerLoadRouter(lr);class cr{constructor(){this.indexedDB=or()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(rr,1);n.onupgradeneeded=()=>ir(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(ar,"readonly"),a=s.objectStore(ar).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(ur.URL_SCHEME)?t.slice(ur.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(rr,1);r.onupgradeneeded=()=>ir(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(ar,"readwrite"),o=a.objectStore(ar),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path \'${e}\' in IndexedDB.`));{const r=o.delete(e),a=()=>{u=s.transaction(sr,"readwrite");const r=u.objectStore(sr).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const pr="/",hr="tensorflowjs_models",dr="info",fr="model_topology",mr="weight_specs",gr="weight_data",yr="model_metadata";function xr(e){return{info:[hr,e,dr].join(pr),topology:[hr,e,fr].join(pr),weightSpecs:[hr,e,mr].join(pr),weightData:[hr,e,gr].join(pr),modelMetadata:[hr,e,yr].join(pr)}}function br(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function wr(e){const t=e.split(pr);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(pr)}class vr{constructor(e){if(!pe().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=xr(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Yn(e),s=In.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(zn)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(s));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:r}}catch(e){throw br(this.keys),new Error(`Failed to save model \'${this.modelPath}\' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name \'${this.modelPath}\'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model \'${this.modelPath}\' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model \'${this.modelPath}\' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model \'${this.modelPath}\' are missing.`);return t.weightData=function(e){if(zn){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}vr.URL_SCHEME="localstorage://";const Tr=e=>{return pe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(vr.URL_SCHEME)?(t=e.slice(vr.URL_SCHEME.length),new vr(t)):null;var t};Zn.registerSaveRouter(Tr),Zn.registerLoadRouter(Tr);class Sr{constructor(){M(pe().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),M("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=hr+pr,n=pr+dr;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);s.startsWith(t)&&s.endsWith(n)&&(e[wr(s)]=JSON.parse(this.LS.getItem(s)))}return e}async removeModel(e){var t;const n=xr(e=(t=e).startsWith(vr.URL_SCHEME)?t.slice(vr.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path \'${e}\'`);const r=JSON.parse(this.LS.getItem(n.info));return br(n),r}}const Er="://";class Nr{constructor(){this.managers={}}static getInstance(){return null==Nr.instance&&(Nr.instance=new Nr),Nr.instance}static registerManager(e,t){M(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(Er)&&(e=e.slice(0,e.indexOf(Er))),M(e.length>0,(()=>"scheme must not be an empty string."));const n=Nr.getInstance();M(null==n.managers[e],(()=>`A model store manager is already registered for scheme \'${e}\'.`)),n.managers[e]=t}static getManager(e){const t=Nr.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme \'${e}\'`);return t}static getSchemes(){return Object.keys(Nr.getInstance().managers)}}function $r(e){if(-1===e.indexOf(Er))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Nr.getSchemes().join(",")}`);return{scheme:e.split(Er)[0],path:e.split(Er)[1]}}async function Ir(e,t,n=!1){M(e!==t,(()=>`Old path and new path are the same: \'${e}\'`));const r=Zn.getLoadHandlers(e);M(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),M(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=Zn.getSaveHandlers(t);M(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),M(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=$r(e).scheme,u=$r(e).path,l=i===$r(e).scheme,c=await s.load();n&&l&&await Nr.getManager(i).removeModel(u);const p=await o.save(c);return n&&!l&&await Nr.getManager(i).removeModel(u),p.modelArtifactsInfo}async function kr(){const e=Nr.getSchemes(),t={};for(const n of e){const e=await Nr.getManager(n).listModels();for(const r in e)t[n+Er+r]=e[r]}return t}async function _r(e){const t=$r(e);return Nr.getManager(t.scheme).removeModel(t.path)}async function Cr(e,t){return Ir(e,t,!1)}async function Ar(e,t){return Ir(e,t,!0)}class Rr{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser\'s encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&pe().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))}),!0))):setTimeout(e,t)}isTypedArray(e){return ut(e)}}if(pe().get("IS_BROWSER")){pe().setPlatform("browser",new Rr);try{Nr.registerManager(vr.URL_SCHEME,new Sr)}catch(e){}try{Nr.registerManager(ur.URL_SCHEME,new cr)}catch(e){}}let Or;function Dr(e,t="float32",n){return t=t||"float32",se(e),new Vt(e,t,n)}pe().get("IS_NODE")&&!pe().get("IS_BROWSER")&&pe().setPlatform("node",new class{constructor(){this.util=n(590),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=pe().global.fetch?pe().global.fetch(e,t):(null==Or&&(Or=n(817)),Or(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}});const Mr=Tn({cast_:function(e,t){const n=bn(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return pn.runKernel(ke,r,s)}}),Fr=Tn({clone_:function(e){const t={x:bn(e,"x","clone","string_or_numeric")};return pn.runKernel(Be,t)}});function Lr(e,t=!1){console.log(e.toString(t))}function Br(e){return new Promise((e=>setTimeout(e))).then(e)}cn(),zt={buffer:Dr,cast:Mr,clone:Fr,print:Lr};class Pr{constructor(e){if(!pe().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Pr.URL_SCHEME)&&(e=e.slice(Pr.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=In.join(e.weightData),n=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const t=jn(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(t)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await Br((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=n,await Br((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Yn(e)}}}}Pr.URL_SCHEME="downloads://";class Ur{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=Xn(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file \'${this.jsonFile.name}\'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,e]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path \'${e}\'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>Kn(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=Kn(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: \'${s}\'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename \'${s}\' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function Vr(e){return new Ur(e)}function Wr(e,t,n,r){!function(e){M(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){M(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),M(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),M(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++s/e.length*(r-n);return t(o),a})),a))))}async function zr(e,t){null==t&&(t={});const n=null==t.fetchFunc?pe().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await Wr(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await Wr(s,t.onProgress,.5,1)}async function Gr(e,t="",n,r){return Hr((e=>zr(e,{requestInit:r})))(e,t,n)}function Hr(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=$n[u]*B(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \\nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),p={};let h=0;return u.forEach((e=>{const n=t[e].paths.length,r=new In(c.slice(h,h+n));a[e].forEach((e=>{const t=Fn(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}Zn.registerSaveRouter((e=>pe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Pr.URL_SCHEME)?function(e="model"){return new Pr(e)}(e.slice(Pr.URL_SCHEME.length)):null));class Kr{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(M("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=pe().platform.fetch,M(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&M(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{},this.loadOptions=t}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=jn(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData){const n=In.join(e.weightData);t.body.append("model.weights.bin",new Blob([n],{type:"application/octet-stream"}),"model.weights.bin")}const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Yn(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async loadModelJSON(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the \'pb2json\'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return t}async load(){return this.loadOptions.streamWeights?this.loadStream():Xn(await this.loadModelJSON(),(e=>this.loadWeights(e)))}async loadStream(){const e=await this.loadModelJSON(),t=await this.getWeightUrls(e.weightsManifest),n=Qn(e.weightsManifest);return Object.assign(Object.assign({},e),{weightSpecs:n,getWeightStream:()=>function(e,t){var n;const r=null==t.fetchFunc?pe().platform.fetch:t.fetchFunc;let s,a=0;return null===(n=t.onProgress)||void 0===n||n.call(t,0),new ReadableStream({pull:async n=>{for(var o;a<e.length;){if(!s){const n=(await r(e[a],t.requestInit,{isBinary:!0})).body;s=n.getReader()}const{done:i,value:u}=await s.read();if(!i)return void n.enqueue(u);a++,s=void 0,null===(o=t.onProgress)||void 0===o||o.call(t,a/e.length)}n.close()}})}(t,this.loadOptions)})}async getWeightUrls(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),s=this.weightPathPrefix||n,a=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):a.push(s+e+r);return this.weightUrlConverter&&a.push(...await Promise.all(o)),a}async loadWeights(e){const t=await this.getWeightUrls(e);return[Qn(e),await zr(t,this.loadOptions)]}}function jr(e){return null!=e.match(Kr.URL_SCHEME_REGEX)}Kr.URL_SCHEME_REGEX=/^https?:\\/\\//;const qr=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>jr(e))):jr(e),n)return Xr(e,t)}return null};function Xr(e,t){return new Kr(e,t)}function Yr(e,t){return Xr(e,t)}Zn.registerSaveRouter(qr),Zn.registerLoadRouter(qr);class Qr{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Zr{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Jr{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function es(e,t,n,r){return new Jr(ts(...arguments))}function ts(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new Qr(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Qr({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Qr({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))}function ns(e){return new Zr(e)}function rs(e){return new Zr(e)}function ss(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,o=e[a]||1;(t[t.length-1-s]||1)>1&&1===o&&r.unshift(a)}return r}function as(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}function os(e,t){const n=Math.max(e.length,t.length),r=new Array(n);for(let s=0;s<n;s++){let a=e[e.length-s-1];null==a&&(a=1);let o=t[t.length-s-1];if(null==o&&(o=1),1===a)r[n-s-1]=o;else if(1===o)r[n-s-1]=a;else{if(a!==o)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);r[n-s-1]=a}}return r}const is=-2,us=-1;function ls(e,t,n){const r=e.shape.length;M(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),M(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)M(t[s]+n[s]<=e.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`))}function cs(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function ps(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function hs(e,t,n,r){const s=[...e];for(let e=s.length;e<r.length;e++)s.push(1);for(let e=0;e<n;e++)0===e?s[t]=1:(s.splice(t,0,1),s.pop());return s}function ds(e,t,n){return n<=e?n:n-(t-1)}function fs(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function ms(e,t,n,r,s,a,o,i,u){const l=e.length;let c=new Array(l),p=new Array(l),h=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=gs(o,u,l,r,e),p=ys(i,u,l,s,e),h=hs(a,u,l,e)}else for(let t=0;t<l;t++)c[t]=bs(o,r,a,e,t,u),p[t]=ws(i,s,a,e,t,u),h[t]=xs(a,t,u);return{begin:c,end:p,strides:h}}function gs(e,t,n,r,s){const a=[...s],o=fs(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=0;else{const o=ds(t,n,s);let i=r[o];e&1<<o&&(i=0),a[s]=i}return a}function ys(e,t,n,r,s){const a=[...s],o=fs(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const o=ds(t,n,s);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),a[s]=i}for(let e=0;e<a.length;e++){const t=s[e];a[e]<0&&(a[e]+=t),a[e]=R(0,a[e],s[e])}return a}function xs(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function bs(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[s];return o<0&&(o+=u),o=R(0,o,u-1),o}function ws(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return o<0&&(o+=u),o=i>0?R(0,o,u):R(-1,o,u-1),o}function vs(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function Ts(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function Ss(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach((e=>{M(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(M(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,a]}function Es(e,t,n,r,s,a,o,i,u){let l;if(null==r?(l=new Array(t.length),l.fill(1)):l=r,null!=o&&o&o-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const p={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:l.slice(),beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};for(let e=0;e<p.dims;e++)c&&1<<e&i&&p.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);const h={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const s=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<s;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(is),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(us),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(p,h);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===h.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(h.shrinkAxisMask&1<<t),r=e[t];if(-1===r){g.push(n?1:-1);continue}const s=[h.beginMask&1<<t,h.endMask&1<<t],a=[h.strides[t]>0?0:-1,h.strides[t]>0?r:r-1];if(n&&h.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===h.strides[t];const o=!!(h.beginMask&1<<t&&h.endMask&1<<t);if(h.beginValid&&h.endValid){if(n){const e=h.begin[t]<0?r+h.begin[t]:h.begin[t];if(h.begin[t]=e,h.end[t]=h.begin[t]+1,e<0||e>=r)throw Error(`slice index ${h.begin[t]} of dimension ${t} out of bounds.`)}else h.begin[t]=Ns(h.begin[t],0,h.strides[t],r,s,a),h.end[t]=Ns(h.end[t],1,h.strides[t],r,s,a);const e=1===h.strides[t]&&0===h.begin[t]&&h.end[t]===r;d=d&&e,f=f&&(0===t&&1===h.strides[t]||e)}else d=d&&1===h.strides[t]&&o,f=f&&(0===t&&1===h.strides[t]||o);let i,u=!1;if(h.beginValid&&h.endValid?(i=h.end[t]-h.begin[t],u=!0):n?(i=1,u=!0):o&&r>=0&&(i=h.strides[t]<0?-r:r,u=!0),u){let e;e=0===i||i<0!=h.strides[t]<0?0:Math.trunc(i/h.strides[t])+(i%h.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<h.finalShapeGatherIndices.length;++e){const t=h.finalShapeGatherIndices[e];t>=0?y.push(g[t]):t===is&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>h.finalShapeGatherIndices[t]!==is)),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:h.begin,end:h.end,strides:h.strides}}function Ns(e,t,n,r,s,a){if(s[t])return n>0?a[t]:a[t+1&1];{const t=e<0?r+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}const $s=Tn({abs_:function(e){const t=bn(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return pn.runKernel("ComplexAbs",e)}{const e={x:t};return pn.runKernel("Abs",e)}}}),Is=Tn({acos_:function(e){const t={x:bn(e,"x","acos")};return pn.runKernel("Acos",t)}}),ks=Tn({acosh_:function(e){const t={x:bn(e,"x","acosh")};return pn.runKernel("Acosh",t)}}),_s=Tn({add_:function(e,t){let n=bn(e,"a","add"),r=bn(t,"b","add");[n,r]=rn(n,r);const s={a:n,b:r};return pn.runKernel(Ne,s)}}),Cs=Tn({addN_:function(e){M(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),M(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>bn(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!P(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return pn.runKernel($e,r)}}),As=Tn({all_:function(e,t=null,n=!1){const r={x:bn(e,"x","all","bool")},s={axis:t,keepDims:n};return pn.runKernel("All",r,s)}}),Rs=Tn({any_:function(e,t=null,n=!1){const r={x:bn(e,"x","any","bool")},s={axis:t,keepDims:n};return pn.runKernel("Any",r,s)}}),Os=Tn({argMax_:function(e,t=0){const n={x:bn(e,"x","argMax")},r={axis:t};return pn.runKernel("ArgMax",n,r)}}),Ds=Tn({argMin_:function(e,t=0){const n={x:bn(e,"x","argMin")},r={axis:t};return pn.runKernel("ArgMin",n,r)}}),Ms=Tn({asin_:function(e){const t={x:bn(e,"x","asin")};return pn.runKernel("Asin",t)}}),Fs=Tn({asinh_:function(e){const t={x:bn(e,"x","asinh")};return pn.runKernel("Asinh",t)}}),Ls=Tn({atan_:function(e){const t={x:bn(e,"x","atan")};return pn.runKernel("Atan",t)}}),Bs=Tn({atan2_:function(e,t){let n=bn(e,"a","atan2"),r=bn(t,"b","atan2");[n,r]=rn(n,r);const s={a:n,b:r};return pn.runKernel("Atan2",s)}}),Ps=Tn({atanh_:function(e){const t={x:bn(e,"x","atanh")};return pn.runKernel("Atanh",t)}});function Us(e,t,n,r,s="NHWC",a){return zs(e,[...t,e[3]],n,a,r,null,null,Js(s))}function Vs(e,t,n,r,s,a,o="channelsLast"){const[i,u]=Ks(t);let l;if("channelsLast"===o)l=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);l=[i,u,e[1],e[1]]}return zs(e,l,n,r,s,a,!1,o)}function Ws(e,t,n,r,s,a,o="NDHWC"){const[i,u,l]=js(t);let c,p;if("NDHWC"===o)p="channelsLast",c=[i,u,l,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);p="channelsFirst",c=[i,u,l,e[1],e[1]]}return Gs(e,c,n,r,s,!1,p,a)}function zs(e,t,n,r,s,a,o=!1,i="channelsLast"){let[u,l,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,p,l,c]=e}const[h,d,,f]=t,[m,g]=Ks(n),[y,x]=Ks(r),b=qs(h,y),w=qs(d,x),{padInfo:v,outHeight:T,outWidth:S}=function(e,t,n,r,s,a,o,i,u){let l,c,p;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=Hs(e,t,n));const a=e[1];return[Xs((e[0]-t+2*r)/n+1,s),Xs((a-t+2*r)/n+1,s)]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),u=Math.floor(e/2),h=e-u,d=Math.floor(i/2);l={top:u,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===u?e[1][0]:e[2][0],d="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:h,bottom:d,left:f,right:m,type:0===h&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Xs((t-a+h+d)/r+1,i),p=Xs((n-o+f+m)/s+1,i)}}return{padInfo:l,outHeight:c,outWidth:p}}(s,l,c,m,g,b,w,a,i),E=o?f*p:f;let N;return"channelsFirst"===i?N=[u,E,T,S]:"channelsLast"===i&&(N=[u,T,S,E]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:c,inChannels:p,outHeight:T,outWidth:S,outChannels:E,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:h,filterWidth:d,effectiveFilterHeight:b,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:x,inShape:e,outShape:N,filterShape:t}}function Gs(e,t,n,r,s,a=!1,o="channelsLast",i){let[u,l,c,p,h]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,p,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,h,l,c,p]=e}const[d,f,m,,g]=t,[y,x,b]=js(n),[w,v,T]=js(r),S=qs(d,w),E=qs(f,v),N=qs(m,T),{padInfo:$,outDepth:I,outHeight:k,outWidth:_}=function(e,t,n,r,s,a,o,i,u,l,c){let p,h,d,f;if("valid"===e&&(e=0),"number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const m=function(e,t,n,r,s,a){null==s&&(s=Hs(e,t[0],r[0]));const o=[0,0,0,1];for(let n=0;n<3;n++)e[n]+2*s>=t[n]&&(o[n]=Xs((e[n]-t[n]+2*s)/r[n]+1,a));return o}([t,n,r,1],[i,u,l],0,[s,a,o],e,c);h=m[0],d=m[1],f=m[2]}else{if("same"!==e)throw Error(`Unknown padding parameter: ${e}`);{h=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/o);const e=(h-1)*s+i-t,c=(d-1)*a+u-n,m=(f-1)*o+l-r,g=Math.floor(e/2),y=e-g,x=Math.floor(c/2),b=c-x,w=Math.floor(m/2);p={top:x,bottom:b,left:w,right:m-w,front:g,back:y,type:"SAME"}}}return{padInfo:p,outDepth:h,outHeight:d,outWidth:f}}(s,l,c,p,y,x,b,S,E,N,i),C=a?g*h:g;let A;return"channelsFirst"===o?A=[u,C,I,k,_]:"channelsLast"===o&&(A=[u,I,k,_,C]),{batchSize:u,dataFormat:o,inDepth:l,inHeight:c,inWidth:p,inChannels:h,outDepth:I,outHeight:k,outWidth:_,outChannels:C,padInfo:$,strideDepth:y,strideHeight:x,strideWidth:b,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:S,effectiveFilterHeight:E,effectiveFilterWidth:N,dilationDepth:w,dilationHeight:v,dilationWidth:T,inShape:e,outShape:A,filterShape:t}}function Hs(e,t,n,r=1){const s=qs(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function Ks(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function js(e){return"number"==typeof e?[e,e,e]:e}function qs(e,t){return t<=1?e:e+(e-1)*(t-1)}function Xs(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Ys(e){const[t,n,r]=Ks(e);return 1===t&&1===n&&1===r}function Qs(e,t){return Ys(e)||Ys(t)}function Zs(e){return Ks(e).every((e=>e>0))}function Js(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function ea(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)M(U(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{M(U(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const ta=Tn({reshape_:function(e,t){const n={x:bn(e,"x","reshape","string_or_numeric")},r={shape:t};return pn.runKernel(Ye,n,r)}}),na=Tn({avgPool_:function(e,t,n,r,s){const a=bn(e,"x","avgPool","float32");M(Qs(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations \'1\'`));let o=a,i=!1;3===a.rank&&(i=!0,o=ta(a,[1,a.shape[0],a.shape[1],a.shape[2]])),M(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),ea("avgPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=pn.runKernel("AvgPool",u,l);return c=Mr(c,a.dtype),i?ta(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),ra=Tn({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const o=bn(e,"x","avgPool3d","float32");let i=o,u=!1;4===o.rank&&(u=!0,i=ta(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),M(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),M("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),M("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,(()=>`Error in avgPool3d: Stride must be > 0, but got \'${n}\'`)),ea("avgPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let p=pn.runKernel("AvgPool3D",l,c);return p=Mr(p,i.dtype),u?ta(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),sa=Tn({concat_:function(e,t=0){M(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=wn(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\\n          with dtype ${e.dtype}. `)})),1===n.length)return Fr(n[0]);const r=n,s={axis:t};return pn.runKernel(Ce,r,s)}}),aa=Tn({matMul_:function(e,t,n=!1,r=!1){let s=bn(e,"a","matMul"),a=bn(t,"b","matMul");[s,a]=rn(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return pn.runKernel("BatchMatMul",o,i)}}),oa=Tn({mul_:function(e,t){let n=bn(e,"a","mul"),r=bn(t,"b","mul");[n,r]=rn(n,r);const s={a:n,b:r};return pn.runKernel(He,s)}}),ia=Tn({sigmoid_:function(e){const t={x:bn(e,"x","sigmoid","float32")};return pn.runKernel(Je,t)}}),ua=Tn({slice_:function(e,t,n){const r=bn(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return pn.runKernel(Ze,s,a)}}),la=Tn({tanh_:function(e){const t={x:bn(e,"x","tanh","float32")};return pn.runKernel("Tanh",t)}}),ca=Tn({basicLSTMCell_:function(e,t,n,r,s,a){const o=bn(e,"forgetBias","basicLSTMCell"),i=bn(t,"lstmKernel","basicLSTMCell"),u=bn(n,"lstmBias","basicLSTMCell"),l=bn(r,"data","basicLSTMCell"),c=bn(s,"c","basicLSTMCell"),p=bn(a,"h","basicLSTMCell"),h=sa([l,p],1),d=aa(h,i),f=_s(d,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],x=ua(f,[0,0],y),b=ua(f,[0,g],y),w=ua(f,[0,2*g],y),v=ua(f,[0,3*g],y),T=_s(oa(ia(x),la(b)),oa(c,ia(_s(o,w))));return[T,oa(la(T),ia(v))]}}),pa=Tn({batchToSpaceND_:function(e,t,n){const r=bn(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));M(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),M(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),M(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},o={blockShape:t,crops:n};return pn.runKernel("BatchToSpaceND",a,o)}}),ha=Tn({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=bn(e,"x","batchNorm"),i=bn(t,"mean","batchNorm"),u=bn(n,"variance","batchNorm");let l,c;null!=s&&(l=bn(s,"scale","batchNorm")),null!=r&&(c=bn(r,"offset","batchNorm")),M(i.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),M(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),M(null==l||i.rank===l.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:function(e){let t;return t=0===e.rank||1===e.rank?ta(e,[1,1,1,e.size]):2===e.rank?ta(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?ta(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),scale:l,offset:c,mean:i,variance:u},h={varianceEpsilon:a},d=pn.runKernel("FusedBatchNorm",p,h);return ta(d,o.shape)}}),da=Tn({batchNorm2d_:function(e,t,n,r,s,a){const o=bn(e,"x","batchNorm"),i=bn(t,"mean","batchNorm"),u=bn(n,"variance","batchNorm");let l,c;return null!=s&&(l=bn(s,"scale","batchNorm")),null!=r&&(c=bn(r,"offset","batchNorm")),M(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),M(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),M(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&M(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&M(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),ha(o,i,u,c,l,a)}}),fa=Tn({batchNorm3d_:function(e,t,n,r,s,a){const o=bn(e,"x","batchNorm"),i=bn(t,"mean","batchNorm"),u=bn(n,"variance","batchNorm");let l,c;return null!=s&&(l=bn(s,"scale","batchNorm")),null!=r&&(c=bn(r,"offset","batchNorm")),M(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),M(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),M(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&M(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&M(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),ha(o,i,u,c,l,a)}}),ma=Tn({batchNorm4d_:function(e,t,n,r,s,a){const o=bn(e,"x","batchNorm"),i=bn(t,"mean","batchNorm"),u=bn(n,"variance","batchNorm");let l,c;return null!=s&&(l=bn(s,"scale","batchNorm")),null!=r&&(c=bn(r,"offset","batchNorm")),M(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),M(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),M(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&M(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&M(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),ha(o,i,u,c,l,a)}}),ga=Tn({bincount_:function(e,t,n){const r=bn(e,"x","bincount"),s=bn(t,"weights","bincount");M("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),M(n>=0,(()=>`size must be non-negative, but got ${n}.`)),M(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return pn.runKernel("Bincount",a,o)}}),ya=Tn({bitwiseAnd_:function(e,t){const n=bn(e,"x","bitwiseAnd"),r=bn(t,"y","bitwiseAnd");if(!P(n.shape,r.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${r.shape}`);if("int32"!==n.dtype||"int32"!==r.dtype)throw new Error(`BitwiseAnd: Only supports \'int32\' values in tensor, found type of x: ${n.dtype} and type of y: ${r.dtype}`);const s={a:n,b:r};return pn.runKernel(Ie,s)}}),xa=Tn({broadcastArgs_:function(e,t){const n=bn(e,"s0","broadcastArgs","int32"),r=bn(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return pn.runKernel("BroadcastArgs",s)}}),ba=Tn({broadcastTo_:function(e,t){let n=bn(e,"broadcastTo","x");const r=n.shape;if(se(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=ta(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Fr(n);const o={x:n},i={reps:a};return pn.runKernel(rt,o,i)}}),wa=Tn({ceil_:function(e){const t={x:bn(e,"x","ceil","float32")};return pn.runKernel(_e,t)}});function va(e,t,n){se(e);const r={shape:e,value:t,dtype:n=n||Y(t)};return pn.runKernel(De,{},r)}const Ta=Tn({clipByValue_:function(e,t,n){const r=bn(e,"x","clipByValue");if(M(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return va(r.shape,t,r.dtype);const s={x:r},a={clipValueMin:t,clipValueMax:n};return pn.runKernel("ClipByValue",s,a)}}),Sa=Tn({concat1d_:function(e){return sa(e,0)}}),Ea=Tn({concat2d_:function(e,t){return sa(e,t)}}),Na=Tn({concat3d_:function(e,t){return sa(e,t)}}),$a=Tn({concat4d_:function(e,t){return sa(e,t)}}),Ia=Tn({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=bn(e,"x","conv2d","float32"),u=bn(t,"filter","conv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=ta(i,[1,i.shape[0],i.shape[1],i.shape[2]])),M(4===l.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`)),M(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),ea("conv2d",r,o);const p="NHWC"===s?l.shape[3]:l.shape[1];M(p===u.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${u.shape[2]}.`)),M(Qs(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations \'${a}\'`)),M(Zs(a),(()=>"Error in conv2D: Dilated rates should be larger than 0.")),M(Zs(n),(()=>"Error in conv2D: Strides should be larger than 0."));const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=pn.runKernel("Conv2D",h,d);return c?ta(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),ka=Tn({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=bn(e,"x","conv1d"),u=bn(t,"filter","conv1d");let l=i,c=!1;2===i.rank&&(c=!0,l=ta(i,[1,i.shape[0],i.shape[1]])),M(3===l.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`)),M(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),ea("conv1d",r,o),M(l.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),M(Qs(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation \'${a}\'`)),M(Zs(a),(()=>"Error in conv1D: Dilated rates should be larger than 0.")),M(Zs(n),(()=>"Error in conv1D: Stride should be larger than 0.")),M("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=ta(u,[1,u.shape[0],u.shape[1],u.shape[2]]),h=ta(l,[l.shape[0],1,l.shape[1],l.shape[2]]),d=Ia(h,p,[1,n],r,"NHWC",[1,a],o);return ta(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),_a=Tn({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){M(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,u=t,l=!1;3===t.rank&&(l=!0,u=ta(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),M(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),M(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),M(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],p="NHWC"===a?u.shape[3]:u.shape[1];M(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),M(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),ea("conv2dDerInput",s,o);const h={dy:u,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},f=pn.runKernel(Ae,h,d);return l?ta(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Ca=Tn({conv2dTranspose_:function(e,t,n,r,s,a){const o=bn(e,"x","conv2dTranspose"),i=bn(t,"filter","conv2dTranspose");return _a(n,o,i,r,s,"NHWC",a)}}),Aa=Tn({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=bn(e,"x","conv3d"),i=bn(t,"filter","conv3d");let u=o,l=!1;4===o.rank&&(l=!0,u=ta(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),M(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),M(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),M(u.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),M(Qs(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations \'${a}\'`)),M("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`)),M(Zs(a),(()=>"Error in conv3D: Dilated rates should be larger than 0.")),M(Zs(n),(()=>"Error in conv3D: Strides should be larger than 0."));const c={x:u,filter:i},p={strides:n,pad:r,dataFormat:s,dilations:a},h=pn.runKernel("Conv3D",c,p);return l?ta(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Ra=Tn({conv3DBackpropInput_:function(e,t,n,r,s){M(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=ta(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=o.shape[4];M(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),M(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),M(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),M(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),M(l===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},p={pad:s,strides:r,inputShape:a},h=pn.runKernel("Conv3DBackpropInputV2",c,p);return i?ta(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Oa=Tn({conv3dTranspose_:function(e,t,n,r,s){const a=bn(e,"x","conv3dTranspose"),o=bn(t,"filter","conv3dTranspose");return Ra(n,a,o,r,s)}}),Da=Tn({cos_:function(e){const t={x:bn(e,"x","cos","float32")};return pn.runKernel("Cos",t)}}),Ma=Tn({cosh_:function(e){const t={x:bn(e,"x","cosh","float32")};return pn.runKernel("Cosh",t)}}),Fa=Tn({cumprod_:function(e,t=0,n=!1,r=!1){const s={x:bn(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:r};return pn.runKernel("Cumprod",s,a)}}),La=Tn({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:bn(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return pn.runKernel("Cumsum",s,a)}}),Ba=Tn({denseBincount_:function(e,t,n,r=!1){const s=bn(e,"x","denseBincount"),a=bn(t,"weights","denseBincount");M("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),M(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),M(n>=0,(()=>`size must be non-negative, but got ${n}.`)),M(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return pn.runKernel("DenseBincount",o,i)}}),Pa=Tn({depthToSpace_:function(e,t,n="NHWC"){const r=bn(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];M(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),M(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\\n    ${s} and ${t}  for depthToSpace with input shape\\n    ${r.shape}`)),M(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\\n    ${a} and ${t} for depthToSpace with input shape\\n        ${r.shape}`)),M(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},u={blockSize:t,dataFormat:n};return pn.runKernel("DepthToSpace",i,u)}}),Ua=Tn({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=bn(e,"x","depthwiseConv2d","float32"),u=bn(t,"filter","depthwiseConv2d","float32");let l=i,c=!1;3===i.rank&&(c=!0,l=ta(i,[1,i.shape[0],i.shape[1],i.shape[2]])),M(4===l.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`)),M(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`));const p="NHWC"===s?l.shape[3]:l.shape[1];M(p===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${u.shape[2]}.`)),ea("depthwiseConv2d",r,o);const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=pn.runKernel("DepthwiseConv2dNative",h,d);return c?ta(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Va=Tn({diag_:function(e){const t={x:bn(e,"x","diag")};return pn.runKernel("Diag",t)}}),Wa=Tn({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=bn(e,"x","dilation2d"),i=bn(t,"filter","dilation2d");M(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),M(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),M("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=o,l=!1;3===o.rank&&(u=ta(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=!0),M(u.shape[3]===i.shape[2],(()=>`Error in dilation2d:  input and filter must have the same depth: ${u.shape[3]} vs ${i.shape[2]}`));const c={x:u,filter:i},p={strides:n,pad:r,dilations:s},h=pn.runKernel("Dilation2D",c,p);return l?ta(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),za=Tn({floorDiv_:function(e,t){let n=bn(e,"a","floorDiv"),r=bn(t,"b","floorDiv");[n,r]=rn(n,r);const s={a:n,b:r};return pn.runKernel("FloorDiv",s)}}),Ga=Tn({div_:function(e,t){let n=bn(e,"a","div"),r=bn(t,"b","div");if([n,r]=rn(n,r),"int32"===n.dtype&&"int32"===r.dtype)return za(n,r);const s={a:n,b:r};return pn.runKernel("RealDiv",s,{})}}),Ha=Tn({equal_:function(e,t){let n=bn(e,"a","equal","string_or_numeric"),r=bn(t,"b","equal","string_or_numeric");[n,r]=rn(n,r),os(n.shape,r.shape);const s={a:n,b:r};return pn.runKernel(Re,s)}}),Ka=Tn({where_:function(e,t,n){const r=bn(t,"a","where"),s=bn(n,"b","where"),a=bn(e,"condition","where","bool"),o=os(os(a.shape,r.shape),s.shape),i={condition:ba(a,o),t:ba(r,o),e:ba(s,o)};return pn.runKernel("Select",i)}}),ja=Tn({zerosLike_:function(e){const t={x:bn(e,"x","zerosLike")};return pn.runKernel("ZerosLike",t)}}),qa=Tn({divNoNan_:function(e,t){let n=bn(e,"a","div"),r=bn(t,"b","div");[n,r]=rn(n,r);const s=Ga(n,r),a=ja(s),o=Ha(r,a);return Ka(o,a,s)}}),Xa=Tn({dot_:function(e,t){const n=bn(e,"t1","dot"),r=bn(t,"t2","dot");M(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(M(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=ta(n,[1,-1]),t=ta(r,[-1,1]),s=aa(e,t);return ta(s,[])}if(1===n.rank&&2===r.rank){const e=ta(n,[1,-1]),t=ta(r,[r.shape[0],r.shape[1]]),s=aa(e,t);return ta(s,[s.size])}if(2===n.rank&&1===r.rank){const e=ta(r,[-1,1]),t=aa(n,e);return ta(t,[t.size])}{const e=ta(r,[r.shape[0],r.shape[1]]);return aa(n,e)}}}),Ya=Tn({einsum_:function(e,...t){const n=t.map(((e,t)=>bn(e,`tensors${t}`,"einsum"))),r={equation:e};return pn.runKernel("Einsum",n,r)}}),Qa=Tn({elu_:function(e){const t={x:bn(e,"x","elu","float32")};return pn.runKernel("Elu",t)}}),Za=Tn({ensureShape_:function(e,t){const n=bn(e,"x","ensureShape","string_or_numeric");if(!function(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(null!==e[n]&&null!==t[n]&&e[n]!==t[n])return!1;return!0}(n.shape,t))throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`);return e}}),Ja=Tn({erf_:function(e){let t=bn(e,"x","erf");M("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Mr(t,"float32"));const n={x:t};return pn.runKernel("Erf",n)}});function eo(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function to(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}function no(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]}function ro(e,t){return to(e,t.map((e=>1)),t)}function so(e,t,n){M(eo(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function ao(e,t){if(eo(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function oo(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function io(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const uo=Tn({max_:function(e,t=null,n=!1){const r={x:bn(e,"x","max")},s={reductionIndices:t,keepDims:n};return pn.runKernel("Max",r,s)}}),lo=Tn({min_:function(e,t=null,n=!1){const r={x:bn(e,"x","min")},s={axis:t,keepDims:n};return pn.runKernel("Min",r,s)}}),co=Tn({pow_:function(e,t){let n=bn(e,"base","pow"),r=bn(t,"exp","pow");[n,r]=rn(n,r);const s={a:n,b:r};return pn.runKernel("Pow",s)}});function po(e,t){if((kt(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&kt(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return En(e,[],[],t)}const ho=Tn({sqrt_:function(e){const t={x:bn(e,"x","sqrt","float32")};return pn.runKernel(et,t)}}),fo=Tn({square_:function(e){const t=bn(e,"x","square");return pn.runKernel("Square",{x:t},{})}}),mo=Tn({sum_:function(e,t=null,n=!1){let r=bn(e,"x","sum");"bool"===r.dtype&&(r=Mr(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return pn.runKernel("Sum",s,a)}});function go(e,t,n=null){if(0===e.rank)return $s(e);if(1!==e.rank&&null===n)return go(ta(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return mo($s(e),n);if(t===1/0)return uo($s(e),n);if(t===-1/0)return lo($s(e),n);if("euclidean"===t||2===t)return ho(mo(co($s(e),po(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return uo(mo($s(e),n[0]),n[1]-1);if(t===1/0)return uo(mo($s(e),n[1]),n[0]);if(t===-1/0)return lo(mo($s(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return ho(mo(fo(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const yo=Tn({norm_:function(e,t="euclidean",n=null,r=!1){const s=go(e=bn(e,"x","norm"),t,n);let a=s.shape;if(r){const t=G(n,e.shape);a=ro(s.shape,t)}return ta(s,a)}}),xo=Tn({euclideanNorm_:function(e,t=null,n=!1){return yo(e,"euclidean",t,n)}}),bo=Tn({exp_:function(e){const t={x:bn(e,"x","exp")};return pn.runKernel("Exp",t)}}),wo=Tn({expandDims_:function(e,t=0){const n=bn(e,"x","expandDims","string_or_numeric");M(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return pn.runKernel("ExpandDims",r,s)}}),vo=Tn({expm1_:function(e){const t={x:bn(e,"x","expm1")};return pn.runKernel(Oe,t)}}),To=Tn({tile_:function(e,t){const n=bn(e,"x","tile","string_or_numeric");M(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return pn.runKernel(rt,r,s)}}),So=Tn({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=Dr([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=ta(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return To(wo(o,0),[n[0],1,1]);if(2===n.length)return To(wo(wo(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return To(wo(wo(wo(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),Eo=Tn({floor_:function(e){const t={x:bn(e,"x","floor","float32")};return pn.runKernel(Me,t)}}),No=Tn({gather_:function(e,t,n=0,r=0){const s={x:bn(e,"x","gather"),indices:bn(t,"indices","gather","int32")},a={axis:n,batchDims:r};return pn.runKernel("GatherV2",s,a)}}),$o=Tn({greater_:function(e,t){let n=bn(e,"a","greater","string_or_numeric"),r=bn(t,"b","greater","string_or_numeric");[n,r]=rn(n,r),os(n.shape,r.shape);const s={a:n,b:r};return pn.runKernel(Fe,s)}}),Io=Tn({greaterEqual_:function(e,t){let n=bn(e,"a","greaterEqual","string_or_numeric"),r=bn(t,"b","greaterEqual","string_or_numeric");[n,r]=rn(n,r),os(n.shape,r.shape);const s={a:n,b:r};return pn.runKernel(Le,s)}}),ko=Tn({imag_:function(e){const t={input:bn(e,"input","imag")};return pn.runKernel("Imag",t)}}),_o=Tn({isFinite_:function(e){const t={x:bn(e,"x","isFinite")};return pn.runKernel("IsFinite",t)}}),Co=Tn({isInf_:function(e){const t={x:bn(e,"x","isInf")};return pn.runKernel("IsInf",t)}}),Ao=Tn({isNaN_:function(e){const t={x:bn(e,"x","isNaN")};return pn.runKernel("IsNan",t)}}),Ro=Tn({leakyRelu_:function(e,t=.2){const n={x:bn(e,"x","leakyRelu")},r={alpha:t};return pn.runKernel("LeakyRelu",n,r)}}),Oo=Tn({less_:function(e,t){let n=bn(e,"a","less","string_or_numeric"),r=bn(t,"b","less","string_or_numeric");[n,r]=rn(n,r),os(n.shape,r.shape);const s={a:n,b:r};return pn.runKernel(Pe,s)}}),Do=Tn({lessEqual_:function(e,t){let n=bn(e,"a","lessEqual","string_or_numeric"),r=bn(t,"b","lessEqual","string_or_numeric");[n,r]=rn(n,r),os(n.shape,r.shape);const s={a:n,b:r};return pn.runKernel(Ue,s)}});function Mo(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return pn.runKernel(Ve,{},r)}const Fo=Tn({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=bn(e,"x","localResponseNormalization");M(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\\n               rank ${a.rank}.`)),M(U(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=ta(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:o},l={depthRadius:t,bias:n,alpha:r,beta:s},c=pn.runKernel("LRN",u,l);return i?ta(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Lo=Tn({log_:function(e){const t={x:bn(e,"x","log","float32")};return pn.runKernel("Log",t)}}),Bo=Tn({log1p_:function(e){const t={x:bn(e,"x","log1p")};return pn.runKernel("Log1p",t)}});function Po(e){return pn.customGrad(e)}const Uo=Tn({neg_:function(e){const t={x:bn(e,"x","neg")};return pn.runKernel("Neg",t)}}),Vo=Tn({softplus_:function(e){const t={x:bn(e,"x","softplus")};return pn.runKernel("Softplus",t)}}),Wo=Tn({logSigmoid_:function(e){const t=bn(e,"x","logSigmoid");return Po((e=>({value:Uo(Vo(Uo(e))),gradFunc:t=>oa(t,ia(Uo(e)))})))(t)}}),zo=Tn({sub_:function(e,t){let n=bn(e,"a","sub"),r=bn(t,"b","sub");[n,r]=rn(n,r);const s={a:n,b:r};return pn.runKernel("Sub",s)}}),Go=Tn({logSoftmax_:function(e,t=-1){const n=bn(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=Po(((e,n)=>{const r=uo(e,t,!0),s=zo(e,r),a=zo(Mr(s,"float32"),Lo(mo(bo(s),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[r]=n,s=bo(r);return zo(e,oa(mo(e,t,!0),s))}}}));return r(n)}}),Ho=Tn({logSumExp_:function(e,t=null,n=!1){const r=bn(e,"x","logSumExp"),s=G(t,r.shape),a=uo(r,s,!0),o=zo(r,a),i=bo(o),u=mo(i,s),l=Lo(u),c=_s(ta(a,l.shape),l);if(n){const e=ro(c.shape,s);return ta(c,e)}return c}}),Ko=Tn({logicalAnd_:function(e,t){const n=bn(e,"a","logicalAnd","bool"),r=bn(t,"b","logicalAnd","bool");os(n.shape,r.shape);const s={a:n,b:r};return pn.runKernel("LogicalAnd",s)}}),jo=Tn({logicalNot_:function(e){const t={x:bn(e,"x","logicalNot","bool")};return pn.runKernel("LogicalNot",t)}}),qo=Tn({logicalOr_:function(e,t){const n=bn(e,"a","logicalOr","bool"),r=bn(t,"b","logicalOr","bool");os(n.shape,r.shape);const s={a:n,b:r};return pn.runKernel("LogicalOr",s)}}),Xo=Tn({logicalXor_:function(e,t){const n=bn(e,"a","logicalXor","bool"),r=bn(t,"b","logicalXor","bool");return os(n.shape,r.shape),Ko(qo(e,t),jo(Ko(e,t)))}}),Yo=2147483648,Qo=Tn({searchSorted_:function(e,t,n="left"){const r=bn(e,"sortedSequence","searchSorted"),s=bn(t,"values","searchSorted"),a=r.shape[r.shape.length-1],o=s.shape[s.shape.length-1],i=ta(r,[-1,a]),u=ta(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==u.shape[0])throw new Error("Leading dimension of \'sortedSequence\' and \'values\' must match.");if(B(u.shape)>=Yo)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=Yo)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const l={sortedSequence:i,values:u},c={side:n};return pn.runKernel("SearchSorted",l,c)}});function Zo(e,t){return Qo(e,t,"left")}const Jo=Tn({maxPool_:function(e,t,n,r,s){const a=bn(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=ta(a,[1,a.shape[0],a.shape[1],a.shape[2]])),M(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),M(Qs(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations \'1\'`)),ea("maxPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=pn.runKernel(ze,u,l);return i?ta(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),ei=Tn({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const o=bn(e,"x","maxPool3d");let i=o,u=!1;4===o.rank&&(u=!0,i=ta(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),M(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),M("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),ea("maxPool3d",r,s);const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},p=pn.runKernel("MaxPool3D",l,c);return u?ta(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),ti=Tn({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:bn(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=pn.runKernel("MaxPoolWithArgmax",a,o);return{result:i[0],indexes:i[1]}}}),ni=Tn({maximum_:function(e,t){let n=bn(e,"a","maximum"),r=bn(t,"b","maximum");[n,r]=rn(n,r),"bool"===n.dtype&&(n=Mr(n,"int32"),r=Mr(r,"int32")),os(n.shape,r.shape);const s={a:n,b:r};return pn.runKernel(We,s)}}),ri=Tn({mean_:function(e,t=null,n=!1){const r={x:bn(e,"x","mean")},s={axis:t,keepDims:n};return pn.runKernel("Mean",r,s)}});function si(e,t="float32"){if(se(e),"complex64"===t){const t=si(e,"float32"),n=si(e,"float32");return Sn(t,n)}const n=re(B(e),t);return pn.makeTensor(n,e,t)}function ai(e,t="float32"){if(se(e),"complex64"===t){const t=ai(e,"float32"),n=si(e,"float32");return Sn(t,n)}const n=ne(B(e),t);return pn.makeTensor(n,e,t)}function oi(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=bn(e,"x","meshgrid",e instanceof Ht?e.dtype:"float32");if(void 0===t)return[r];let s=bn(t,"y","meshgrid",t instanceof Ht?t.dtype:"float32");const a=B(r.shape),o=B(s.shape);return"xy"===n?(r=ta(r,[1,-1]),s=ta(s,[-1,1]),[aa(ai([o,1],r.dtype),r),aa(s,ai([1,a],s.dtype))]):(r=ta(r,[-1,1]),s=ta(s,[1,-1]),[aa(r,ai([1,o],r.dtype)),aa(ai([a,1],s.dtype),s)])}const ii=Tn({minimum_:function(e,t){let n=bn(e,"a","minimum"),r=bn(t,"b","minimum");[n,r]=rn(n,r),"bool"===n.dtype&&(n=Mr(n,"int32"),r=Mr(r,"int32")),os(n.shape,r.shape);const s={a:n,b:r};return pn.runKernel(Ge,s)}}),ui=Tn({mirrorPad_:function(e,t,n){M("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=bn(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");M(t.length===r.rank,(()=>`Padding doesn\'t match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)M(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),M(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},o={x:r};return pn.runKernel("MirrorPad",o,a)}}),li=Tn({mod_:function(e,t){let n=bn(e,"a","mod"),r=bn(t,"b","mod");[n,r]=rn(n,r);const s={a:n,b:r};return pn.runKernel("Mod",s)}}),ci=Tn({moments_:function(e,t=null,n=!1){const r=G(t,(e=bn(e,"x","moments")).shape),s=ri(e,r,n);let a=s.shape;n||(a=ro(s.shape,r));const o=fo(zo(Mr(e,"float32"),ta(s,a)));return{mean:s,variance:ri(o,r,n)}}}),pi=Tn({multiRNNCell_:function(e,t,n,r){const s=bn(t,"data","multiRNNCell"),a=wn(n,"c","multiRNNCell"),o=wn(r,"h","multiRNNCell");let i=s;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}}),hi=Tn({multinomial_:function(e,t,n,r=!1){const s=bn(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?ta(s,[1,-1]):s},u={numSamples:t,seed:n,normalized:r},l=pn.runKernel("Multinomial",i,u);return 1===o?ta(l,[l.size]):l}}),di=Tn({notEqual_:function(e,t){let n=bn(e,"a","notEqual","string_or_numeric"),r=bn(t,"b","notEqual","string_or_numeric");[n,r]=rn(n,r),os(n.shape,r.shape);const s={a:n,b:r};return pn.runKernel(Ke,s)}}),fi=Tn({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:bn(e,"indices","oneHot","int32")},o={dtype:s,depth:t,onValue:n,offValue:r};return pn.runKernel("OneHot",a,o)}}),mi=Tn({onesLike_:function(e){const t={x:bn(e,"x","onesLike")};return pn.runKernel("OnesLike",t)}}),gi=Tn({outerProduct_:function(e,t){const n=bn(e,"v1","outerProduct"),r=bn(t,"v2","outerProduct");M(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=ta(n,[-1,1]),a=ta(r,[1,-1]);return aa(s,a)}}),yi=Tn({pad_:function(e,t,n=0){const r=bn(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return pn.runKernel("PadV2",a,s)}}),xi=Tn({pad1d_:function(e,t,n=0){return M(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),yi(e,[t],n)}}),bi=Tn({pad2d_:function(e,t,n=0){return M(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),yi(e,t,n)}}),wi=Tn({pad3d_:function(e,t,n=0){return M(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),yi(e,t,n)}}),vi=Tn({pad4d_:function(e,t,n=0){return M(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),yi(e,t,n)}}),Ti=Tn({spaceToBatchND_:function(e,t,n){const r=bn(e,"x","spaceToBatchND");M(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),M(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),M(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return pn.runKernel("SpaceToBatchND",s,a)}}),Si=Tn({pool_:function(e,t,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=bn(e,"x","maxPool");let u=i,l=!1;3===i.rank&&(l=!0,u=ta(i,[1,i.shape[0],i.shape[1],i.shape[2]])),M(Qs(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations \'${s}\'`));const c=Vs(u.shape,t,a,s,r),p=[c.dilationHeight,c.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const d=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t]));return[t.map(((e,t)=>[r[t],i[t]])),t.map(((e,t)=>[0,o[t]]))]}([c.inHeight,c.inWidth],p,h),g=d?r:"valid",y=d?u:Ti(u,p,f),x=("avg"===n?()=>na(y,t,a,g,o):()=>Jo(y,t,a,g,o))(),b=d?x:pa(x,p,m);return l?ta(b,[b.shape[1],b.shape[2],b.shape[3]]):b}}),Ei=Tn({prelu_:function(e,t){const n={x:bn(e,"x","prelu"),alpha:bn(t,"alpha","prelu")};return pn.runKernel("Prelu",n)}}),Ni=Tn({prod_:function(e,t=null,n=!1){let r=bn(e,"x","prod");"bool"===r.dtype&&(r=Mr(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return pn.runKernel("Prod",s,a)}}),$i=Tn({raggedGather_:function(e,t,n,r){const s={paramsNestedSplits:e.map(((e,t)=>bn(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:bn(t,"paramsDenseValues","raggedGather"),indices:bn(n,"indices","raggedGather","int32")},a={outputRaggedRank:r},o=pn.runKernel("RaggedGather",s,a);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}}),Ii=Tn({raggedRange_:function(e,t,n){const r=bn(e,"starts","raggedRange"),s={starts:r,limits:bn(t,"limits","raggedRange",r.dtype),deltas:bn(n,"deltas","raggedRange",r.dtype)},a=pn.runKernel("RaggedRange",s);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}}),ki=Tn({raggedTensorToTensor_:function(e,t,n,r,s){const a=bn(e,"shape","raggedTensorToTensor","int32"),o=bn(t,"values","raggedTensorToTensor"),i={shape:a,values:o,defaultValue:bn(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map(((e,t)=>bn(e,`tensors${t}`,"raggedTensorToTensor","int32")))},u={rowPartitionTypes:s};return pn.runKernel("RaggedTensorToTensor",i,u)}}),_i=Tn({rand_:function(e,t,n){se(e);const r=B(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return pn.makeTensor(s,e,n)}});var Ci=n(391);class Ai{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Ci.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Ri{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=Ci.alea(s.toString()),this.randn=new Ai(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Oi{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Ci.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Di=Tn({randomGamma_:function(e,t,n=1,r="float32",s){if(se(e),null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new Ri(t,n,r,s),o=Dr(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),Mi=Tn({randomNormal_:function(e,t=0,n=1,r,s){if(se(e),null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new Ai(t,n,r,!1,s),o=Dr(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),Fi=Tn({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Mi(e,0,1,t,n)}}),Li=Tn({randomUniform_:function(e,t=0,n=1,r="float32",s){se(e);const a=Dr(e,r),o=new Oi(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}}),Bi=Tn({randomUniformInt_:function(e,t,n,r){return Li(e,t,n,"int32",r)}});function Pi(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return pn.runKernel(qe,{},s)}const Ui=Tn({real_:function(e){const t={input:bn(e,"input","real")};return pn.runKernel("Real",t)}}),Vi=Tn({reciprocal_:function(e){const t={x:bn(e,"x","reciprocal")};return pn.runKernel("Reciprocal",t)}}),Wi=Tn({relu_:function(e){const t={x:bn(e,"x","relu")};return pn.runKernel(Xe,t)}}),zi=Tn({relu6_:function(e){const t={x:bn(e,"x","relu6")};return pn.runKernel("Relu6",t)}}),Gi=Tn({reverse_:function(e,t){const n={x:bn(e,"x","reverse")},r={dims:t};return pn.runKernel("Reverse",n,r)}}),Hi=Tn({reverse1d_:function(e){const t=bn(e,"x","reverse");return M(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),Gi(t,0)}}),Ki=Tn({reverse2d_:function(e,t){const n=bn(e,"x","reverse");return M(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Gi(n,t)}}),ji=Tn({reverse3d_:function(e,t){const n=bn(e,"x","reverse");return M(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Gi(n,t)}}),qi=Tn({reverse4d_:function(e,t){const n=bn(e,"x","reverse");return M(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Gi(n,t)}}),Xi=Tn({round_:function(e){const t={x:bn(e,"x","round")};return pn.runKernel("Round",t)}}),Yi=Tn({rsqrt_:function(e){const t={x:bn(e,"x","rsqrt","float32")};return pn.runKernel(Qe,t)}}),Qi=Tn({selu_:function(e){const t={x:bn(e,"x","selu")};return pn.runKernel("Selu",t)}}),Zi=Tn({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=bn(e,"x","separableConv2d"),u=bn(t,"depthwiseFilter","separableConv2d"),l=bn(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=ta(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");M(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),M(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),M(4===l.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),M(1===l.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`)),M(1===l.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`));const h=u.shape[2],d=u.shape[3];M(l.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${l.shape[2]}.`));const f=Ua(c,u,r,s,o,a),m=Ia(f,l,1,"valid",o);return p?ta(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),Ji=async function(e,t){const n=bn(e,"x","setdiff1d"),r=bn(t,"y","setdiff1d");M(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),M(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),M(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let e=0;e<s.length;e++)o.has(s[e])||i++;const u=new Vt([i],n.dtype),l=new Vt([i],"int32");for(let e=0,t=0;e<s.length;e++)o.has(s[e])||(u.values[t]=s[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]},eu=Tn({sign_:function(e){const t={x:bn(e,"x","sign")};return pn.runKernel("Sign",t)}}),tu=Tn({sin_:function(e){const t={x:bn(e,"x","sin","float32")};return pn.runKernel("Sin",t)}}),nu=Tn({sinh_:function(e){const t={x:bn(e,"x","sinh")};return pn.runKernel("Sinh",t)}}),ru=Tn({slice1d_:function(e,t,n){const r=bn(e,"x","slice1d");return M(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),ua(r,[t],[n])}}),su=Tn({slice2d_:function(e,t,n){const r=bn(e,"x","slice2d");return M(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),ua(r,t,n)}}),au=Tn({slice3d_:function(e,t,n){const r=bn(e,"x","slice3d");return M(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),ua(r,t,n)}}),ou=Tn({slice4d_:function(e,t,n){const r=bn(e,"x","slice4d");return M(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),ua(r,t,n)}}),iu=Tn({softmax_:function(e,t=-1){const n=bn(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return pn.runKernel("Softmax",r,s)}}),uu=Tn({fft_:function(e){M("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return pn.runKernel("FFT",t)}}),lu=Tn({ifft_:function(e){M("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return pn.runKernel("IFFT",t)}}),cu=Tn({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=ta(e,[n,t]);r=lu(s)}else{const s=[n,2*(t-1)],a=ta(Ui(e),[n,t]),o=ta(ko(e),[n,t]),i=Gi(ua(a,[0,1],[n,t-2]),1),u=oa(Gi(ua(o,[0,1],[n,t-2]),1),po(-1)),l=sa([a,i],1),c=sa([o,u],1),p=ta(Sn(l,c),[s[0],s[1]]);r=lu(p)}if(r=Ui(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=ta(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}}),pu=Tn({split_:function(e,t,n=0){const r={x:bn(e,"x","split")},s={numOrSizeSplits:t,axis:n};return pn.runKernel("SplitV",r,s)}}),hu=Tn({rfft_:function(e,t){M("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=ua(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=sa([e,si(r)],e.shape.length-1),n=t}else s=e;const a=ja(s),o=ta(Sn(s,a),[r,n]),i=uu(o),u=Math.floor(n/2)+1,l=Ui(i),c=ko(i),p=pu(l,[u,n-u],l.shape.length-1),h=pu(c,[u,n-u],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,ta(Sn(p[0],h[0]),d)}}),du=Tn({squaredDifference_:function(e,t){let n=bn(e,"a","squaredDifference"),r=bn(t,"b","squaredDifference");[n,r]=rn(n,r),os(n.shape,r.shape);const s={a:n,b:r};return pn.runKernel("SquaredDifference",s,{})}}),fu=Tn({squeeze_:function(e,t){const n=bn(e,"x","squeeze","string_or_numeric");return ta(n,H(n.shape,t).newShape)}}),mu=Tn({stack_:function(e,t=0){const n=wn(e,"tensors","stack","string_or_numeric");M(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&M(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return pn.runKernel(je,r,s)}}),gu=Tn({step_:function(e,t=0){const n={x:bn(e,"x","step")},r={alpha:t};return pn.runKernel("Step",n,r)}}),yu=Tn({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,u=0){const l={x:bn(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return pn.runKernel(nt,l,c)}}),xu=Tn({tan_:function(e){const t={x:bn(e,"x","tan","float32")};return pn.runKernel("Tan",t)}});function bu(e,t){L(e);const n=gn(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return En(e,null,n,t)}function wu(e,t,n){if(L(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=gn(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return En(e,t,r,n)}function vu(e,t,n){if(L(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=gn(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return En(e,t,r,n)}function Tu(e,t,n){if(L(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=gn(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return En(e,t,r,n)}function Su(e,t,n){if(L(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=gn(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return En(e,t,r,n)}function Eu(e,t,n){if(L(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=gn(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return En(e,t=t||r,r,n)}function Nu(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}function $u(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of \'indices\' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Nu(n,t,e)}function Iu(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let o=1;for(let e=s;e<a;++e)o*=n[e];const i=s<1?1:s;return{sliceRank:s,numUpdates:B(t.shape)/i,sliceSize:o,strides:[...J(n.slice(0,s)),1],outputSize:B(n)}}const ku=Tn({tensorScatterUpdate_:function(e,t,n){const r=bn(e,"tensor","tensorScatterupdate"),s=bn(t,"indices","tensorScatterupdate","int32"),a=bn(n,"updates","tensorScatterupdate");if($u(a,s,r.shape),r.dtype!==a.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${r.dtype} and ${a.dtype}.`);const o={tensor:r,indices:s,updates:a};return pn.runKernel("TensorScatterUpdate",o,{})}}),_u=Tn({topk_:function(e,t=1,n=!0){const r=bn(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`\'k\' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`\'k\' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,u]=pn.runKernel("TopK",a,o);return{values:i,indices:u}}}),Cu=Tn({truncatedNormal_:function(e,t=0,n=1,r,s){if(se(e),null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Ai(t,n,r,!0,s),o=Dr(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),Au=Tn({unique_:function(e,t=0){const n=bn(e,"x","unique","string_or_numeric");M(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,o]=pn.runKernel("Unique",r,s);return{values:a,indices:o}}}),Ru=Tn({unsortedSegmentSum_:function(e,t,n){const r=bn(e,"x","unsortedSegmentSum"),s=bn(t,"segmentIds","unsortedSegmentSum","int32");M(U(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return pn.runKernel("UnsortedSegmentSum",a,o)}}),Ou=Tn({unstack_:function(e,t=0){const n=bn(e,"x","unstack","string_or_numeric");M(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return pn.runKernel("Unpack",r,s)}});function Du(e,t){return Qo(e,t,"right")}function Mu(e,t=!0,n,r){return pn.makeVariable(e,t,n,r)}function Fu(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=Dr(e,"int32"),s=Dr([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}const Lu=async function(e){const t=bn(e,"condition","whereAsync","bool"),n=await t.data(),r=Fu(t.shape,n);return e!==t&&t.dispose(),r},Bu=async function(e,t,n){const r=bn(e,"tensor","boolMask"),s=bn(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;M(o>0,(()=>"mask cannot be scalar")),F(i.slice(a,a+o),s.shape,"mask\'s shape must match the first K dimensions of tensor\'s shape,");let u=1;for(let e=a;e<a+o;e++)u*=i[e];const l=i.slice(0,a).concat([u],i.slice(a+o)),c=ta(r,l),p=ta(s,[-1]),h=await Lu(p),d=fu(h,[1]),f=No(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),p.dispose(),h.dispose(),f},Pu=Tn({transpose_:function(e,t,n){const r=bn(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),M(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{M(e>=0&&e<r.rank,(()=>"All entries in \'perm\' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?_n((()=>{let e=Ui(r),t=ko(r);return e=pn.runKernel(st,{x:e},a),t=pn.runKernel(st,{x:t},a),n&&(t=Uo(t)),Sn(e,t)})):pn.runKernel(st,s,a)}}),Uu=Tn({movingAverage_:function(e,t,n,r,s=!0){const a=bn(e,"v","movingAverage"),o=bn(t,"x","movingAverage"),i=bn(n,"decay","movingAverage");var u,l;l=o,M((u=a).dtype===l.dtype,(()=>`The dtypes of the first(${u.dtype}) and second(${l.dtype}) input must match`)),M(P(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const c=po(1),p=zo(c,i);let h=oa(zo(o,a),p);if(s){M(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=bn(r,"step","movingAverage");h=Ga(h,zo(c,co(i,e)))}return _s(a,h)}}),Vu=Tn({scatterND_:function(e,t,n){se(n);const r=bn(e,"indices","scatterND","int32"),s=bn(t,"updates","scatterND");$u(s,r,n);const a={indices:r,updates:s},o={shape:n};return pn.runKernel("ScatterNd",a,o)}}),Wu=Tn({sparseToDense_:function(e,t,n,r=0){se(n);const s=bn(e,"sparseIndices","sparseToDense","int32"),a=bn(t,"sparseValues","sparseToDense","string_or_numeric"),o=bn(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},u={outputShape:n};return pn.runKernel("SparseToDense",i,u)}}),zu=Tn({gatherND_:function(e,t){const n=bn(t,"indices","gatherND","int32"),r={params:bn(e,"x","gatherND","string_or_numeric"),indices:n};return pn.runKernel("GatherNd",r)}}),Gu=Tn({dropout_:function(e,t,n,r){const s=bn(e,"x","dropout");if(M("float32"===s.dtype,(()=>`x has to be a floating point tensor since it\'s going to be scaled, but got a ${s.dtype} tensor instead.`)),M(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Ht?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(P(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(s,n),o=1-t,i=Ga(Eo(_s(Li(a,0,1,"float32",r),o)),o);return oa(s,i)}});function Hu(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Ku(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return bu(s,"float32")}const ju=async function(e,t,n=1){const r=bn(e,"predictions","inTopK"),s=bn(t,"targets","inTopK");M(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),M(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),F(r.shape.slice(0,r.shape.length-1),s.shape,"predictions\'s shape should be align with the targets\' shape, except the last dimension.");const a=r.shape[r.shape.length-1];M(n>0&&n<=a,(()=>`\'k\' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const o=await r.data(),i=await s.data(),[u,l]=[o.length/a,a],c=K("bool",u);for(let e=0;e<u;e++){const t=e*l,r=o.subarray(t,t+l),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),Nn(c,s.shape,"bool")},qu=Tn({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=ta(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=ta(t,[1,t.shape[0],t.shape[1],t.shape[2]])),M(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),M(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),M(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const l="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];M(l===n[2],(()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`)),M(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),ea("conv2dDerFilter",s,o);const p={x:i,dy:u},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return pn.runKernel("Conv2DBackpropFilter",p,h)}});function Xu(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return oa(e,gu(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Yu(e,t){let n=t;const r=as(e.shape,t.shape);return r.length>0&&(n=mo(n,r)),ta(n,e.shape)}function Qu(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Wi(e);if("elu"===t)return Qa(e);if("relu6"===t)return zi(e);if("prelu"===t)return Ei(e,n);if("leakyrelu"===t)return Ro(e,r);if("sigmoid"===t)return ia(e);throw new Error(`Unknown fused activation ${t}.`)}const Zu=(e,t)=>!(e>0)||"linear"===t,Ju=Tn({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(u=u||"linear",!1===Zu(pn.state.gradientDepth,u)){M("NHWC"===s,(()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let p=Ia(e,t,n,r,s,a,o);return null!=i&&(p=_s(p,i)),Qu(p,u,l,c)}const p=bn(e,"x","conv2d","float32"),h=bn(t,"filter","conv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=ta(p,[1,p.shape[0],p.shape[1],p.shape[2]])),M(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),M(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),ea("fused conv2d",r,o);const m="NHWC"===s?d.shape[3]:d.shape[1];M(h.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`)),M(Qs(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations \'${a}\'`));const g=zs(d.shape,h.shape,n,a,r,o);let y,x;if(null!=i&&(y=bn(i,"bias","fused conv2d"),[y]=rn(y,p),"NHWC"===s?os(g.outShape,y.shape):(M(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),M(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=l){const e=l.shape;if(M(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)M(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{os(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}x=bn(l,"prelu weights","fused conv2d")}const b=(e,t)=>{M("NHWC"===s,(()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`));const[o,i,l,c]=t,p=Xu(e,l,u);M(Ys(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations \'${a}\'`));const h=[_a(i.shape,p,o,n,r),qu(i,p,o.shape,n,r)];if(null!=c){const e=Yu(c,p);h.push(e)}return h},w={x:d,filter:h,bias:y,preluActivationWeights:x},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=Po(((e,t,n)=>{let r=pn.runKernel(ot,w,v);return n([t,e,r]),f&&(r=ta(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(d,h)}{const e=Po(((e,t,n,r)=>{let s=pn.runKernel(ot,w,v);return r([t,e,s,n]),f&&(s=ta(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(d,h,y)}}}),el=Tn({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],o){let i=e;3===e.rank&&(i=ta(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=ta(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:i,dy:u},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return pn.runKernel("DepthwiseConv2dNativeBackpropFilter",l,c)}}),tl=Tn({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],o){let i=t,u=!1;3===t.rank&&(u=!0,i=ta(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:i,filter:n},c={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},p=pn.runKernel("DepthwiseConv2dNativeBackpropInput",l,c);return u?ta(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),nl=Tn({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===Zu(pn.state.gradientDepth,u)){let p=Ua(e,t,n,r,s,a,o);return null!=i&&(p=_s(p,i)),Qu(p,u,l,c)}const p=bn(e,"x","depthwiseConv2d","float32"),h=bn(t,"filter","depthwiseConv2d","float32");let d=p,f=!1;3===p.rank&&(f=!0,d=ta(p,[1,p.shape[0],p.shape[1],p.shape[2]])),M(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),M(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),M(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),M(Qs(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations \'${a}\'`)),ea("fused depthwiseConv2d",r,o);const m=zs(d.shape,h.shape,n,a,r,o,!0);let g,y;null!=i&&(g=bn(i,"bias","fused conv2d"),[g]=rn(g,p),os(m.outShape,g.shape)),null!=l&&(y=bn(l,"prelu weights","fused depthwiseConv2d"));const x=(e,t)=>{M(Ys(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations \'${a}\'`));const[s,i,l,c]=t,p=Xu(e,l,u),h=tl(i.shape,p,s,n,r,a,o),d=el(i,p,s.shape,n,r,a,o);return null!=c?[h,d,Yu(g,p)]:[h,d]},b={x:d,filter:h,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:c};if(null==i){const e=Po(((e,t,n)=>{let r=pn.runKernel(it,b,w);return n([t,e,r]),f&&(r=ta(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}));return e(d,h)}{const e=Po(((e,t,n,r)=>{let s=pn.runKernel(it,b,w);return r([t,e,s,n]),f&&(s=ta(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}));return e(d,h,g)}}}),rl=Tn({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===Zu(pn.state.gradientDepth,a)){let u=aa(e,t,n,r);return null!=s&&(u=_s(u,s)),Qu(u,a,o,i)}let u=bn(e,"a","fused matMul"),l=bn(t,"b","fused matMul");[u,l]=rn(u,l);const c=n?u.shape[u.rank-2]:u.shape[u.rank-1],p=r?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=B(f),y=B(m);M(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`));const x=os(u.shape.slice(0,-2),l.shape.slice(0,-2)).concat([h,d]),b=ta(u,n?[g,c,h]:[g,h,c]),w=ta(l,r?[y,d,p]:[y,p,d]);let v,T;null!=s&&(v=bn(s,"bias","fused matMul"),[v]=rn(v,u),os(x,v.shape)),null!=o&&(T=bn(o,"prelu weights","fused matMul"));const S=(e,t)=>{const[o,i,u,l]=t,c=Xu(ta(e,u.shape),u,a);let p,h;return n||r?!n&&r?(p=aa(c,i,!1,!1),h=aa(c,o,!0,!1)):n&&!r?(p=aa(i,c,!1,!0),h=aa(o,c,!1,!1)):(p=aa(i,c,!0,!0),h=aa(c,o,!0,!0)):(p=aa(c,i,!1,!0),h=aa(o,c,!0,!1)),null!=s?[p,h,Yu(l,c)]:[p,h]},E={a:b,b:w,bias:v,preluActivationWeights:T},N={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){const e=Po(((e,t,n)=>{const r=pn.runKernel(at,E,N);return n([e,t,r]),{value:ta(r,x),gradFunc:S}}));return e(b,w)}{const e=Po(((e,t,n,r)=>{const s=pn.runKernel(at,E,N);return r([e,t,s,n]),{value:ta(s,x),gradFunc:S}}));return e(b,w,v)}}}),sl=Tn({hammingWindow_:function(e){return Ku(e,.54,.46)}}),al=Tn({hannWindow_:function(e){return Ku(e,.5,.5)}}),ol=Tn({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(ua(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=sa([ua(e,a,t-r),va([r],s)]);o.push(i),a+=n}return 0===o.length?wu([],[0,t]):ta(sa(o),[o.length,t])}}),il=Tn({stft_:function(e,t,n,r,s=al){null==r&&(r=Hu(t));const a=ol(e,t,n),o=oa(a,s(t));return hu(o,r)}}),ul=Tn({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const o=bn(e,"image","cropAndResize"),i=bn(t,"boxes","cropAndResize","float32"),u=bn(n,"boxInd","cropAndResize","int32"),l=i.shape[0];M(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),M(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`)),M(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`)),M(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),M(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),M("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:o,boxes:i,boxInd:u},p={method:s,extrapolationValue:a,cropSize:r};return pn.runKernel("CropAndResize",c,p)}}),ll=Tn({flipLeftRight_:function(e){const t=bn(e,"image","flipLeftRight","float32");M(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return pn.runKernel("FlipLeftRight",n,{})}}),cl=Tn({grayscaleToRGB_:function(e){const t=bn(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];M(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),M(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,To(t,s)}}),pl=Tn({rgbToGrayscale_:function(e){const t=bn(e,"image","RGBToGrayscale"),n=t.rank-1,r=t.shape[n];M(t.rank>=2,(()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`)),M(3===r,(()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${r}.`));const s=t.dtype,a=Mr(t,"float32"),o=bu([.2989,.587,.114]);let i;switch(t.rank){case 2:i=Ya("ij,j->i",a,o);break;case 3:i=Ya("ijk,k->ij",a,o);break;case 4:i=Ya("ijkl,l->ijk",a,o);break;case 5:i=Ya("ijklm,m->ijkl",a,o);break;case 6:i=Ya("ijklmn,n->ijklm",a,o);break;default:throw new Error("Not a valid tensor rank.")}return i=wo(i,-1),Mr(i,s)}}),hl=Tn({rotateWithOffset_:function(e,t,n=0,r=.5){const s=bn(e,"image","rotateWithOffset","float32");M(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:t,fillValue:n,center:r};return pn.runKernel("RotateWithOffset",a,o)}});function dl(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),M(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was \'${r}\'`)),M(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank \'${e.rank}\'`)),M(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),M(1===t.rank,(()=>"scores must be a 1D tensor")),M(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),M(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was \'${a}\'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const fl=Tn({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=bn(e,"boxes","nonMaxSuppression","float32"),o=bn(t,"scores","nonMaxSuppression","float32"),i=dl(a,o,n,r,s),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return pn.runKernel("NonMaxSuppressionV3",{boxes:a,scores:o},u)}});function ml(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||gl)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function gl(e,t){return e>t?1:e<t?-1:0}function yl(e,t,n,r,s,a,o=!1,i=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>s&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(wl);const c=a>0?-.5/a:0,p=[],h=[];for(;p.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=xl(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*bl(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),h.push(t.score)):t.score>s&&ml(l,t,wl))}const d=p.length,f=n-d;i&&f>0&&(p.push(...new Array(f).fill(0)),h.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=h),u&&(m.validOutputs=d),m}function xl(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(u-o),f=(p-l)*(h-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(o,c),y=Math.min(i,p),x=Math.min(u,h),b=Math.max(y-m,0)*Math.max(x-g,0);return b/(d+f-b)}function bl(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function wl(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const vl=Tn({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=bn(e,"boxes","nonMaxSuppression"),i=bn(t,"scores","nonMaxSuppression"),u=dl(o,i,n,r,s,a),l={boxes:o,scores:i},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},p=pn.runKernel("NonMaxSuppressionV5",l,c);return{selectedIndices:p[0],selectedScores:p[1]}}}),Tl=Tn({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=bn(e,"boxes","nonMaxSuppression"),i=bn(t,"scores","nonMaxSuppression"),u=dl(o,i,n,r,s,null),l={boxes:o,scores:i},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},p=pn.runKernel("NonMaxSuppressionV4",l,c);return{selectedIndices:p[0],validOutputs:p[1]}}}),Sl=Tn({resizeBilinear_:function(e,t,n=!1,r=!1){const s=bn(e,"images","resizeBilinear");M(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),M(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),M(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=ta(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=pn.runKernel("ResizeBilinear",i,u);return o?ta(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),El=Tn({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=bn(e,"images","resizeNearestNeighbor");M(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),M(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),M("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),M(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=ta(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=pn.runKernel("ResizeNearestNeighbor",i,u);return o?ta(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),Nl=Tn({threshold_:function(e,t="binary",n=!1,r=.5){const s=bn(e,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,u,l,c=oa(bu([r]),255);if(M(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),M(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),M("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),M("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[o,i,u]=pu(s,[1,1,1],-1);const e=oa(o,.2989),t=oa(i,.587),n=oa(u,.114);l=_s(_s(e,t),n)}else l=e;"otsu"===t&&(c=function(e,t){let n,r,s,a,o,i,u=bu([-1]),l=bu([0]),c=bu([0]);for(let p=0;p<e.size-1;p++){n=ua(e,0,p+1),r=ua(e,p+1),o=Ga(mo(n),t),i=Ga(mo(r),t);const h=mo(oa(n,Pi(0,n.size)));s=Ga(h,mo(n));const d=va(r.shape,n.size),f=_s(Pi(0,r.size),d),m=oa(r,f);a=Ga(mo(m),mo(r));const g=zo(s,a),y=zo(s,a),x=oa(o,i);c=oa(oa(x,g),y);const b=$o(c,l);l=Ka(b,c,l),u=Ka(b,bu([p]),u)}return u}(ga(Mr(Xi(l),"int32"),Nn([]),256),a));const p=n?Do(l,c):$o(l,c);return Mr(oa(p,255),"int32")}}),$l=Tn({transform_:function(e,t,n="nearest",r="constant",s=0,a){const o=bn(e,"image","transform","float32"),i=bn(t,"transforms","transform","float32");M(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),M(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),M(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:o,transforms:i},l={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return pn.runKernel("Transform",u,l)}}),Il=Tn({bandPart_:function(e,t,n){const r=bn(e,"a","bandPart");M(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);let i,u;"number"==typeof t?(M(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),M(t<=a,(()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`)),i=bn(t<0?a:t,"numLower","bandPart")):(M("int32"===t.dtype,(()=>"bandPart(): numLower\'s dtype must be an int32.")),i=Ka(Oo(t,0),a,ii(t,a))),"number"==typeof n?(M(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`)),M(n<=o,(()=>`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`)),u=bn(n<0?o:n,"numUpper","bandPart")):(M("int32"===n.dtype,(()=>"bandPart(): numUpper\'s dtype must be an int32.")),u=Ka(Oo(n,0),o,ii(n,o)));const l=ta(Pi(0,a,1,"int32"),[-1,1]),c=Pi(0,o,1,"int32"),p=zo(l,c),h=Ko(Do(p,i),Io(p,Uo(u))),d=si([a,o],r.dtype);return ta(mu(Ou(ta(r,[-1,a,o])).map((e=>Ka(h,e,d)))),s)}}),kl=Tn({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,M(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)M(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=pu(e,e.shape[0],0).map((e=>fu(e,[0])));M(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(pn.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=oa(mo(oa(n[r],e)),n[r]);e=zo(e,t)}return Ga(e,yo(e,"euclidean"))})));return t?mu(n,0):n}});function _l(e,t=!1){return pn.tidy((()=>{M(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=So(n),a=Fr(e);const o=wu([[1]],[1,1]);let i=Fr(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=i,l=s;[i,a,s]=pn.tidy((()=>{const t=ua(a,[e,e],[n-e,1]),u=yo(t),l=ua(a,[e,e],[1,1]),c=Ka($o(l,0),wu([[-1]]),wu([[1]])),p=zo(l,oa(c,u)),h=Ga(t,p);i=1===h.shape[0]?Fr(o):sa([o,ua(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=Uo(Ga(aa(c,p),u)),f=ua(a,[e,0],[n-e,r]),m=oa(d,i),g=Pu(i);if(0===e)a=zo(f,aa(m,aa(g,f)));else{const t=zo(f,aa(m,aa(g,f)));a=sa([ua(a,[0,0],[e,r]),t],0)}const y=Pu(m),x=ua(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=zo(x,aa(aa(x,i),y));else{const t=zo(x,aa(aa(x,i),y));s=sa([ua(s,[0,0],[n,e]),t],1)}return[i,a,s]})),Cn([t,u,l])}return!t&&n>r&&(s=ua(s,[0,0],[n,r]),a=ua(a,[0,0],[r,r])),[s,a]}))}const Cl=Tn({qr_:function(e,t=!1){if(M(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return _l(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=Ou(ta(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];return r.forEach((e=>{const[n,r]=_l(e,t);s.push(n),a.push(r)})),[ta(mu(s,0),e.shape),ta(mu(a,0),e.shape)]}}});var Al;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Al||(Al={}));const Rl=Tn({computeWeightedLoss_:function(e,t,n=Al.SUM_BY_NONZERO_WEIGHTS){const r=bn(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=bn(t,"weights","computeWeightedLoss"));const a=null==s?r:oa(r,s);if(n===Al.NONE)return a;if(n===Al.SUM)return mo(a);if(n===Al.MEAN){if(null==s)return ri(a);{const e=r.size/s.size,t=Ga(mo(a),mo(s));return e>1?Ga(t,po(e)):t}}if(n===Al.SUM_BY_NONZERO_WEIGHTS){if(null==s)return Ga(mo(a),po(r.size));{const e=oa(s,ai(r.shape)),t=Mr(mo(di(e,po(0))),"float32");return Ga(mo(a),t)}}throw Error(`Unknown reduction: ${n}`)}}),Ol=Tn({absoluteDifference_:function(e,t,n,r=Al.SUM_BY_NONZERO_WEIGHTS){const s=bn(e,"labels","absoluteDifference"),a=bn(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=bn(n,"weights","absoluteDifference")),F(s.shape,a.shape,"Error in absoluteDifference: ");const i=$s(zo(s,a));return Rl(i,o,r)}}),Dl=Tn({cosineDistance_:function(e,t,n,r,s=Al.SUM_BY_NONZERO_WEIGHTS){const a=bn(e,"labels","cosineDistance"),o=bn(t,"predictions","cosineDistance");let i=null;null!=r&&(i=bn(r,"weights","cosineDistance")),F(a.shape,o.shape,"Error in cosineDistance: ");const u=po(1),l=zo(u,mo(oa(a,o),n,!0));return Rl(l,i,s)}}),Ml=Tn({hingeLoss_:function(e,t,n,r=Al.SUM_BY_NONZERO_WEIGHTS){let s=bn(e,"labels","hingeLoss");const a=bn(t,"predictions","hingeLoss");let o=null;null!=n&&(o=bn(n,"weights","hingeLoss")),F(s.shape,a.shape,"Error in hingeLoss: ");const i=po(1);s=zo(oa(po(2),s),i);const u=Wi(zo(i,oa(s,a)));return Rl(u,o,r)}}),Fl=Tn({huberLoss_:function(e,t,n,r=1,s=Al.SUM_BY_NONZERO_WEIGHTS){const a=bn(e,"labels","huberLoss"),o=bn(t,"predictions","huberLoss");let i=null;null!=n&&(i=bn(n,"weights","huberLoss")),F(a.shape,o.shape,"Error in huberLoss: ");const u=po(r),l=$s(zo(o,a)),c=ii(l,u),p=zo(l,c),h=_s(oa(po(.5),fo(c)),oa(u,p));return Rl(h,i,s)}}),Ll=Tn({logLoss_:function(e,t,n,r=1e-7,s=Al.SUM_BY_NONZERO_WEIGHTS){const a=bn(e,"labels","logLoss"),o=bn(t,"predictions","logLoss");let i=null;null!=n&&(i=bn(n,"weights","logLoss")),F(a.shape,o.shape,"Error in logLoss: ");const u=po(1),l=po(r),c=Uo(oa(a,Lo(_s(o,l)))),p=oa(zo(u,a),Lo(_s(zo(u,o),l))),h=zo(c,p);return Rl(h,i,s)}}),Bl=Tn({meanSquaredError_:function(e,t,n,r=Al.SUM_BY_NONZERO_WEIGHTS){const s=bn(e,"labels","meanSquaredError"),a=bn(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=bn(n,"weights","meanSquaredError")),F(s.shape,a.shape,"Error in meanSquaredError: ");const i=du(s,a);return Rl(i,o,r)}}),Pl=Tn({sigmoidCrossEntropy_:function(e,t,n,r=0,s=Al.SUM_BY_NONZERO_WEIGHTS){let a=bn(e,"multiClassLabels","sigmoidCrossEntropy");const o=bn(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=bn(n,"weights","sigmoidCrossEntropy")),F(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=po(r),t=po(1),n=po(.5);a=_s(oa(a,zo(t,e)),oa(n,e))}const u=function(e,t){const n=bn(e,"labels","sigmoidCrossEntropyWithLogits"),r=bn(t,"logits","sigmoidCrossEntropyWithLogits");F(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Wi(r),a=oa(r,n),o=Bo(bo(Uo($s(r))));return _s(zo(s,a),o)}(a,o);return Rl(u,i,s)}}),Ul=Tn({softmaxCrossEntropy_:function(e,t,n,r=0,s=Al.SUM_BY_NONZERO_WEIGHTS){let a=bn(e,"onehotLabels","softmaxCrossEntropy");const o=bn(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=bn(n,"weights","softmaxCrossEntropy")),F(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=po(r),t=po(1),n=po(a.shape[1]);a=_s(oa(a,zo(t,e)),Ga(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=Po(((e,t,r)=>{const s=Ho(t,[n],!0),a=zo(Mr(t,"float32"),s);r([e,a]);const o=Uo(oa(a,e));return{value:mo(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=ro(e.shape,[n]);return[oa(ta(e,a),zo(Mr(r,"float32"),bo(s))),oa(ta(e,a),zo(bo(s),Mr(r,"float32")))]}}}));return r(e,t)}(a,o);return Rl(u,i,s)}}),Vl=Tn({sparseFillEmptyRows_:function(e,t,n,r){const s=bn(e,"indices","sparseFillEmptyRows","int32"),a=bn(t,"values","sparseFillEmptyRows"),o=bn(n,"denseShape","sparseFillEmptyRows","int32"),i=bn(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:s,values:a,denseShape:o,defaultValue:i},l=pn.runKernel("SparseFillEmptyRows",u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}}),Wl=Tn({sparseReshape_:function(e,t,n){const r=bn(e,"inputIndices","sparseReshape","int32"),s=bn(t,"inputShape","sparseReshape","int32"),a=bn(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=pn.runKernel("SparseReshape",o);return{outputIndices:i[0],outputShape:i[1]}}}),zl=Tn({sparseSegmentMean_:function(e,t,n){const r=bn(e,"data","sparseSegmentMean"),s=bn(t,"indices","sparseSegmentMean","int32"),a=bn(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return pn.runKernel("SparseSegmentMean",o)}}),Gl=Tn({sparseSegmentSum_:function(e,t,n){const r=bn(e,"data","sparseSegmentSum"),s=bn(t,"indices","sparseSegmentSum","int32"),a=bn(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return pn.runKernel("SparseSegmentSum",o)}}),Hl=Tn({stringNGrams_:function(e,t,n,r,s,a,o,i){const u=bn(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=bn(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},p={data:u,dataSplits:l},h=pn.runKernel("StringNGrams",p,c);return{nGrams:h[0],nGramsSplits:h[1]}}}),Kl={fft:uu,ifft:lu,rfft:hu,irfft:cu},jl={hammingWindow:sl,hannWindow:al,frame:ol,stft:il},ql={flipLeftRight:ll,grayscaleToRGB:cl,resizeNearestNeighbor:El,resizeBilinear:Sl,rgbToGrayscale:pl,rotateWithOffset:hl,cropAndResize:ul,nonMaxSuppression:fl,nonMaxSuppressionAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=bn(e,"boxes","nonMaxSuppressionAsync"),o=bn(t,"scores","nonMaxSuppressionAsync"),i=dl(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u=await Promise.all([a.data(),o.data()]),l=u[0],c=u[1],{selectedIndices:p}=function(e,t,n,r,s){return yl(e,t,n,r,s,0)}(l,c,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),bu(p,"int32")},nonMaxSuppressionWithScore:vl,nonMaxSuppressionWithScoreAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=bn(e,"boxes","nonMaxSuppressionAsync"),i=bn(t,"scores","nonMaxSuppressionAsync"),u=dl(o,i,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),c=l[0],p=l[1],{selectedIndices:h,selectedScores:d}=function(e,t,n,r,s,a){return yl(e,t,n,r,s,a,!0)}(c,p,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:bu(h,"int32"),selectedScores:bu(d)}},nonMaxSuppressionPadded:Tl,nonMaxSuppressionPaddedAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=bn(e,"boxes","nonMaxSuppressionAsync"),i=bn(t,"scores","nonMaxSuppressionAsync"),u=dl(o,i,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,p=u.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=function(e,t,n,r,s,a){return yl(e,t,n,r,s,0,!1,a,!0)}(h,d,l,c,p,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:bu(f,"int32"),validOutputs:po(m,"int32")}},threshold:Nl,transform:$l},Xl={bandPart:Il,gramSchmidt:kl,qr:Cl},Yl={absoluteDifference:Ol,computeWeightedLoss:Rl,cosineDistance:Dl,hingeLoss:Ml,huberLoss:Fl,logLoss:Ll,meanSquaredError:Bl,sigmoidCrossEntropy:Pl,softmaxCrossEntropy:Ul},Ql={sparseFillEmptyRows:Vl,sparseReshape:Wl,sparseSegmentMean:zl,sparseSegmentSum:Gl},Zl={stringNGrams:Hl,stringSplit:Tn({stringSplit_:function(e,t,n=!0){const r=bn(e,"input","stringSplit","string"),s=bn(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=pn.runKernel("StringSplit",o,a);return{indices:i[0],values:i[1],shape:i[2]}}}),stringToHashBucketFast:Tn({stringToHashBucketFast_:function(e,t){const n=bn(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return pn.runKernel("StringToHashBucketFast",s,r)}}),staticRegexReplace:Tn({staticRegexReplace_:function(e,t,n,r=!0){const s=bn(e,"input","staticRegexReplace","string"),a={pattern:t,rewrite:n,replaceGlobal:r};return pn.runKernel(tt,{x:s},a)}})},Jl="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function ec(e,t){const n=e[0].length;e.forEach(((e,t)=>{M(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),M(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,s)=>{for(let a=0;a<n;a++)M(a===t||e[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function tc(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}var nc;function rc(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let s=1;s<n.length;++s){const a=n[s],o=r[r.length-n.length+s],i=r[o];if(a>=0)if(i>=0){if(i!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${s+e}] = ${a} but shape[${s+e}] = ${i}`)}else r[o]=a}return r}function sc(e){const t={FIRST_DIM_SIZE:nc.FIRST_DIM_SIZE,VALUE_ROWIDS:nc.VALUE_ROWIDS,ROW_LENGTHS:nc.ROW_LENGTHS,ROW_SPLITS:nc.ROW_SPLITS,ROW_LIMITS:nc.ROW_LIMITS,ROW_STARTS:nc.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function ac(e){return 0===e.length?0:e[0]===nc.FIRST_DIM_SIZE?e.length-1:e.length}function oc(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let s=0;s<Math.min(n,r-1);++s){const n=e[s],r=t[s+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${s-e.length}] = ${n} but ragged tensor input.flatValues.shape[${s-e.length}] = ${r}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(nc||(nc={}));const ic=30;function uc(e){return e<=ic?e:Z(e,Math.floor(Math.sqrt(e)))}function lc(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function cc(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function pc(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function hc(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?s.push(t[n-1]*e[n]):s.push(e[n]/t[n-1]):s.push(e[n]);return s}function dc(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function fc(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}function mc(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===B(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let o=1;for(let e=0;e<s.length-1;++e)o*=s[e];const i=e.shape,u=s.slice();u.pop();let l=1;for(let e=a;e<n;++e)l*=i[e],u.push(i[e]);const c=[...J(e.shape).map((e=>e/l)),1].slice(0,a);return[u,o,l,c]}const yc=1.7580993408473768,xc=1.0507009873554805,bc=.3275911,wc=.254829592,vc=-.284496736,Tc=1.421413741,Sc=-1.453152027,Ec=1.061405429;function Nc(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function $c(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function Ic(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function kc(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function _c(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Cc(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function Ac(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function Rc(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const Oc="->",Dc=/->/g,Mc=",",Fc="...";function Lc(e,t){const n=((e=e.replace(/\\s/g,"")).length-e.replace(Dc,"").length)/Oc.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error(`Equation must contain exactly one arrow ("${Oc}").`);const[r,s]=e.split(Oc);M(-1===r.indexOf(Fc),(()=>`The ellipsis notation ("${Fc}") is not supported yet.`));const a=r.split(Mc),o=a.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<s.length;++e){const t=s[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===i.indexOf(t)&&t!==Mc&&i.push(t)}const u=new Array(a.length);for(let e=0;e<o;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<a[e].length;++t)u[e].push(i.indexOf(a[e][t]))}const l=i.length,c=[];for(let e=s.length;e<l;++e)c.push(e);return{allDims:i,summedDims:c,idDims:u}}function Bc(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function Pc(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const s=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=s[n]:M(r[t[e][n]]===s[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(s)}, but got dimension ${s[n]}`))}}function Uc(e,t){const n=e,r=[];let s=0;0===e.length&&n.push(-1),s=e.length+1;for(let e=0;e<s;++e)r.push([]);const a=[];for(let e=0;e<n.length;++e){const s=Wc(t,n[e]);for(const t of s)-1===a.indexOf(t)&&(r[e].push(t),a.push(t))}return{path:n,steps:r}}function Vc(e){return e.every(((e,t)=>e===t))}function Wc(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}function zc(e,t,n=0){let r=[];if("number"==typeof t)M(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{M(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}M(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}function Gc(e){return`Received SparseTensor with denseShape[0] = 0 but\\n  indices.shape[0] = ${e}`}function Hc(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Kc(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function jc(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function qc(e,t){return`size ${e} must be non-negative, not ${t}`}function Xc(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Yc(e,t){return`Input to reshape is a SparseTensor with ${B(e)}\\n  dense values, but the requested shape requires a multiple of ${B(t)}. inputShape=${e} outputShape= ${t}`}function Qc(e,t){return`Input to reshape is a tensor with ${B(e)} dense values, but the requested shape has ${B(t)}. inputShape=${e} outputShape=${t}`}function Zc(){return"segment ids must be >= 0"}function Jc(){return"segment ids are not increasing"}function ep(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function tp(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function np(e,t){let n,r=!1;for(e<=ic?(n=e,r=!0):n=Z(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Z(e,n+1);return n}function rp(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r}function sp(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let u=1,l=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),u*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),l*=e.shape[t];for(let e=r;e<s;e++)i.push(t.shape[e]);for(let t=n+1;t<a;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:o,outputShape:i}}function ap(e){try{return e.map((e=>It(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function op(e){return e.map((e=>$t(e)))}var ip,up;pe().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(ip||(ip={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(up||(up={}));const lp={};function cp(e){return lp[e]}function pp(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,o=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd,i=e<0?t.inputNames.length+e:e;if("tensor"===a.type)return hp(t.inputNames[i],n,r,s);if("tensors"===a.type){const a=t.inputs.slice(e,o);return t.inputNames.slice(e,o).filter(((e,t)=>{var n;return"NoOp"!==(null===(n=a[t])||void 0===n?void 0:n.op)})).map((e=>hp(e,n,r,s)))}const u=hp(t.inputNames[i],n,r,s),l=u.dataSync();return"number"===a.type?l[0]:te(u.shape,l)}const o=t.attrParams[e];return o&&o.value}function hp(e,t,n,r){const[s,a]=gp(e,n);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[mp(s,e)]));return void 0!==o?t[mp(s,o)][a]:void 0}function dp(e,t,n){return t[mp(e,n.currentContextId)]}function fp(e,t){const[n,r,s]=gp(e,t);return[mp(n,t&&t.currentContextId),r,s]}function mp(e,t){return t?`${e}-${t}`:e}function gp(e,t){if(""===e)return["",0,void 0];const n=null!=t&&null!=t.parseNodeNameCache;if(n){const n=t.parseNodeNameCache.get(e);if(null!=n)return n}const r=e.split(":");let s;if(1===r.length)s=[e,0,void 0];else{const e=r[0],t=3===r.length?r[1]:void 0;s=[e,Number(r[r.length-1]),t]}return n&&t.parseNodeNameCache.set(e,s),s}function yp(e,t,n){let r=pp("pad",e,t,n);if("explicit"===r){r=pp("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function xp(e){return e.kept?e:Fr(e)}const bp=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],wp=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],vp=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],Tp=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],Sp=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],Ep=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Np=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],$p=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],Ip=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],kp=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],_p=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],Cp=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],Ap=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],Rp=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Op=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],Dp=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],Mp=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Fp=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],Lp=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class Bp{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[u,l,c,p,h,d,f,m,g,y,x,b,w,v,T,S,E,N,$].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let i=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const p=Object.keys(o);p.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[r,,s]=fp(e),a=o[r];if(null!=a.outputs){const e=a.outputs.indexOf(s);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?p.forEach((e=>{const t=o[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=fp(e),n=o[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=fp(e),n=o[t];n&&(n.signatureKey=l[e],i.push(n))})):i=r;let h={};null!=e.library&&null!=e.library.function&&(h=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:o,inputs:i,outputs:u,weights:s,placeholders:r,signature:t,functions:h};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=cp(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=Up(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Up(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=Yp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Yp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=Wp(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=Wp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=Xp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Xp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=Vp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Vp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=Zp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Zp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=qp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=qp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=Qp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Qp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=Hp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Hp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=Kp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Kp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=Gp(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Gp(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const s=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=fp(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:zp(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n})),Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[s,,a]=fp(e),o=r[s];if(null!=o.outputs){const e=o.outputs.indexOf(a);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=fp(o[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Pp(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=pe().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Up(e,t,n,r=!1){const s=e[t];return null!=s?Pp(s.s,r):n}function Vp(e,t,n){const r=e[t];return r?r.b:n}function Wp(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function zp(e){switch("string"==typeof e&&(e=ip[e]),e){case ip.DT_FLOAT:case ip.DT_HALF:return"float32";case ip.DT_INT32:case ip.DT_INT64:case ip.DT_INT8:case ip.DT_UINT8:return"int32";case ip.DT_BOOL:return"bool";case ip.DT_DOUBLE:return"float32";case ip.DT_STRING:return"string";case ip.DT_COMPLEX64:case ip.DT_COMPLEX128:return"complex64";default:return null}}function Gp(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function Hp(e,t,n){const r=e[t];return r&&r.type?zp(r.type):n}function Kp(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>zp(e))):n}function jp(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function qp(e,t,n){const r=e[t];return r&&r.shape?jp(r.shape):n}function Xp(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function Yp(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>Pp(e,r))):n}function Qp(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>jp(e))):n}function Zp(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class Jp{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return hp(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return hp(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Wp(this.node.rawAttrs,e,t);if(null!=n.s)return Up(this.node.rawAttrs,e,t);if(null!=n.b)return Vp(this.node.rawAttrs,e,t);if(null!=n.shape)return qp(this.node.rawAttrs,e,t);if(null!=n.type)return Hp(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Xp(this.node.rawAttrs,e,t);if(null!=n.list.s)return Yp(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Qp(this.node.rawAttrs,e,t);if(null!=n.list.b)return Zp(this.node.rawAttrs,e,t);if(null!=n.list.type)return Kp(this.node.rawAttrs,e,t)}return t}}function eh(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){M(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const s=e[r],a=t[r];M(s<0||a<0||s===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function th(e){return"number"!=typeof e&&!e.some((e=>e<0))}function nh(e,t,n){let r=rh(e,n);const s=!th(r);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&t.forEach((e=>{r=rh(e.shape,r)})),!th(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function rh(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const s=e[r],a=t[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=s>=0?s:a}return n}class sh{constructor(e,t,n,r,s,a,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=po(0),An(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),eh(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,An(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Nn([],[0].concat(this.elementShape));const n=this.readMany(e);return eh(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),mu(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Nn([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return eh(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),sa(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Ou(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        ${n}, and tensor\'s shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray\'s size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];_n((()=>{t=ta(t,[1,n,s]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],s];a[n]=ta(ua(t,o,i),this.elementShape)}return a}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,a)}}class ah{get id(){return this.idTensor.id}constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);eh(t,e.shape,"TensorList shape mismatch: "),An(e)})),this.idTensor=po(0),this.maxNumElements=r,An(this.idTensor)}copy(){return new ah([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);eh(e,this.elementShape,"TensorList shape mismatch: ");const r=nh(this.elementShape,this.tensors,e);return _n((()=>{const e=this.tensors.map((e=>ta(e,r)));return mu(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=nh(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,eh(r.shape,e,"TensorList shape mismatch: "),ta(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(eh(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");An(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new ah([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);eh(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=nh(this.elementShape,this.tensors,t);return ta(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);eh(this.elementShape,t.shape,"TensorList shape mismatch: "),An(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);eh(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=nh(this.elementShape,this.tensors,n);return 0===e.length?Nn([],[0].concat(r)):_n((()=>{const t=e.map((e=>ta(this.tensors[e],r)));return mu(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);eh(this.elementShape,t,"TensorList shape mismatch: ");const n=nh(this.elementShape,this.tensors,t);return 0===this.size()?Nn([],[0].concat(n)):_n((()=>{const e=this.tensors.map((e=>ta(e,n)));return sa(e,0)}))}}function oh(e,t,n){const[r,s]=pp("fusedOps",e,t,n),a="biasadd"===r,o=!a,i="prelu"===s,u="fusedbatchnorm"===r,l=pp("numArgs",e,t,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&a&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=pp("strides",e,t,n),p=yp(e,t,n),h=pp("dataFormat",e,t,n).toUpperCase(),d=pp("dilations",e,t,n);let[f,m]=pp("args",e,t,n);return o&&(m=f,f=void 0),{stride:c,pad:p,dataFormat:h,dilations:d,biasArg:f,preluArg:m,activationFunc:s,leakyreluAlpha:pp("leakyreluAlpha",e,t,n)}}function ih(e,t,n){return{boxes:pp("boxes",e,t,n),scores:pp("scores",e,t,n),maxOutputSize:pp("maxOutputSize",e,t,n),iouThreshold:pp("iouThreshold",e,t,n),scoreThreshold:pp("scoreThreshold",e,t,n),softNmsSigma:pp("softNmsSigma",e,t,n)}}class uh{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=po(0),this.tensorMap=new Map,An(this.handle)}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return po(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),_n((()=>{const e=Ou(t),r=n.length,s=e.length;M(r===s,(()=>`The number of elements doesn\'t match, keys has ${r} elements, the values has ${s} elements.`));for(let t=0;t<r;t++){const r=n[t],s=e[t];An(s),this.tensorMap.set(r,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return _n((()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return mu(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function lh(e,t,n,r,s=_n){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(pp("a",e,t,n),pp("b",e,t,n))];case"AddN":return[r.addN(pp("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(pp("a",e,t,n),pp("b",e,t,n))];case"Mul":return[r.mul(pp("a",e,t,n),pp("b",e,t,n))];case"RealDiv":case"Div":return[r.div(pp("a",e,t,n),pp("b",e,t,n))];case"DivNoNan":return[r.divNoNan(pp("a",e,t,n),pp("b",e,t,n))];case"FloorDiv":return[r.floorDiv(pp("a",e,t,n),pp("b",e,t,n))];case"Sub":return[r.sub(pp("a",e,t,n),pp("b",e,t,n))];case"Minimum":return[r.minimum(pp("a",e,t,n),pp("b",e,t,n))];case"Maximum":return[r.maximum(pp("a",e,t,n),pp("b",e,t,n))];case"Pow":return[r.pow(pp("a",e,t,n),pp("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(pp("a",e,t,n),pp("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(pp("x",e,t,n))];case"Acos":return[r.acos(pp("x",e,t,n))];case"Acosh":return[r.acosh(pp("x",e,t,n))];case"Asin":return[r.asin(pp("x",e,t,n))];case"Asinh":return[r.asinh(pp("x",e,t,n))];case"Atan":return[r.atan(pp("x",e,t,n))];case"Atan2":return[r.atan2(pp("x",e,t,n),pp("y",e,t,n))];case"Atanh":return[r.atanh(pp("x",e,t,n))];case"Ceil":return[r.ceil(pp("x",e,t,n))];case"Complex":return[r.complex(pp("real",e,t,n),pp("imag",e,t,n))];case"Cos":return[r.cos(pp("x",e,t,n))];case"Cosh":return[r.cosh(pp("x",e,t,n))];case"Elu":return[r.elu(pp("x",e,t,n))];case"Erf":return[r.erf(pp("x",e,t,n))];case"Exp":return[r.exp(pp("x",e,t,n))];case"Expm1":return[r.expm1(pp("x",e,t,n))];case"Floor":return[r.floor(pp("x",e,t,n))];case"Log":return[r.log(pp("x",e,t,n))];case"Log1p":return[r.log1p(pp("x",e,t,n))];case"Imag":return[r.imag(pp("x",e,t,n))];case"Neg":return[r.neg(pp("x",e,t,n))];case"Reciprocal":return[r.reciprocal(pp("x",e,t,n))];case"Real":return[r.real(pp("x",e,t,n))];case"Relu":return[r.relu(pp("x",e,t,n))];case"Round":return[r.round(pp("x",e,t,n))];case"Selu":return[r.selu(pp("x",e,t,n))];case"Sigmoid":return[r.sigmoid(pp("x",e,t,n))];case"Sin":return[r.sin(pp("x",e,t,n))];case"Sign":return[r.sign(pp("x",e,t,n))];case"Sinh":return[r.sinh(pp("x",e,t,n))];case"Softplus":return[r.softplus(pp("x",e,t,n))];case"Sqrt":return[r.sqrt(pp("x",e,t,n))];case"Square":return[r.square(pp("x",e,t,n))];case"Tanh":return[r.tanh(pp("x",e,t,n))];case"Tan":return[r.tan(pp("x",e,t,n))];case"ClipByValue":return[r.clipByValue(pp("x",e,t,n),pp("clipValueMin",e,t,n),pp("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(pp("x",e,t,n))];case"Rsqrt":return[r.rsqrt(hp(e.inputNames[0],t,n))];case"LeakyRelu":return[r.leakyRelu(pp("x",e,t,n),pp("alpha",e,t,n))];case"Prelu":return[r.prelu(pp("x",e,t,n),pp("alpha",e,t,n))];case"IsNan":return[r.isNaN(hp(e.inputNames[0],t,n))];case"IsInf":return[r.isInf(hp(e.inputNames[0],t,n))];case"IsFinite":return[r.isFinite(hp(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=pp("thenBranch",e,t,n),s=pp("elseBranch",e,t,n),a=pp("cond",e,t,n),o=pp("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=pp("body",e,t,n),s=pp("cond",e,t,n),a=pp("args",e,t,n),o=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),i=a.map((e=>e.id));let u=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let l=a;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[xp(pp("pred",e,t,n))];case"Switch":{const r=pp("pred",e,t,n);let s=pp("data",e,t,n);return s.kept||(s=xp(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==hp(e,t,n)));return r?[xp(hp(r,t,n))]:void 0}case"Enter":{const r=pp("frameName",e,t,n),s=pp("tensor",e,t,n);return n.enterFrame(r),[xp(s)]}case"Exit":{const r=pp("tensor",e,t,n);return n.exitFrame(),[xp(r)]}case"NextIteration":{const r=pp("tensor",e,t,n);return n.nextIteration(),[xp(r)]}case"TensorArrayV3":{const r=pp("size",e,t,n),s=pp("dtype",e,t,n),a=pp("elementShape",e,t,n),o=pp("dynamicSize",e,t,n),i=pp("clearAfterRead",e,t,n),u=pp("identicalElementShapes",e,t,n),l=pp("name",e,t,n),c=new sh(l,s,r,a,u,o,i);return n.addTensorArray(c),[c.idTensor,po(1)]}case"TensorArrayWriteV3":{const r=pp("tensorArrayId",e,t,n),s=pp("index",e,t,n),a=pp("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(s,a),[o.idTensor]}case"TensorArrayReadV3":{const r=pp("tensorArrayId",e,t,n),s=pp("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=pp("tensorArrayId",e,t,n),s=pp("indices",e,t,n),a=pp("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=pp("tensorArrayId",e,t,n),s=pp("indices",e,t,n),a=pp("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(s,a),[o.idTensor]}case"TensorArrayConcatV3":{const r=pp("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=pp("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=pp("tensorArrayId",e,t,n),s=pp("tensor",e,t,n),a=pp("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(a,s),[o.idTensor]}case"TensorArraySizeV3":{const r=pp("tensorArrayId",e,t,n);return[po(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=pp("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=pp("tensorListId",e,t,n),s=pp("index",e,t,n),a=pp("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(s,a),[o.idTensor]}case"TensorListGetItem":{const r=pp("tensorListId",e,t,n),s=pp("index",e,t,n),a=pp("elementShape",e,t,n),o=pp("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=pp("indices",e,t,n),s=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new ah([],n,e.dtype,r),o=Ou(e,0);return t.forEach(((e,t)=>{a.setItem(e,o[t])})),a}(pp("tensor",e,t,n),r,pp("elementShape",e,t,n),pp("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=pp("elementShape",e,t,n),s=pp("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=pp(a,e,t,n),i=function(e,t,n,r){return new ah([],e,t,r)}(r,s,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=pp("tensorListId",e,t,n),s=pp("indices",e,t,n),a=pp("elementShape",e,t,n),o=pp("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,o,a)]}case"TensorListStack":{const r=pp("tensorListId",e,t,n),s=pp("elementShape",e,t,n),a=pp("elementDType",e,t,n),o=pp("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);eh(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=Ou(e);return new ah(s,t,r)}(pp("tensor",e,t,n),pp("elementShape",e,t,n),pp("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=pp("tensorListId",e,t,n),s=n.getTensorList(r.id),a=pp("dtype",e,t,n),o=pp("elementShape",e,t,n);return[s.concat(a,o)]}case"TensorListPushBack":{const r=pp("tensorListId",e,t,n),s=pp("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=pp("tensorListId",e,t,n),s=pp("elementShape",e,t,n),a=pp("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=pp("tensor",e,t,n),s=pp("elementShape",e,t,n),a=function(e,t,n){let r=0;const s=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        ${r}, and tensor\'s shape is: ${e.shape}`);const a=rh(e.shape.slice(1),n),o=0===r?0:e.size/r,i=_n((()=>{const n=[];e=ta(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:s[r-1],0],u=[1,t[r],o];n[r]=ta(ua(e,i,u),a)}return e.dispose(),n})),u=new ah([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)u.setItem(e,i[e]);return u}(r,pp("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const r=pp("tensorListId",e,t,n);return[po(n.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=pp("tensorListId",e,t,n),s=pp("size",e,t,n),a=n.getTensorList(r.id).resize(s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"Conv1D":{const s=pp("stride",e,t,n),a=pp("pad",e,t,n),o=pp("dataFormat",e,t,n).toUpperCase(),i=pp("dilation",e,t,n);return[r.conv1d(pp("x",e,t,n),pp("filter",e,t,n),s,a,o,i)]}case"Conv2D":{const s=pp("strides",e,t,n),a=yp(e,t,n),o=pp("dataFormat",e,t,n).toUpperCase(),i=pp("dilations",e,t,n);return[r.conv2d(pp("x",e,t,n),pp("filter",e,t,n),[s[1],s[2]],a,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:p}=oh(e,t,n);return[r.fused.conv2d({x:pp("x",e,t,n),filter:pp("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:p}=oh(e,t,n);return[r.fused.depthwiseConv2d({x:pp("x",e,t,n),filter:pp("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=pp("outputShape",e,t,n),a=pp("strides",e,t,n),o=yp(e,t,n);return[r.conv2dTranspose(pp("x",e,t,n),pp("filter",e,t,n),s,[a[1],a[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=pp("strides",e,t,n),a=yp(e,t,n),o=pp("dilations",e,t,n),i=pp("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(pp("input",e,t,n),pp("filter",e,t,n),[s[1],s[2]],a,i,[o[1],o[2]])]}case"Conv3D":{const s=pp("strides",e,t,n),a=pp("pad",e,t,n),o=pp("dataFormat",e,t,n).toUpperCase(),i=pp("dilations",e,t,n);return[r.conv3d(pp("x",e,t,n),pp("filter",e,t,n),[s[1],s[2],s[3]],a,o,[i[1],i[2],i[3]])]}case"AvgPool":{const s=pp("strides",e,t,n),a=pp("pad",e,t,n),o=pp("kernelSize",e,t,n);return[r.avgPool(pp("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=pp("strides",e,t,n),a=pp("pad",e,t,n),o=pp("kernelSize",e,t,n);return[r.maxPool(pp("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=pp("strides",e,t,n),a=pp("pad",e,t,n),o=pp("kernelSize",e,t,n),i=pp("includeBatchInIndex",e,t,n),{result:u,indexes:l}=r.maxPoolWithArgmax(pp("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a,i);return[u,l]}case"AvgPool3D":{const s=pp("strides",e,t,n),a=pp("pad",e,t,n),o=pp("kernelSize",e,t,n);return[r.avgPool3d(pp("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=pp("strides",e,t,n),a=pp("pad",e,t,n),o=pp("kernelSize",e,t,n);return[r.maxPool3d(pp("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=pp("strides",e,t,n),a=pp("pad",e,t,n),o=pp("dilations",e,t,n),i=s[1],u=s[2],l=o[1],c=o[2];return[r.dilation2d(pp("x",e,t,n),pp("filter",e,t,n),[i,u],a,[l,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"Fill":{const s=pp("shape",e,t,n),a=pp("dtype",e,t,n),o=pp("value",e,t,n);return[r.fill(s,o,a)]}case"LinSpace":{const s=pp("start",e,t,n),a=pp("stop",e,t,n),o=pp("num",e,t,n);return[r.linspace(s,a,o)]}case"Multinomial":{const s=pp("logits",e,t,n),a=pp("numSamples",e,t,n),o=pp("seed",e,t,n);return[r.multinomial(s,a,o)]}case"OneHot":{const s=pp("indices",e,t,n),a=pp("depth",e,t,n),o=pp("onValue",e,t,n),i=pp("offValue",e,t,n),u=pp("dtype",e,t,n);return[r.oneHot(s,a,o,i,u)]}case"Ones":return[r.ones(pp("shape",e,t,n),pp("dtype",e,t,n))];case"OnesLike":return[r.onesLike(pp("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(pp("shape",e,t,n),pp("dtype",e,t,n),pp("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(pp("shape",e,t,n),pp("minval",e,t,n),pp("maxval",e,t,n),pp("dtype",e,t,n))];case"RandomUniformInt":return[r.randomUniformInt(pp("shape",e,t,n),pp("minval",e,t,n),pp("maxval",e,t,n),pp("seed",e,t,n))];case"Range":{const s=pp("start",e,t,n),a=pp("stop",e,t,n),o=pp("step",e,t,n);return[r.range(s,a,o,pp("dtype",e,t,n))]}case"TruncatedNormal":{const s=pp("shape",e,t,n),a=pp("mean",e,t,n),o=pp("stdDev",e,t,n),i=pp("seed",e,t,n);return[r.truncatedNormal(s,a,o,pp("dtype",e,t,n),i)]}case"Zeros":return[r.zeros(pp("shape",e,t,n),pp("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(pp("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,r,s=I)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=ih(e,t,n),c=await s.image.nonMaxSuppressionWithScoreAsync(r,a,o,i,u,l);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=ih(e,t,n),l=pp("padToMaxOutputSize",e,t,n),c=await s.image.nonMaxSuppressionPaddedAsync(r,a,o,i,u,l);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=ih(e,t,n);return[await s.image.nonMaxSuppressionAsync(r,a,o,i,u)]}case"Where":{const r=s.cast(pp("condition",e,t,n),"bool"),a=[await s.whereAsync(r)];return r.dispose(),a}case"ListDiff":return s.setdiff1dAsync(pp("x",e,t,n),pp("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"LowerBound":{const s=pp("sortedSequence",e,t,n),a=pp("values",e,t,n);return[r.lowerBound(s,a)]}case"TopKV2":{const s=pp("x",e,t,n),a=pp("k",e,t,n),o=pp("sorted",e,t,n),i=r.topk(s,a,o);return[i.values,i.indices]}case"UpperBound":{const s=pp("sortedSequence",e,t,n),a=pp("values",e,t,n);return[r.upperBound(s,a)]}case"Unique":{const s=pp("x",e,t,n),a=r.unique(s);return[a.values,a.indices]}case"UniqueV2":{const s=pp("x",e,t,n),a=pp("axis",e,t,n),o=r.unique(s,a);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"ResizeBilinear":{const s=pp("images",e,t,n),a=pp("size",e,t,n),o=pp("alignCorners",e,t,n),i=pp("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(s,[a[0],a[1]],o,i)]}case"ResizeNearestNeighbor":{const s=pp("images",e,t,n),a=pp("size",e,t,n),o=pp("alignCorners",e,t,n),i=pp("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(s,[a[0],a[1]],o,i)]}case"CropAndResize":{const s=pp("image",e,t,n),a=pp("boxes",e,t,n),o=pp("boxInd",e,t,n),i=pp("cropSize",e,t,n),u=pp("method",e,t,n),l=pp("extrapolationValue",e,t,n);return[r.image.cropAndResize(s,a,o,i,u,l)]}case"ImageProjectiveTransformV3":{const s=pp("images",e,t,n),a=pp("transforms",e,t,n),o=pp("outputShape",e,t,n),i=pp("fillValue",e,t,n),u=pp("interpolation",e,t,n),l=pp("fillMode",e,t,n);return[r.image.transform(s,a,u.toLowerCase(),l.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=pp("default",e,t,n);return[hp(e.name,t,n)||s];case"Placeholder":return[hp(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[xp(pp("x",e,t,n))];case"IdentityN":return pp("x",e,t,n).map((e=>xp(e)));case"Shape":return[r.tensor1d(pp("x",e,t,n).shape,"int32")];case"ShapeN":return pp("x",e,t,n).map((e=>r.tensor1d(e.shape)));case"Size":return[r.scalar(pp("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(pp("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const a=pp("x",e,t,n),o=pp("data",e,t,n),i=pp("message",e,t,n),u=pp("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"Equal":return[r.equal(pp("a",e,t,n),pp("b",e,t,n))];case"NotEqual":return[r.notEqual(pp("a",e,t,n),pp("b",e,t,n))];case"Greater":return[r.greater(pp("a",e,t,n),pp("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(pp("a",e,t,n),pp("b",e,t,n))];case"Less":return[r.less(pp("a",e,t,n),pp("b",e,t,n))];case"LessEqual":return[r.lessEqual(pp("a",e,t,n),pp("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(pp("a",e,t,n),pp("b",e,t,n))];case"LogicalNot":return[r.logicalNot(pp("a",e,t,n))];case"LogicalOr":return[r.logicalOr(pp("a",e,t,n),pp("b",e,t,n))];case"Select":case"SelectV2":return[r.where(pp("condition",e,t,n),pp("a",e,t,n),pp("b",e,t,n))];case"BitwiseAnd":return[r.bitwiseAnd(pp("a",e,t,n),pp("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(pp("a",e,t,n),pp("b",e,t,n),pp("transposeA",e,t,n),pp("transposeB",e,t,n))];case"Einsum":return[r.einsum(pp("equation",e,t,n),...pp("tensors",e,t,n))];case"Transpose":return[r.transpose(pp("x",e,t,n),pp("perm",e,t,n))];case"_FusedMatMul":const[s,a]=pp("fusedOps",e,t,n),o="biasadd"===s,i="prelu"===a,u=pp("numArgs",e,t,n),l=pp("leakyreluAlpha",e,t,n);if(o){if(i&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,p]=pp("args",e,t,n);return[r.fused.matMul({a:pp("a",e,t,n),b:pp("b",e,t,n),transposeA:pp("transposeA",e,t,n),transposeB:pp("transposeB",e,t,n),bias:c,activation:a,preluActivationWeights:p,leakyreluAlpha:l})];case"MatrixBandPart":return[r.linalg.bandPart(pp("a",e,t,n),pp("numLower",e,t,n),pp("numUpper",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(pp("x",e,t,n),pp("axis",e,t,n),pp("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(pp("x",e,t,n),pp("mean",e,t,n),pp("variance",e,t,n),pp("offset",e,t,n),pp("scale",e,t,n),pp("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(pp("x",e,t,n),pp("radius",e,t,n),pp("bias",e,t,n),pp("alpha",e,t,n),pp("beta",e,t,n))];case"Softmax":return[r.softmax(pp("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(pp("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"ragged":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"RaggedGather":{const{outputNestedSplits:s,outputDenseValues:a}=r.raggedGather(pp("paramsNestedSplits",e,t,n),pp("paramsDenseValues",e,t,n),pp("indices",e,t,n),pp("outputRaggedRank",e,t,n));return s.concat(a)}case"RaggedRange":{const{rtNestedSplits:s,rtDenseValues:a}=r.raggedRange(pp("starts",e,t,n),pp("limits",e,t,n),pp("splits",e,t,n));return[s,a]}case"RaggedTensorToTensor":return[r.raggedTensorToTensor(pp("shape",e,t,n),pp("values",e,t,n),pp("defaultValue",e,t,n),pp("rowPartitionTensors",e,t,n),pp("rowPartitionTypes",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"Max":{const s=pp("axis",e,t,n),a=pp("keepDims",e,t,n);return[r.max(pp("x",e,t,n),s,a)]}case"Mean":{const s=pp("axis",e,t,n),a=pp("keepDims",e,t,n);return[r.mean(pp("x",e,t,n),s,a)]}case"Min":{const s=pp("axis",e,t,n),a=pp("keepDims",e,t,n);return[r.min(pp("x",e,t,n),s,a)]}case"Sum":{const s=pp("axis",e,t,n),a=pp("keepDims",e,t,n);return[r.sum(pp("x",e,t,n),s,a)]}case"All":{const s=pp("axis",e,t,n),a=pp("keepDims",e,t,n);return[r.all(pp("x",e,t,n),s,a)]}case"Any":{const s=pp("axis",e,t,n),a=pp("keepDims",e,t,n);return[r.any(pp("x",e,t,n),s,a)]}case"ArgMax":{const s=pp("axis",e,t,n);return[r.argMax(pp("x",e,t,n),s)]}case"ArgMin":{const s=pp("axis",e,t,n);return[r.argMin(pp("x",e,t,n),s)]}case"Prod":{const s=pp("axis",e,t,n),a=pp("keepDims",e,t,n);return[r.prod(pp("x",e,t,n),s,a)]}case"Cumprod":{const s=pp("axis",e,t,n),a=pp("exclusive",e,t,n),o=pp("reverse",e,t,n);return[r.cumprod(pp("x",e,t,n),s,a,o)]}case"Cumsum":{const s=pp("axis",e,t,n),a=pp("exclusive",e,t,n),o=pp("reverse",e,t,n);return[r.cumsum(pp("x",e,t,n),s,a,o)]}case"Bincount":const s=pp("x",e,t,n),a=pp("weights",e,t,n),o=pp("size",e,t,n);return[r.bincount(s,a,o)];case"DenseBincount":{const s=pp("x",e,t,n),a=pp("weights",e,t,n),o=pp("size",e,t,n),i=pp("binaryOutput",e,t,n);return[r.denseBincount(s,a,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=pp("n",e,t,n),a=pp("axis",e,t,n);let o=pp("tensors",e,t,n);return o=o.slice(0,s),[r.concat(o,a)]}case"Gather":{const s=pp("x",e,t,n),a=pp("indices",e,t,n);return[r.gather(s,r.cast(a,"int32"),0)]}case"GatherV2":{const s=pp("axis",e,t,n),a=pp("batchDims",e,t,n),o=pp("x",e,t,n),i=pp("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),s,a)]}case"Reverse":{const s=pp("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const o=pp("x",e,t,n);return[r.reverse(o,a)]}case"ReverseV2":{const s=pp("axis",e,t,n),a=pp("x",e,t,n);return[r.reverse(a,s)]}case"Slice":{const s=pp("begin",e,t,n),a=pp("size",e,t,n);return[r.slice(pp("x",e,t,n),s,a)]}case"StridedSlice":{const s=pp("begin",e,t,n),a=pp("end",e,t,n),o=pp("strides",e,t,n),i=pp("beginMask",e,t,n),u=pp("endMask",e,t,n),l=pp("ellipsisMask",e,t,n),c=pp("newAxisMask",e,t,n),p=pp("shrinkAxisMask",e,t,n),h=pp("x",e,t,n);return[r.stridedSlice(h,s,a,o,i,u,l,c,p)]}case"Pack":return _n((()=>{const s=pp("axis",e,t,n),a=pp("tensors",e,t,n),o=a[0].shape,i=r.squeeze(a[0]).shape,u=a.map((e=>{const t=P(e.shape,o);if(!t&&!P(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)}));return[r.stack(u,s)]}));case"Unpack":{const s=pp("axis",e,t,n),a=pp("tensor",e,t,n);return r.unstack(a,s)}case"Tile":{const s=pp("reps",e,t,n);return[r.tile(pp("x",e,t,n),s)]}case"Split":case"SplitV":{const s=pp("axis",e,t,n),a=pp("numOrSizeSplits",e,t,n),o=pp("x",e,t,n);return r.split(o,a,s)}case"ScatterNd":{const s=pp("indices",e,t,n),a=pp("values",e,t,n),o=pp("shape",e,t,n);return[r.scatterND(s,a,o)]}case"GatherNd":{const s=pp("x",e,t,n),a=pp("indices",e,t,n);return[r.gatherND(s,a)]}case"SparseToDense":{const s=pp("sparseIndices",e,t,n),a=pp("outputShape",e,t,n),o=pp("sparseValues",e,t,n),i=pp("defaultValue",e,t,n);return[r.sparseToDense(s,o,a,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}case"TensorScatterUpdate":{const s=pp("indices",e,t,n),a=pp("values",e,t,n),o=pp("tensor",e,t,n);return[r.tensorScatterUpdate(o,s,a)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:a,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows(pp("indices",e,t,n),pp("values",e,t,n),pp("denseShape",e,t,n),pp("defaultValue",e,t,n));return[s,a,o,i]}case"SparseReshape":{const{outputIndices:s,outputShape:a}=r.sparse.sparseReshape(pp("inputIndices",e,t,n),pp("inputShape",e,t,n),pp("newShape",e,t,n));return[s,a]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(pp("data",e,t,n),pp("indices",e,t,n),pp("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(pp("data",e,t,n),pp("indices",e,t,n),pp("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"FFT":return[r.fft(pp("x",e,t,n))];case"IFFT":return[r.ifft(pp("x",e,t,n))];case"RFFT":return[r.rfft(pp("x",e,t,n))];case"IRFFT":return[r.irfft(pp("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"StaticRegexReplace":return[r.string.staticRegexReplace(pp("input",e,t,n),pp("pattern",e,t,n),pp("rewrite",e,t,n),pp("replaceGlobal",e,t,n))];case"StringNGrams":{const{nGrams:s,nGramsSplits:a}=r.string.stringNGrams(pp("data",e,t,n),pp("dataSplits",e,t,n),pp("separator",e,t,n),pp("nGramWidths",e,t,n),pp("leftPad",e,t,n),pp("rightPad",e,t,n),pp("padWidth",e,t,n),pp("preserveShortSequences",e,t,n));return[s,a]}case"StringSplit":{const{indices:s,values:a,shape:o}=r.string.stringSplit(pp("input",e,t,n),pp("delimiter",e,t,n),pp("skipEmpty",e,t,n));return[s,a,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(pp("input",e,t,n),pp("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return s((()=>((e,t,n,r=I)=>{switch(e.op){case"Cast":return[r.cast(pp("x",e,t,n),pp("dtype",e,t,n))];case"ExpandDims":{const s=pp("axis",e,t,n);return[r.expandDims(pp("x",e,t,n),s)]}case"Squeeze":{const s=pp("axis",e,t,n);return[r.squeeze(pp("x",e,t,n),s)]}case"Reshape":return[r.reshape(pp("x",e,t,n),pp("shape",e,t,n))];case"EnsureShape":return[r.ensureShape(pp("x",e,t,n),pp("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(pp("x",e,t,n),pp("padding",e,t,n),pp("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(pp("x",e,t,n),pp("padding",e,t,n),pp("constantValue",e,t,n))];case"SpaceToBatchND":{const s=pp("blockShape",e,t,n),a=pp("paddings",e,t,n);return[r.spaceToBatchND(pp("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=pp("blockShape",e,t,n),a=pp("crops",e,t,n);return[r.batchToSpaceND(pp("x",e,t,n),s,a)]}case"DepthToSpace":{const s=pp("blockSize",e,t,n),a=pp("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(pp("x",e,t,n),s,a)]}case"BroadcastTo":return[r.broadcastTo(pp("x",e,t,n),pp("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(pp("s0",e,t,n),pp("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=r.getHashTableHandleByName(e.name);if(null!=s)return[s];{const s=pp("keyDType",e,t,n),a=pp("valueDType",e,t,n),o=new uh(s,a);return r.addHashTable(e.name,o),[o.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const s=pp("tableHandle",e,t,n,r),a=pp("keys",e,t,n),o=pp("values",e,t,n),i=r.getHashTableById(s.id);return[await i.import(a,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=pp("tableHandle",e,t,n,r),a=pp("keys",e,t,n),o=pp("defaultValue",e,t,n),i=r.getHashTableById(s.id);return[await i.find(a,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=pp("tableHandle",e,t,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=cp(e.op);if(a&&a.customExecutor)return a.customExecutor(new Jp(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op \'${e.op}\'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return ie(a)?a.then((e=>[].concat(e))):[].concat(a)}class ch{constructor(e={},t={},n={},r={},s){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.parseNodeNameCache=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function ph(e,t,n,r){const s=new Set,a=[];let o=null,i=null;const u=new Set,l=new Set(Object.keys(e).map((e=>gp(e)[0])));r=r||[];const c=new Set(r.map((e=>gp(e.name)[0]))),p=[...t];for(;p.length>0;){const e=p.pop();(gh(e)||yh(e)||xh(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==n[e.name]&&(l.has(e.name)||c.has(e.name)||(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),p.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:o,syncInputs:i}}class hh extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}}const dh=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),fh=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),mh=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function gh(e){return dh.has(e.op)}function yh(e){return fh.has(e.op)}function xh(e){return mh.has(e.op)}class bh{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new bh(e.functions[t],this)}))}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPARATOR)+"--"+r.join(this.SEPARATOR)}compile(e,t){const n=ph(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node \'${s.name}\', which has the dynamic op \'${s.op}\'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}const o=function(e,t){const{usedNodes:n,inputs:r}=t,s=Object.keys(r).map((e=>gp(e)[0])).map((t=>e.nodes[t])),a=e.initNodes||[],o=e=>n.has("string"==typeof e?e:e.name);function i(e){return[...new Map(e.map((e=>[e.name,e]))).values()]}const u=i([...s,...e.weights,...a]).filter(o),l=i([...u,...Object.values(e.nodes)]).filter(o),c=new Map(l.map((e=>[e.name,e]))),p={};for(const e of l){p[e.name]=p[e.name]||0;for(const t of e.children)o(t)||(p[t.name]=Number.POSITIVE_INFINITY),p[t.name]=(p[t.name]||0)+1}const h=Object.entries(p).filter((([,e])=>0===e)).map((([e])=>e)),d=[...h];for(;h.length>0;){const e=h.pop(),t=c.get(e);for(const e of t.children.filter(o))0==--p[e.name]&&(d.push(e.name),h.push(e.name))}const f=function(e,t){const n=new Map(e.map((e=>[e.name,e]))),r=t.map((e=>e.name)),s=new Set(r);for(;r.length>0;){const e=r.pop(),t=n.get(e);for(const e of t.children)n.has(e.name)&&!s.has(e.name)&&(s.add(e.name),r.push(e.name))}return e.filter((e=>s.has(e.name)))}(d.map((e=>c.get(e))),u);return function(e,t){const n=new Map(e.map(((e,t)=>[e.name,t]))),r=new Set(t.map((e=>e.name))),s=e=>r.has("string"==typeof e?e:e.name),a=new Set(e.map((e=>e.name))),o=e=>a.has("string"==typeof e?e:e.name);for(const t of e){for(const e of t.children.filter(o)){if(!n.has(e.name))throw new hh(`Child ${e.name} of node ${t.name} is unreachable.`);if(n.get(t.name)>n.get(e.name))throw new hh(`Node ${t.name} is scheduled to run after its child ${e.name}.`)}if(!s(t))for(const e of t.inputs){if(!n.has(e.name))throw new hh(`Input ${e.name} of node ${t.name} is unreachable.`);if(n.get(e.name)>n.get(t.name))throw new hh(`Node ${t.name} is scheduled to run before its input ${e.name}.`)}}}(f,u),f}(this.graph,n),i=function(e){const t=new Map(e.map(((e,t)=>[e.name,t]))),n=Number.MAX_SAFE_INTEGER,r=e.map(((e,t)=>gh(e)?n:t)),s=e=>{const n=r[t.get(e.name)];return null==n?-1:n},a=e.map(((e,t)=>e.children.map(s).reduce(((e,t)=>Math.max(e,t)),r[t]))),o=new Map;for(let t=0;t<e.length;++t){const r=a[t];if(r===n)continue;const s=e[t],i=e[r];o.has(i.name)||o.set(i.name,[]),o.get(i.name).push(s)}return o}(o);return{orderedNodes:o,nodeLiveUntilMap:i}}cloneAndKeepTensor(e){if(null==e)return null;const t=e.clone();return An(t),t}cloneTensorList(e){if(!e)return null;const t=e.map((e=>this.cloneAndKeepTensor(e)));return t}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map((([e,t])=>[e,this.cloneTensorList(t)])))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[gp(e)[0]])),s=t.map((e=>gp(e)[0])),a=new Set(s);let o=s.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const i=this.getCompilationKey(r,o);let u=this.compiledMap.get(i);null==u&&(u=this.compile(e,o),this.compiledMap.set(i,u));try{this.keepIntermediateTensors=pe().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const l={},c={};return _n((()=>{const n=new ch(this.weightMap,l,c,this.functionExecutorMap,this.parseNodeNameCache),r=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach((t=>{const[s,a]=gp(t,n),o=[];o[a]=e[t],r[s]=o,this.keepIntermediateTensors&&(this.clonedTensorsMap[s]=this.cloneTensorList(o))}));const s=this.getFrozenTensorIds(r),{orderedNodes:o,nodeLiveUntilMap:i}=u;for(const e of o){if(r[e.name])continue;const t=lh(e,r,n,this._resourceManager);if(ie(t))throw new Error(`The execution of the op \'${e.op}\' returned a promise. Please use model.executeAsync() instead.`);r[e.name]=t,this.keepIntermediateTensors&&(this.clonedTensorsMap[e.name]=this.cloneTensorList(t)),this.checkTensorForDisposalWithNodeLiveUntilInfo(e,r,n,s,a,i.get(e.name))}return null==this.parent&&n.dispose(s),t.map((e=>hp(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,o){if(!gh(t)&&!a.has(e)){for(const r of n[e])null!=r&&(o[r.id]=(o[r.id]||0)+t.children.length);for(const e of t.inputs){if(gh(e))continue;const t=dp(e.name,n,r);if(null!=t)for(const e of t){if(!e||e.kept||s.has(e.id))continue;const t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,n,r,s,a){function o(e){return gh(e)||s.has(e.name)}if(!gh(e)&&null!=a)for(const e of a){if(o(e))continue;const s=dp(e.name,t,n);for(const e of s)!e||e.kept||r.has(e.id)||e.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach((e=>{for(const t of e)t&&!t.isDisposed&&t.dispose()})),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,n=!1,r={},s={}){this.disposeIntermediateTensors(),n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=pe().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const a=new ch(this.weightMap,r,s,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const o=await this.executeWithControlFlow(e,a,t,n),i=t.map((e=>hp(e,o,a))),u=i.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id)),c=new Set([...u,...l,...this.weightIds]);return Object.values(o).forEach((e=>{e.forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),i}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map((e=>this.graph.nodes[gp(e)[0]])),o=n.map((e=>gp(e)[0])),i=new Set(o);let u=o.map((e=>this.graph.nodes[e]));0===u.length&&(u=this._outputs);const{usedNodes:l,missingInputs:c,dynamicNode:p,syncInputs:h}=ph(e,u,this.weightMap,this._initNodes),d=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),f=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=gp(t),s=[];s[r]=e[t],f[n]=s}));const m={},g=this.getFrozenTensorIds(f),y={};for(;d.length>0;){const e=this.processStack(a,d,t,f,y,g,i,m,l);await Promise.all(e)}null!=p||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const x=u.filter((e=>!gh(e)&&!hp(e.name,f,t))).map((e=>e.name));if(x.length>0){let e="";throw null!=p&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${x}] from the provided inputs [${s}]. Consider providing the following inputs: [${c}]. ${e}`)}return f}processStack(e,t,n,r,s,a,o,i,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&pp("isConstant",e.node,r,n)&&([c]=fp(e.node.name,n)),null==r[e.node.name]){const p=lh(e.node,r,n,this._resourceManager);c||([c]=fp(e.node.name,n));const h=n.currentContext;ie(p)?l.push(p.then((l=>(r[c]=l,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(l)),n.currentContext=h,this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,u),l)))):(r[c]=p,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(p)),this.checkTensorForDisposal(c,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,u))}else this.processChildNodes(e.node,t,n,r,s,u)}return l}processChildNodes(e,t,n,r,s,a){e.children.forEach((e=>{const[o]=fp(e.name,n);!s[o]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!hp(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!hp(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=gp(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value;M(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict[\'${s.name}\'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&M(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict[\'${s.name}\'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){var t,n;const r={};for(const s in e){const a=null===(n=null===(t=this._signature)||void 0===t?void 0:t.inputs)||void 0===n?void 0:n[s];null!=a?r[a.name]=e[s]:r[s]=e[s]}return r}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=gp(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{var t,n;const r=null===(n=null===(t=this._signature)||void 0===t?void 0:t.outputs)||void 0===n?void 0:n[e];return null!=r?r.name:e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=gp(e);if(!this.graph.nodes[t])throw new Error(`The output \'${e}\' is not found in the graph`)}))}}class wh{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class vh{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},n=r){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new wh}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL \'${[e]}\'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return ie(e)?e.then((e=>null==e.getWeightStream?this.loadSync(e):this.loadStreaming(e))):this.loadSync(e)}loadSync(e){const t=this.io.decodeWeights(e.weightData,e.weightSpecs);return this.loadWithWeightMap(e,t)}async loadStreaming(e){if(null==e.getWeightStream)throw new Error("Model artifacts missing streamWeights function");const t=await Vn(e.getWeightStream(),e.weightSpecs);return this.loadWithWeightMap(e,t)}loadWithWeightMap(e,t){this.artifacts=e;const n=this.artifacts.modelTopology;let r=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(r=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}if(this.signature=r,this.version=`${n.versions.producer}.${n.versions.minConsumer}`,this.executor=new bh(Bp.Instance.transformGraph(n,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(t),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Bp.Instance.transformGraph(e.modelInitializer);this.initializer=new bh(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL \'${e}\'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL \'${e}\'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){const t={};return(e instanceof Ht?[e]:e).forEach(((e,n)=>t[this.structuredOutputKeys[n]]=e)),t}return e}predict(e,t){const n=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(e,t){const n=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(e){var t;if(!(e instanceof Ht||Array.isArray(e))){const n=null===(t=this.signature)||void 0===t?void 0:t.inputs;if(null!=n)for(const t in n){const r=n[t];null!=r.resourceId&&(e[t]=this.resourceIdToCapturedInput[r.resourceId])}return e}e=Array.isArray(e)?e:[e];const n=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+n!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-n} non-resource placeholders, while there are ${e.length} input tensors provided.`);let r=0;return this.inputNodes.reduce(((t,n)=>{var s,a,o;const i=null===(o=null===(a=null===(s=this.signature)||void 0===s?void 0:s.inputs)||void 0===a?void 0:a[n])||void 0===o?void 0:o.resourceId;return t[n]=null!=i?this.resourceIdToCapturedInput[i]:e[r++],t}),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){const t=this.initializerSignature.outputs,n=Object.keys(t);for(let r=0;r<n.length;r++){const s=t[n[r]];this.resourceIdToCapturedInput[s.resourceId]=e[r]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&Cn(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function Th(e,t={},n=r){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){return e.endsWith("/")||(e+="/"),`${e}model.json?tfjs-format=file`}(e));const s=new vh(e,t,n);return await s.load(),s}const Sh={},Eh={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Nh(e,t){if(!(e in Sh)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if(pe().getBool("IS_SAFARI")||"undefined"==typeof OffscreenCanvas||2!==e){if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}return new OffscreenCanvas(300,150)}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete Sh[e]}),!1),pe().getBool("SOFTWARE_WEBGL_ENABLED")&&(Eh.failIfMajorPerformanceCaveat=!1),1===e?n.getContext("webgl",Eh)||n.getContext("experimental-webgl",Eh):n.getContext("webgl2",Eh)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;Sh[e]=n}const n=Sh[e];return null==n||n.isContextLost()?(delete Sh[e],Nh(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),Sh[e])}var $h,Ih,kh;function _h(e,t){return[t,e]}function Ch(e){const t=B(e);return V(Math.ceil(t/4))}function Ah(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function Rh(e,t){const n=e;let r,s,a,o,i,u,l,c,p,h;return 2===pe().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,o=n.RGBA32F,i=n.RED,l=4,c=1,p=n.HALF_FLOAT,h=n.FLOAT,u=n.RGBA8):(r=e.RGBA,s=e.RGBA,a=e.RGBA,o=n.RGBA,i=e.RGBA,l=4,c=4,p=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT,u=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:h}}function Oh(e,t){const n=t();return pe().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function Dh(e){return!!(pe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function Mh(e,t){return Gh(e,(()=>e.getExtension(t)),\'Extension "\'+t+\'" not supported on this browser.\')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}($h||($h={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(Ih||(Ih={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(kh||(kh={}));const Fh=/ERROR: [0-9]+:([0-9]+):/g;function Lh(e,t){const n=Fh.exec(t);if(null==n)return console.log(`Couldn\'t parse line number in error: ${t}`),void console.log(e);const r=+n[1],s=e.split("\\n"),a=s.length.toString().length+2,o=s.map(((e,t)=>W((t+1).toString(),a)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const u=o.slice(0,r-1),l=o.slice(r-1,r),c=o.slice(r);console.log(u.join("\\n")),console.log(t.split("\\n")[0]),console.log(`%c ${W(l[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\\n"))}function Bh(e,t){if(Oh(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Ph(e,t,n,r,s,a,o){const i=e.getAttribLocation(t,n);return-1!==i&&(Oh(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),Oh(e,(()=>e.vertexAttribPointer(i,s,e.FLOAT,!1,a,o))),Oh(e,(()=>e.enableVertexAttribArray(i))),!0)}function Uh(e,t,n,r){Oh(e,(()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),Oh(e,(()=>e.activeTexture(e.TEXTURE0+n))),Oh(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),Oh(e,(()=>e.uniform1i(n,r)))}function Vh(e,t,n){Oh(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),Oh(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function Wh(e,t){Oh(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),Oh(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function zh(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function Gh(e,t,n){const r=Oh(e,(()=>t()));if(null==r)throw new Error(n);return r}function Hh(e,t=2){return B(e.slice(0,e.length-t))}function Kh(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function jh(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Hh(e),...Kh(e)]),t}function qh(e){return e%2==0}function Xh(e,t){if(P(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e[e.length-1],r=t[t.length-1];if(n===r)return!0;if(qh(n)&&qh(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&qh(e[0])&&qh(t[0])}let Yh,Qh;function Zh(e,t){return null!=e.getExtension(t)}function Jh(e){try{if(null!=Nh(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function ed(e){const t=Rh(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}const td=pe();function nd(){let e,t,n,r,s,a,o,i,u,l;return 2===pe().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",o="out vec4 outputColor;",i=pe().getBool("WEBGL2_ISNAN_CUSTOM")?"\\n      bool isnan_custom(float val) {\\n        uint floatToUint = floatBitsToUint(val);\\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\\n      }\\n\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan_custom(val.x),\\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\\n      }\\n\\n      #define isnan(value) isnan_custom(value)\\n    ":"",u="",l="\\n      #define round(value) newRound(value)\\n      int newRound(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 newRound(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",o="",i="\\n      #define isnan(value) isnan_custom(value)\\n      bool isnan_custom(float val) {\\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\\n      }\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\\n      }\\n    ",u="\\n      uniform float INFINITY;\\n\\n      bool isinf(float val) {\\n        return abs(val) == INFINITY;\\n      }\\n      bvec4 isinf(vec4 val) {\\n        return equal(abs(val), vec4(INFINITY));\\n      }\\n    ",l="\\n      int round(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 round(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:u,defineRound:l}}function rd(e,t,n="index"){const r=J(t);return r.map(((t,s)=>`int ${e[s]} = ${n} / ${t}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${t}`:`index -= ${e[s]} * ${t}`};`)).join("")}function sd(e,t,n="index"){const r=J(t);return r.map(((t,s)=>`int ${e[s]} = ${n} / outShapeStrides[${s}]; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * outShapeStrides[${s}]`:`index -= ${e[s]} * outShapeStrides[${s}]`};`)).join("")}function ad(e){const t=J(e).map((e=>e.toString()));return`\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\\n  }\\n`}td.registerFlag("HAS_WEBGL",(()=>td.getNumber("WEBGL_VERSION")>0)),td.registerFlag("WEBGL_VERSION",(()=>Jh(2)?2:Jh(1)?1:0)),td.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),td.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===td.get("WEBGL_VERSION"))),td.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),td.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),td.registerFlag("WEBGL_PACK",(()=>td.getBool("HAS_WEBGL"))),td.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>td.getBool("WEBGL_PACK"))),td.registerFlag("WEBGL_PACK_CLIP",(()=>td.getBool("WEBGL_PACK"))),td.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>td.getBool("WEBGL_PACK"))),td.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>td.getBool("WEBGL_PACK"))),td.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>td.getBool("WEBGL_PACK"))),td.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>td.getBool("WEBGL_PACK"))),td.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>td.getBool("WEBGL_PACK"))),td.registerFlag("WEBGL_PACK_REDUCE",(()=>td.getBool("WEBGL_PACK"))),td.registerFlag("WEBGL_LAZILY_UNPACK",(()=>td.getBool("WEBGL_PACK"))),td.registerFlag("WEBGL_CONV_IM2COL",(()=>td.getBool("WEBGL_PACK"))),td.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",(()=>td.getBool("WEBGL_PACK"))),td.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==Yh){const t=Nh(e);Yh=t.getParameter(t.MAX_TEXTURE_SIZE)}return Yh}(td.getNumber("WEBGL_VERSION")))),td.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==Qh){const t=Nh(e);Qh=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Qh)}(td.getNumber("WEBGL_VERSION")))),td.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=td.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=Nh(e);return t=Zh(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:Zh(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),td.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>td.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!dn())),td.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=Nh(e);if(1===e){if(!Zh(t,"OES_texture_float"))return!1}else if(!Zh(t,"EXT_color_buffer_float"))return!1;return ed(t)}(td.getNumber("WEBGL_VERSION")))),td.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!td.getBool("WEBGL_FORCE_F16_TEXTURES")&&td.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),td.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const t=Nh(e);if(1!==e){if(Zh(t,"EXT_color_buffer_float"))return ed(t);const e="EXT_color_buffer_half_float";if(Zh(t,e)){const n=t.getExtension(e);return function(e,t){const n=Rh(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(s),a}(t,n)}return!1}return!!Zh(t,"OES_texture_float")&&!!Zh(t,"WEBGL_color_buffer_float")&&ed(t)}(td.getNumber("WEBGL_VERSION")))),td.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=td.getNumber("WEBGL_VERSION"))&&null!=Nh(e).fenceSync;var e})),td.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>td.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),td.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if("number"!=typeof e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),td.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>dn()?1:-1),(e=>{if("number"!=typeof e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),td.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),td.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),td.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),td.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),td.registerFlag("WEBGL_EXP_CONV",(()=>!1)),td.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>td.getBool("IS_TEST"))),td.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),td.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),td.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1)),td.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));const od="\\n  const float FLOAT_MAX = 1.70141184e38;\\n  const float FLOAT_MIN = 1.17549435e-38;\\n\\n  lowp vec4 encode_float(highp float v) {\\n    if (isnan(v)) {\\n      return vec4(255, 255, 255, 255);\\n    }\\n\\n    highp float av = abs(v);\\n\\n    if(av < FLOAT_MIN) {\\n      return vec4(0.0, 0.0, 0.0, 0.0);\\n    } else if(v > FLOAT_MAX) {\\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n    } else if(v < -FLOAT_MAX) {\\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n    }\\n\\n    highp vec4 c = vec4(0,0,0,0);\\n\\n    highp float e = floor(log2(av));\\n    highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n    c[2] = floor(128.0 * m);\\n    m -= c[2] / 128.0;\\n    c[1] = floor(32768.0 * m);\\n    m -= c[1] / 32768.0;\\n    c[0] = floor(8388608.0 * m);\\n\\n    highp float ebias = e + 127.0;\\n    c[3] = floor(ebias / 2.0);\\n    ebias -= c[3] * 2.0;\\n    c[2] += floor(ebias) * 128.0;\\n\\n    c[3] += 128.0 * step(0.0, -v);\\n\\n    return c / 255.0;\\n  }\\n",{getBroadcastDims:id}=i;function ud(e,t,n){const r=[];if(e.forEach((e=>{const t=B(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=xd(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const s=r.join("\\n"),a=e.map((e=>function(e,t,n=!1,r){let s="";s+=n?cd(e,r):ld(e,r);const a=e.shapeInfo.logicalShape,o=t.logicalShape;return a.length<=o.length&&(s+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=id(e.shapeInfo.logicalShape,t.logicalShape),u=yd(o),l=o-a;let c;const p=["x","y","z","w","u","v"];c=0===a?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${p[e+l]} = 0;`)).join("\\n");let h="";h=o<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+l]}`)).join(", ");let d="return outputValue;";const f=1===B(e.shapeInfo.logicalShape),m=1===B(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===o?"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      ":"\\n        return vec4(outputValue.x);\\n      ";else if(i.length){const e=a-2,t=a-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?d="return vec4(outputValue.x);":i.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\\n      return vec4(outputValue.xy, outputValue.xy);\\n    ";return`\\n    vec4 ${s}() {\\n      ${u} coords = getOutputCoords();\\n      ${c}\\n      vec4 outputValue = get${r}(${h});\\n      ${d}\\n    }\\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===u&&null==e.shapeInfo.flatOffset&&P(o,a))return`\\n      float ${s}() {\\n        return sampleTexture(${n}, resultUV);\\n      }\\n    `;const l=yd(u),c=id(e.shapeInfo.logicalShape,t.logicalShape),p=u-i;let h;const d=["x","y","z","w","u","v"];h=0===i?"":u<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+p]} = 0;`)).join("\\n");let f="";return f=u<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+p]}`)).join(", "),`\\n    float ${s}() {\\n      ${l} coords = getOutputCoords();\\n      ${h}\\n      return get${r}(${f});\\n    }\\n  `}(e,t)),s}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\\n"),o=t.texShape,i=nd(),u=function(e){return`\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return ${e.texture2D}(textureSampler, uv).r;\\n    }\\n  `}(i);let l,c,p=function(e){return`${e.version}\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    ${e.varyingFs} vec2 resultUV;\\n    ${e.defineOutput}\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    ${e.defineSpecialNaN}\\n    ${e.defineSpecialInf}\\n    ${e.defineRound}\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    ${pd}\\n    ${hd}\\n    ${dd}\\n  `}(i);return t.isPacked?(l=function(e,t,n){switch(e.length){case 0:return"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  ";case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===r[0]?n?"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\\n      }\\n    ":`\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * ${r[1]}.0);\\n      }\\n    `:1===r[1]?n?"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\\n      }\\n    ":`\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * ${r[0]}.0);\\n      }\\n    `:n?"\\n    int getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\\n    }\\n  ":`\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${r[0]}, ${r[1]}));\\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\\n    }\\n  `}(0,t,n);case 2:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(P(e,t))return n?"\\n      ivec2 getOutputCoords() {\\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\\n      }\\n    ":`\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\\n      }\\n    `;const s=Math.ceil(e[1]/2);return n?"\\n    ivec2 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  ":`\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${r[0]}, ${r[1]}));\\n\\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\\n      int r = 2 * (index / ${s});\\n      int c = imod(index, ${s}) * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\\n    ivec3 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n\\n      int b = index / texelsInBatch;\\n      index -= b * texelsInBatch;\\n\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),a=s*Math.ceil(e[1]/2);return`\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${r[0]}, ${r[1]}));\\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\\n\\n      int b = index / ${a};\\n      index -= b * ${a};\\n\\n      int r = 2 * (index / ${s});\\n      int c = imod(index, ${s}) * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\\n    ivec4 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n\\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\\n      int texelsInBatchN = texelsInBatch * outShape[1];\\n\\n      int b2 = index / texelsInBatchN;\\n      index -= b2 * texelsInBatchN;\\n\\n      int b = index / texelsInBatch;\\n      index -= b * texelsInBatch;\\n\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec4(b2, b, r, c);\\n    }\\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),a=s*Math.ceil(e[e.length-2]/2);let o=a,i="",u="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\\n      int b${t} = index / ${o};\\n      index -= b${t} * ${o};\\n    `+i,u=`b${t}, `+u;return`\\n    ivec${e.length} getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${r[0]}, ${r[1]}));\\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\\n\\n      ${i}\\n\\n      int b = index / ${a};\\n      index -= b * ${a};\\n\\n      int r = 2 * (index / ${s});\\n      int c = imod(index, ${s}) * 2;\\n\\n      return ivec${e.length}(${u});\\n    }\\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\\n    void setOutput(vec4 val) {\\n      ${e.output} = val;\\n    }\\n  `}(i)):(l=function(e,t,n){switch(e.length){case 0:return"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\\n      int getOutputCoords() {\\n        return int(resultUV.x * float(outTexShape[1]));\\n      }\\n    ":`\\n      int getOutputCoords() {\\n        return int(resultUV.x * ${t[1]}.0);\\n      }\\n    `:1===t[1]?n?"\\n      int getOutputCoords() {\\n        return int(resultUV.y * float(outTexShape[0]));\\n      }\\n    ":`\\n      int getOutputCoords() {\\n        return int(resultUV.y * ${t[0]}.0);\\n      }\\n    `:n?"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(outTexShape[0], outTexShape[1]));\\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\\n    }\\n  ":`\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${t[0]}, ${t[1]}));\\n      return resTexRC.x * ${t[1]} + resTexRC.y;\\n    }\\n  `}(0,t,n);case 2:return function(e,t,n){return P(e,t)?n?"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\\n      }\\n    ":`\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\\n      }\\n    `:1===e[1]?n?"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(outTexShape[0], outTexShape[1]));\\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    ":`\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(${t[0]}, ${t[1]}));\\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    `:1===e[0]?n?"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(outTexShape[0], outTexShape[1]));\\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    ":`\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(${t[0]}, ${t[1]}));\\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    `:n?"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(outTexShape[0], outTexShape[1]));\\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n      int r = index / outShape[1];\\n      int c = index - r * outShape[1];\\n      return ivec2(r, c);\\n    }\\n  ":`\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${t[0]}, ${t[1]}));\\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\\n      int r = index / ${e[1]};\\n      int c = index - r * ${e[1]};\\n      return ivec2(r, c);\\n    }\\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\\n  ivec3 getOutputCoords() {\\n    ivec2 resTexRC = ivec2(resultUV.yx *\\n                           vec2(outTexShape[0], outTexShape[1]));\\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n    ${sd(["r","c","d"],e)}\\n    return ivec3(r, c, d);\\n  }\\n`;const r=rd(["r","c","d"],e);return`\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${t[0]}, ${t[1]}));\\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\\n      ${r}\\n      return ivec3(r, c, d);\\n    }\\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(outTexShape[0], outTexShape[1]));\\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n      ${sd(["r","c","d","d2"],e)}\\n      return ivec4(r, c, d, d2);\\n    }\\n  `;const r=rd(["r","c","d","d2"],e);return`\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(${t[0]}, ${t[1]}));\\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\\n      ${r}\\n      return ivec4(r, c, d, d2);\\n    }\\n  `}(e,t,n);case 5:return function(e,t){const n=rd(["r","c","d","d2","d3"],e);return`\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\\n                             ${t[1]}));\\n\\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\\n\\n      ${n}\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  `}(e,t);case 6:return function(e,t){const n=rd(["r","c","d","d2","d3","d4"],e);return`\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(${t[0]}, ${t[1]}));\\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\\n\\n      ${n}\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\\n    void setOutput(float val) {\\n      ${e.output} = vec4(val, 0, 0, 0);\\n    }\\n  `}(i)),n.packedInputs&&(p+=fd),[p,u,c,s,l,a,n.userCode].join("\\n")}function ld(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[s,a]=e.shapeInfo.texShape;if(1===s&&1===a)return`\\n      float ${r}() {\\n        return sampleTexture(${n}, halfCR);\\n      }\\n    `;const o=md(n);if(t)return`\\n    float ${r}() {\\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\\n      return sampleTexture(${n}, uv);\\n    }\\n  `;const[i,u]=e.shapeInfo.texShape;return`\\n    float ${r}() {\\n      vec2 uv = uvFromFlat(${i}, ${u}, ${o});\\n      return sampleTexture(${n}, uv);\\n    }\\n  `}(e,t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\\n      float ${r}(int index) {\\n        ${gd(e)}\\n      }\\n    `;const s=e.shapeInfo.texShape,a=s[0],o=s[1];if(1===o&&1===a)return`\\n      float ${r}(int index) {\\n        return sampleTexture(${n}, halfCR);\\n      }\\n    `;const i=md(n);return 1===o?t?`\\n      float ${r}(int index) {\\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\\n        return sampleTexture(${n}, uv);\\n      }\\n    `:`\\n      float ${r}(int index) {\\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `:1===a?t?`\\n      float ${r}(int index) {\\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `:`\\n      float ${r}(int index) {\\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `:t?`\\n    float ${r}(int index) {\\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\\n      return sampleTexture(${n}, uv);\\n    }\\n  `:`\\n    float ${r}(int index) {\\n      vec2 uv = uvFromFlat(${a}, ${o}, index + ${i});\\n      return sampleTexture(${n}, uv);\\n    }\\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape;if(null!=a&&P(n,a)){if(t)return`\\n      float ${s}(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `;const e=a[0];return`\\n    float ${s}(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\\n      return sampleTexture(${r}, uv);\\n    }\\n  `}const{newShape:o,keptDims:i}=H(n),u=o;if(u.length<n.length){const n=["row","col"];return`\\n      ${ld(bd(e,u),t)}\\n      float ${s}(int row, int col) {\\n        return ${s}(${wd(n,i)});\\n      }\\n    `}if(e.shapeInfo.isUniform)return`\\n      float ${s}(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\\n        ${gd(e)}\\n      }\\n    `;const l=a[0],c=a[1],p=md(r);return 1===c?t?`\\n      float ${s}(int row, int col) {\\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n    float ${s}(int row, int col) {\\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\\n      return sampleTexture(${r}, uv);\\n    }\\n  `:1===l?t?`\\n      float ${s}(int row, int col) {\\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n    float ${s}(int row, int col) {\\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\\n      return sampleTexture(${r}, uv);\\n    }\\n  `:t?`\\n      float ${s}(int row, int col) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * ${r}Shape[1] + col + ${p};\\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n  float ${s}(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * ${n[1]} + col + ${p};\\n    vec2 uv = uvFromFlat(${l}, ${c}, index);\\n    return sampleTexture(${r}, uv);\\n  }\\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[1]*n[2],o=n[2],{newShape:i,keptDims:u}=H(n),l=i;if(l.length<n.length){const n=["row","col","depth"];return`\\n        ${ld(bd(e,l),t)}\\n        float ${s}(int row, int col, int depth) {\\n          return ${s}(${wd(n,u)});\\n        }\\n      `}if(e.shapeInfo.isUniform)return`\\n      float ${s}(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(${a}, ${o}, 1)));\\n        ${gd(e)}\\n      }\\n    `;const c=e.shapeInfo.texShape,p=c[0],h=c[1],d=e.shapeInfo.flatOffset;if(h===a&&null==d)return t?`\\n      float ${s}(int row, int col, int depth) {\\n        int stride1 = ${r}Shape[2];\\n        float texR = float(row);\\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n        float ${s}(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(${h}.0, ${p}.0);\\n          return sampleTexture(${r}, uv);\\n        }\\n      `;if(h===o&&null==d)return t?`\\n      float ${s}(int row, int col, int depth) {\\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\\n        float texC = float(depth);\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n    float ${s}(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${p}.0);\\n      return sampleTexture(${r}, uv);\\n    }\\n  `;const f=md(r);return t?`\\n    float ${s}(int row, int col, int depth) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\\n      int stride1 = ${r}Shape[2];\\n      int index = row * stride0 + col * stride1 + depth + ${f};\\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\\n      return sampleTexture(${r}, uv);\\n    }\\n    `:`\\n      float ${s}(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * ${a} + col * ${o} + depth + ${f};\\n        vec2 uv = uvFromFlat(${p}, ${h}, index);\\n        return sampleTexture(${r}, uv);\\n      }\\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[3],o=n[2]*a,i=n[1]*o,{newShape:u,keptDims:l}=H(n);if(u.length<n.length){const n=["row","col","depth","depth2"];return`\\n      ${ld(bd(e,u),t)}\\n      float ${s}(int row, int col, int depth, int depth2) {\\n        return ${s}(${wd(n,l)});\\n      }\\n    `}if(e.shapeInfo.isUniform)return`\\n      float ${s}(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(${i}, ${o}, ${a}, 1)));\\n        ${gd(e)}\\n      }\\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1],f=`int stride2 = ${r}Shape[3];`,m=`int stride1 = ${r}Shape[2] * stride2;`,g=`int stride0 = ${r}Shape[1] * stride1;`;if(d===i&&null==c)return t?`\\n      float ${s}(int row, int col, int depth, int depth2) {\\n        ${f}\\n        ${m}\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(stride1, stride2, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n      float ${s}(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(${o}, ${a}, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(${d}.0, ${h}.0);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `;if(d===a&&null==c)return t?`\\n      float ${s}(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n      float ${s}(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(${d}.0, ${h}.0);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `;const y=md(r);return t?`\\n    float ${s}(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      ${f}\\n      ${m}\\n      ${g}\\n      int index = row * stride0 + col * stride1 +\\n          depth * stride2 + depth2;\\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${y});\\n      return sampleTexture(${r}, uv);\\n    }\\n  `:`\\n    float ${s}(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * ${i} + col * ${o} +\\n          depth * ${a} + depth2;\\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${y});\\n      return sampleTexture(${r}, uv);\\n    }\\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[4],a=t[3]*s,o=t[2]*a,i=t[1]*o,{newShape:u,keptDims:l}=H(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\\n      ${ld(bd(e,u))}\\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\\n        return ${r}(${wd(t,l)});\\n      }\\n    `}if(e.shapeInfo.isUniform)return`\\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(${i}, ${o}, ${a}, ${s})) +\\n          depth3;\\n        ${gd(e)}\\n      }\\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],d=p[1];if(d===i&&null==c)return`\\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(${o}, ${a}, ${s}, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(${d}.0, ${h}.0);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `;if(d===s&&null==c)return`\\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(${t[1]*t[2]*t[3]},\\n               ${t[2]*t[3]}, ${t[3]}, 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(${d}.0, ${h}.0);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `;return`\\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * ${i} + col * ${o} + depth * ${a} +\\n          depth2 * ${s} + depth3 + ${md(n)};\\n      vec2 uv = uvFromFlat(${h}, ${d}, index);\\n      return sampleTexture(${n}, uv);\\n    }\\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=H(t);if(s.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\\n      ${ld(bd(e,s))}\\n      float ${r}(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return ${r}(${wd(t,a)});\\n      }\\n    `}const o=t[5],i=t[4]*o,u=t[3]*i,l=t[2]*u,c=t[1]*l;if(e.shapeInfo.isUniform)return`\\n      float ${r}(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(${c}, ${l}, ${u}, ${i})) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(${o}, 1)));\\n        ${gd(e)}\\n      }\\n    `;const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],f=h[1];if(f===c&&null==p)return`\\n      float ${r}(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(${l}, ${u}, ${i}, ${o})) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(${f}.0, ${d}.0);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `;if(f===o&&null==p)return`\\n      float ${r}(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(${t[1]*t[2]*t[3]*t[4]},\\n               ${t[2]*t[3]*t[4]},\\n               ${t[3]*t[4]},\\n               ${t[4]})) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(${f}.0, ${d}.0);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `;return`\\n    float ${r}(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * ${c} + col * ${l} + depth * ${u} +\\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${md(n)};\\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\\n      return sampleTexture(${n}, uv);\\n    }\\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function cd(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\\n      return ${nd().texture2D}(${t}, halfCR);\\n    }\\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=nd();if(t)return`\\n    vec4 ${r}(int index) {\\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\\n      vec2 uv = packedUVfrom1D(\\n        packedTexShape[0], packedTexShape[1], index);\\n      return ${a.texture2D}(${n}, uv);\\n    }\\n  `;const o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\\n    vec4 ${r}(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        ${o[0]}, ${o[1]}, index);\\n      return ${a.texture2D}(${n}, uv);\\n    }\\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=a[0],i=a[1],u=nd();if(null!=a&&P(n,a))return t?`\\n      vec4 ${s}(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\\n\\n        return ${u.texture2D}(${r}, uv);\\n      }\\n    `:`\\n      vec4 ${s}(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\\n\\n        return ${u.texture2D}(${r}, uv);\\n      }\\n    `;if(t)return`\\n    vec4 ${s}(int row, int col) {\\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\\n      return ${u.texture2D}(${r}, uv);\\n    }\\n  `;const l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\\n    vec4 ${s}(int row, int col) {\\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${l[0]}, ${l[1]}, row, col);\\n      return ${u.texture2D}(${r}, uv);\\n    }\\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const r=[1,2],a=["b","row","col"];return`\\n        ${cd(bd(e,n.slice(1)),t)}\\n        vec4 ${s}(int b, int row, int col) {\\n          return ${s}(${wd(a,r)});\\n        }\\n      `}const i=nd();if(t)return`\\n    vec4 ${s}(int b, int row, int col) {\\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\\n      vec2 uv = packedUVfrom3D(\\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\\n      return ${i.texture2D}(${r}, uv);\\n    }\\n  `;const u=o[0],l=o[1],c=Math.ceil(n[2]/2);return`\\n    vec4 ${s}(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        ${u}, ${l}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\\n      return ${i.texture2D}(${r}, uv);\\n    }\\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=nd();if(t)return`\\n    vec4 ${r}(int b2, int b, int row, int col) {\\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\\n      texelsInBatch *= ${n}Shape[1];\\n      index = b2 * texelsInBatch + index;\\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\\n      int texR = index / packedTexShape[1];\\n      int texC = index - texR * packedTexShape[1];\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${n}, uv);\\n    }\\n  `;const a=e.shapeInfo.logicalShape,o=a.length,i=e.shapeInfo.texShape,u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],l=u[0],c=u[1],p=Math.ceil(a[o-1]/2);let h=p*Math.ceil(a[o-2]/2),d="int b, int row, int col",f=`b * ${h} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<o-1;e++)d=`int b${e}, `+d,h*=a[o-e-1],f=`b${e} * ${h} + `+f;return`\\n    vec4 ${r}(${d}) {\\n      int index = ${f};\\n      int texR = index / ${c};\\n      int texC = index - texR * ${c};\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});\\n      return ${s.texture2D}(${n}, uv);\\n    }\\n  `}(e,t)}}const pd="\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n",hd="\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n",dd="\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n",fd="\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n";function md(e){return`offset${e}`}function gd(e){const t=e.name,n=B(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\\n    for (int i = 0; i < ${n}; i++) {\\n      if (i == index) {\\n        return ${t}[i];\\n      }\\n    }\\n  `}function yd(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function xd(e,t,n){const{newShape:r,keptDims:s}=H(t),a=t.length,o=e&&3===a&&1===t[0],i=o?t.slice(1):r,u=!e&&a>1&&!P(t,n)&&r.length<a||o;return{useSqueezeShape:u,uniformShape:u?i:t,keptDims:s}}function bd(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function wd(e,t){return t.map((t=>e[t])).join(", ")}function vd(e,t,n){const r=[],s=[];let a,o,i,u=null,l=null;l=e.getUniformLocation(n,"NAN",!1),1===pe().getNumber("WEBGL_VERSION")&&(u=e.getUniformLocation(n,"INFINITY",!1));const c=!1;for(const s of t.variableNames){const a={name:s,uniform:e.getUniformLocation(n,s,c),offset:e.getUniformLocation(n,`offset${s}`,c)};t.enableShapeUniforms&&(a.shape=e.getUniformLocation(n,`${s}Shape`,c),a.texShape=e.getUniformLocation(n,`${s}TexShape`,c)),r.push(a)}if(t.enableShapeUniforms&&(a=e.getUniformLocation(n,"outShape",c),i=e.getUniformLocation(n,"outShapeStrides",c),o=e.getUniformLocation(n,"outTexShape",c)),t.customUniforms)for(const r of t.customUniforms)s.push(e.getUniformLocation(n,r.name,c));return{variablesLocations:r,customUniformLocations:s,infLoc:u,nanLoc:l,outShapeLocation:a,outShapeStridesLocation:i,outTexShapeLocation:o}}function Td(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,s=t[n],a=s.shape;if(!P(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&s.isUniform)return;const o=e.texShape,i=s.isUniform?null:s.texData.texShape;if(!P(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}function Sd(e){return pe().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class Ed{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=$h.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=nd();this.outputShape=e,this.enableShapeUniforms=Sd(this.outputShape.length),this.userCode=`\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        ${this.enableShapeUniforms?sd(["r","c","d"],e):rd(["r","c","d"],e)}\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getA(rc.x, rc.y, rc.z);\\n        }\\n\\n        ${t.output} = result;\\n      }\\n    `}}class Nd{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=$h.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=nd();this.outputShape=e,this.enableShapeUniforms=Sd(this.outputShape.length),this.userCode=`\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        ${this.enableShapeUniforms?sd(["r","c","d"],e):rd(["r","c","d"],e)}\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\\n        }\\n\\n        ${t.output} = result;\\n      }\\n    `}}class $d{constructor(e){this.variableNames=["A"],this.outTexUsage=Ih.DOWNLOAD;const t=nd();this.outputShape=e,this.userCode=`\\n      ${od}\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        ${t.output} = encode_float(x);\\n      }\\n    `}}class Id{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Ih.DOWNLOAD;const t=nd();this.outputShape=e,this.userCode=`\\n      ${od}\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\\n        ${t.output} = encode_float(x);\\n      }\\n    `}}const kd={R:0,G:1,B:2,A:3};class _d{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=nd();this.outputShape=e,this.enableShapeUniforms=Sd(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)");let a="";for(let e=0;e<n.length;e++){const t=n[e];a+=`\\n          if(offset == ${e}) {\\n            result = values[${kd[t]}];\\n          }`}this.userCode=`\\n      ${this.enableShapeUniforms?"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\\n  }\\n":ad(e)}\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int flatIndex = getFlatIndex(coords);\\n        float result = 0.;\\n        int offset = imod(flatIndex, ${n.length});\\n\\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\\n\\n        int r = flatIndex / texShape[1];\\n        if (r < texShape[0]) {\\n          int c = imod(flatIndex, texShape[1]);\\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\\n          vec4 values = ${r.texture2D}(A, uv);\\n          ${a}\\n        }\\n        ${r.output} = vec4(${s}, 0., 0., 0.);\\n      }\\n    `}}class Cd{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=nd();this.outputShape=e,this.enableShapeUniforms=Sd(this.outputShape.length);let r="",s="result";t&&(s="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let s=0;s<=1;s++){const a=2*t+s;r+=`\\n          localCoords = coords;\\n          if(localCoords[2] + ${s} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\\n          localCoords[2] += ${s};\\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\\n            localCoords[1] += ${t};\\n\\n            flatIndex = getFlatIndex(localCoords);\\n            offset = imod(flatIndex, 4);\\n\\n            flatIndex = idiv(flatIndex, 4, 1.);\\n\\n            int r = flatIndex / texShape[1];\\n            int c = imod(flatIndex, texShape[1]);\\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\\n            values = ${n.texture2D}(A, uv);\\n\\n            if (offset == 0) {\\n              result[${a}] = values[0];\\n            } else if (offset == 1) {\\n              result[${a}] = values[1];\\n            } else if (offset == 2) {\\n              result[${a}] = values[2];\\n            } else {\\n              result[${a}] = values[3];\\n            }\\n          }\\n        }\\n        `}this.userCode=`\\n        ${this.enableShapeUniforms?"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\\n  }\\n":ad(e)}\\n\\n        void main() {\\n          ivec3 coords = getOutputCoords();\\n\\n          vec4 result = vec4(0.);\\n          int flatIndex, r, c, offset;\\n          ivec3 localCoords;\\n          vec2 uv;\\n          vec4 values;\\n\\n          ${r}\\n\\n          ${n.output} = ${s};\\n        }\\n    `}}function Ad(e,t,n,r,s,a){!function(e,t){const n=pe().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const o=function(e){return Gh(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),i=e.TEXTURE_2D;return Oh(e,(()=>e.bindTexture(i,o))),Oh(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),Oh(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),Oh(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),Oh(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===pe().getNumber("WEBGL_VERSION")?Oh(e,(()=>e.texImage2D(i,0,r,t,n,0,s,a,null))):Oh(e,(()=>e.texStorage2D(i,1,r,t,n))),Oh(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[n,t]}}function Rd(e){return e.internalFormatFloat}function Od(e){return e.internalFormatHalfFloat}function Dd(e){return e.downloadTextureFormat}function Md(e){return e.internalFormatPackedFloat}function Fd(e){return e.internalFormatPackedHalfFloat}class Ld{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=pe().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,function(e,t){Sh[e]=t}(t,e)):this.gl=Nh(t),e=this.gl,2===pe().getNumber("WEBGL_VERSION")){const t=e;this.createVertexArray=()=>Oh(t,(()=>t.createVertexArray())),this.bindVertexArray=e=>Oh(t,(()=>t.bindVertexArray(e))),this.deleteVertexArray=e=>Oh(t,(()=>t.deleteVertexArray(e))),this.getVertexArray=()=>Oh(t,(()=>t.getParameter(t.VERTEX_ARRAY_BINDING)))}else if(null!=e){const t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>Oh(e,(()=>t.createVertexArrayOES())),this.bindVertexArray=n=>Oh(e,(()=>t.bindVertexArrayOES(n))),this.deleteVertexArray=n=>Oh(e,(()=>t.deleteVertexArrayOES(n))),this.getVertexArray=()=>Oh(e,(()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES)))}let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===pe().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=Mh(this.gl,e),Zh(this.gl,t))this.textureHalfFloatExtension=Mh(this.gl,t);else if(pe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Zh(this.gl,r))this.colorBufferHalfFloatExtension=Mh(this.gl,r);else if(pe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Zh(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Zh(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function(e){return function(e,t){const n=Gh(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return Oh(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),Oh(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=Gh(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return Oh(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),Oh(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return Gh(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Rh(this.gl,this.textureHalfFloatExtension)}get debug(){return pe().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;Oh(e,(()=>e.finish())),Oh(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),Oh(e,(()=>e.deleteFramebuffer(this.framebuffer))),Oh(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),Oh(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),Oh(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=_h(t,n);return Ad(e,s,a,Rd(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=_h(t,n);return Ad(e,s,a,Od(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=_h(t,n);return Ad(e,s,a,Dd(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){Oh(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===pe().getNumber("WEBGL_VERSION")?Oh(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):Oh(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===pe().getNumber("WEBGL_VERSION")?Oh(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):Oh(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),Oh(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let o,i,u;Oh(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),s instanceof Uint8Array?(o=new Uint8Array(n*r*4),i=e.UNSIGNED_BYTE,u=e.RGBA):(o=new Float32Array(n*r*4),i=e.FLOAT,u=a.internalFormatPackedFloat),o.set(s),2===pe().getNumber("WEBGL_VERSION")?Oh(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,i,o))):Oh(e,(()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,i,o))),Oh(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=Ah(t,n);return Ad(e,s,a,Fd(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=Ah(t,n);return Ad(e,s,a,Md(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(Wh(this.gl,this.framebuffer),this.outputTexture=null),Oh(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[s,a]=_h(t,n),o=new Uint8Array(t*n*4);return Oh(e,(()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return function(e,t,n,r,s,a,o){const i=e,u=new Float32Array(function(e,t){const[n,r]=Ah(e,t);return n*r*4}(a,o));return i.bindBuffer(i.PIXEL_PACK_BUFFER,t),i.getBufferSubData(i.PIXEL_PACK_BUFFER,0,u),i.bindBuffer(i.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n){const r=e.createBuffer();Oh(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const s=16*t*n;return Oh(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,s,e.STREAM_READ))),Oh(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),Oh(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(pe().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return Oh(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){const t=nd();return function(e,t){const n=Gh(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(Oh(e,(()=>e.shaderSource(n,t))),Oh(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\\n    precision highp float;\\n    ${t.attribute} vec3 clipSpacePos;\\n    ${t.attribute} vec2 uv;\\n    ${t.varyingVs} vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }`)}(t));const n=function(e){return Gh(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);Oh(t,(()=>t.attachShader(n,this.vertexShader))),Oh(t,(()=>t.attachShader(n,e))),function(e,t){if(Oh(e,(()=>e.linkProgram(t))),!pe().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n);const r=Object.assign(n,{vao:this.createVertexArray()});return this.debug&&Bh(t,r),r}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);const t=this.gl;Oh(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer))),function(e,t,n){Oh(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),Ph(e,t,"clipSpacePos",n,3,20,0)&&Ph(e,t,"uv",n,2,20,12)}(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(Oh(this.gl,(()=>this.gl.deleteProgram(e))),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&Bh(this.gl,this.program),Oh(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return Gh(e,(()=>e.getUniformLocation(t,n)),\'uniform "\'+n+\'" not present in program.\')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),Oh(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),Uh(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=Ah(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Bh(this.gl,this.program),zh(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}Oh(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Oh(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Mh(this.gl,2===pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await z((()=>this.disposed||this.isQueryAvailable(e,pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in pe().platform&&(n=pe().platform.setTimeoutCustom.bind(pe().platform)),z((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),Vh(this.gl,e,this.framebuffer),this.debug&&zh(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Vh(this.gl,this.outputTexture,this.framebuffer),this.debug&&zh(this.gl)):Wh(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;Vh(r,e,this.framebuffer),this.debug&&zh(r),this.outputTexture=e,Oh(r,(()=>r.viewport(0,0,t,n))),Oh(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),Oh(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function Bd(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&M("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function Pd(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}function Ud(e){return(t,n,r,s,a)=>{const o=os(t,n),i=o.length,u=J(o),l=K(a,B(o)),c=t.length,p=n.length,h=J(t),d=J(n),f=ss(t,o),m=ss(n,o);if(f.length+m.length===0)for(let t=0;t<l.length;++t)l[t]=e(r[t%r.length],s[t%s.length]);else for(let t=0;t<l.length;++t){const n=oe(t,i,u),a=n.slice(-c);f.forEach((e=>a[e]=0));const o=ae(a,c,h),g=n.slice(-p);m.forEach((e=>g[e]=0));const y=ae(g,p,d);l[t]=e(r[o],s[y])}return[l,o]}}function Vd(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",o)},i}function Wd(e,t,n="float32"){if("complex64"===n)return Vd({inputs:{real:Wd(e,t,"float32"),imag:Wd(e,t,"float32")},backend:e});const r=re(B(t),n);return e.makeTensorInfo(t,n,r)}function zd(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}function Gd(e,t,n,r){if("int32"===r)return[t,"int32",Int32Array.from(e)];if("bool"===r){const r=Et([0],n),[s,a]=Ud(((e,t)=>e!==t?1:0))(t,[],e,r,"bool");return[a,"bool",s]}throw new Error(`Error in Cast: failed to cast ${n} to ${r}`)}function Hd(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return zd({inputs:{x:s},backend:n});const e=Wd(n,s.shape,s.dtype),t=Hd({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=Vd({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===s.dtype){const e=function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}({inputs:{input:s},backend:n}),t=Hd({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(o=s.dtype,"complex64"===(i=a)||"float32"===i&&"complex64"!==o||"int32"===i&&"float32"!==o&&"complex64"!==o||"bool"===i&&"bool"===o){const e=zd({inputs:{x:s},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}var o,i;const u=n.data.get(s.dataId).values,[l,c,p]=Gd(u,s.shape,s.dtype,a);return n.makeTensorInfo(l,c,p)}function Kd(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a,b:o}=n,i=s;Bd([a,o],e);const u=i.data.get(a.dataId).values,l=i.data.get(o.dataId).values,c="string"===a.dtype?ap(u):u,p="string"===a.dtype?ap(l):l,h=r||a.dtype,[d,f]=t(a.shape,o.shape,c,p,h);return i.makeTensorInfo(f,h,d)}:({inputs:e,backend:s})=>{const{a,b:o}=e,i=s;if("complex64"===a.dtype||"complex64"===o.dtype){const e=Hd({inputs:{x:a},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),r=t.complexTensorInfos.real,s=t.complexTensorInfos.imag,u=i.data.get(r.dataId).values,l=i.data.get(s.dataId).values,c=Hd({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),p=i.data.get(c.dataId),h=p.complexTensorInfos.real,d=p.complexTensorInfos.imag,f=i.data.get(h.dataId).values,m=i.data.get(d.dataId).values,[g,y,x]=n(a.shape,o.shape,u,l,f,m),b=i.makeTensorInfo(x,"float32",g),w=i.makeTensorInfo(x,"float32",y),v=Vd({inputs:{real:b,imag:w},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(b),i.disposeIntermediateTensorInfo(w),v}{const e=i.data.get(a.dataId).values,n=i.data.get(o.dataId).values,s=r||a.dtype,[u,l]=t(a.shape,o.shape,e,n,s);return i.makeTensorInfo(l,s,u)}}}function jd(e){return(t,n,r,s,a,o)=>{const i=os(t,n),u=B(i),l=i.length,c=J(i),p=K("float32",u),h=K("float32",u),d=ss(t,i),f=ss(n,i),m=Nc(r,s),g=Nc(a,o),y=t.length,x=J(t),b=n.length,w=J(n);if(d.length+f.length===0)for(let t=0;t<p.length;t++){const n=t%m.length,r=t%g.length,s=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);p[t]=s.real,h[t]=s.imag}else for(let t=0;t<p.length;t++){const n=oe(t,l,c),r=n.slice(-y);d.forEach((e=>r[e]=0));const s=ae(r,y,x),a=n.slice(-b);f.forEach((e=>a[e]=0));const o=ae(a,b,w),i=e(m[2*s],m[2*s+1],g[2*o],g[2*o+1]);p[t]=i.real,h[t]=i.imag}return[p,h,i]}}const qd=Ud(((e,t)=>e+t)),Xd=jd(((e,t,n,r)=>({real:e+n,imag:t+r})));function Yd(e,t,n,r,s){const a=B(r),o=re(s,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(o[r]+=a>0?t[n]:1)}return o}function Qd(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],o=Dr([s,n],t.dtype);for(let i=0;i<s;i++)for(let s=0;s<a;s++){const a=e.get(i,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(r?o.set(1,i,a):t.size>0?o.set(o.get(i,a)+t.get(i,s),i,a):o.set(o.get(i,a)+1,i,a))}return o}Kd(Ne,qd,Xd);const Zd=Ud(((e,t)=>e&t));function Jd(e){return(t,n,r)=>{const s=j(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],r);return s}}function ef(e,t,n){return tf(e,Jd(t),n)}function tf(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:o}=r;Bd(o,e);const i=a,u=i.data.get(o.dataId).values;let l;if("string"===o.dtype){if(!Array.isArray(u))throw new Error("String tensor\'s value was not an instance of Array");l=ap(u)}else l=u;const c=n||o.dtype,p=t(l,c,s);return i.makeTensorInfo(o.shape,c,p)}}Kd(Ie,Zd);const nf=Jd((e=>Math.ceil(e)));function rf(e,t,n,r){const s=j(n,B(t));if(r&&"string"!==n){let t=0;e.forEach((e=>{const n=B(e.shape);s.set(e.vals,t),t+=n}))}else{let r=0;e.forEach((e=>{const a="string"===n?ap(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+r;for(let t=0;t<e.shape[1];++t)s[i+t]=a[o++]}r+=e.shape[1]}))}return s}tf(_e,nf);const sf=Ud(((e,t)=>e===t?1:0)),af=(Kd(Re,sf,null,"bool"),Jd((e=>Math.exp(e)))),of=(tf("Exp",af,"float32"),Jd((e=>Math.expm1(e)))),uf=(tf(Oe,of),Jd((e=>Math.floor(e))));function lf(e,t,n,r,s,a,o,i,u){const l=Dr([r,a],n);for(let n=0;n<r;n++){const r=[];let c=0;for(let t=0;t<s;t++){const a=e[n*s+t];c+=a*o[t],r.push(a)}if(c<0||c>=u/a)throw new Error(`Invalid indices: ${r} does not index into ${i}`);for(let e=0;e<a;e++)l.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return l}function cf(e,t,n){const r=Dr(n,e.dtype);for(let n=0;n<r.size;++n){const s=r.indexToLoc(n).slice(),a=s[0],o=s[2],i=t.locToIndex([a,o]);s[2]=t.values[i];const u=e.locToIndex(s);0<=u&&u<e.values.length&&(r.values[n]=e.values[u])}return r}tf(Me,uf);const pf=Ud(((e,t)=>e>t?1:0)),hf=(Kd(Fe,pf,null,"bool"),Ud(((e,t)=>e>=t?1:0))),df=(Kd(Le,hf,null,"bool"),Ud(((e,t)=>e<t?1:0))),ff=(Kd(Pe,df,null,"bool"),Ud(((e,t)=>e<=t?1:0)));function mf(e,t,n){const r=(t-e)/(n-1),s=re(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+r;return s}Kd(Ue,ff,null,"bool");const gf=Jd((e=>Math.log(e)));function yf(e,t,n,r){const s=K(r,B(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>a)&&(a=t)}s[n]=a}return s}tf("Log",gf);const xf=Ud(((e,t)=>Math.max(e,t))),bf=(Kd(We,xf),Ud(((e,t)=>Math.min(e,t)))),wf=(Kd(Ge,bf),Ud(((e,t)=>e*t))),vf=jd(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n})));function Tf(e,t,n){const r=St(-1,n);return wf([],t,r,e,n)}Kd(He,wf,vf);const Sf=Ud(((e,t)=>e!==t?1:0));function Ef(e,t,n,r,s){const a=t.length,o=B(t),i=J(t),u=J(s),l=K(n,B(s));for(let t=0;t<o;++t){const n=oe(t,a,i),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[r[e]];l[ae(s,a,u)]=e[t]}return l}function Nf(e,t,n,r){const[s,a]=no(e,r),o=en(t,"int32"),i=re(B(s),o),u=B(a);for(let e=0;e<i.length;++e){const t=e*u;let r=1;for(let e=0;e<u;++e)r*=n[t+e];i[e]=r}return{outVals:i,outShape:s,outDtype:o}}function $f(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function If(e,t,n,r,s,a,o,i){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,r)=>{if(e<0||e>=n){const s=oe(r,t.length,J(t)).join(",");throw new Error(`indices[${s}] = ${e} is not in [0, ${n})`)}}))}(a,o,t[0][0]-1),0===r.length)throw new Error("params.rank must be nonzero");const u=r[0],{outSplits:l,valueSlices:c,numValues:p}=function(e,t,n,r){const s=[];let a=0;const o=t.length-1+n.length,i=new Array(o).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const r=e[n],s=n===e.length-1?t:e[n+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,r);let u=1;for(let e=0;e<t.length-1;++e){u*=t[e];const n=t[e+1];for(let t=1;t<u+1;++t)i[e].push(t*n)}for(let r=0;r<e.length;++r){let o=e[r],u=e[r]+1;for(let e=0;e<n.length;++e){const r=n[e],s=e+t.length-1;if(s>=0){const e=i[s],t=e[e.length-1]-r[o];for(let e=o;e<u;++e)i[s].push(r[e+1]+t)}o=r[o],u=r[u]}u!==o&&(s.push([o,u]),a+=u-o)}return{outSplits:i,valueSlices:s,numValues:a}}(a,o,e,u),h=function(e){const t=[];for(let n=0;n<e.length;++n){const r=j("int32",e[n].length);t.push(r),e[n].forEach(((e,t)=>r[t]=e))}return t}(l),d=function(e,t,n,r,s){const a=t.slice();a[0]=s;const o=j(n,B(a)),i=e.length;return function(e,t,n,r,s,a){const o=$f(t,2)[1],i=$f(a,2)[1];let u=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<r;++t)s[u*i+t]=e[n*o+t];++u}}(e,t,r,0===i?0:i/t[0],o,a),[o,a]}(n,r,s,c,p);return[h,d[0],d[1]]}Kd(Ke,Sf,null,"bool");const kf=2147483647;function _f(e,t,n,r,s,a,o){if(t.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,u=0===s.length,l=0===o.length,c=[];i||c.push(t[0]),u||c.push(s[0]),l||c.push(o[0]);for(let e=1;e<c.length;++e)if(c[e]!==c[e-1])throw new Error("starts, limits, and deltas must have the same shape");const p=0===c.length?1:c[0],h=j("int32",p+1);h[0]=0;for(let t=0;t<p;++t){const n=i?e[0]:e[t],s=u?r[0]:r[t],o=l?a[0]:a[t];if(0===o)throw new Error("Requires delta != 0");let c;if(o>0&&s<n||o<0&&s>n)c=0;else if(c=Math.ceil(Math.abs((s-n)/o)),c>kf)throw new Error(`Requires ((limit - start) / delta) <= ${kf}`);h[t+1]=h[t]+c}const d=j(n,h[p]);let f=0;for(let t=0;t<p;++t){const n=h[t+1]-h[t];let r=i?e[0]:e[t];const s=l?a[0]:a[t];for(let e=0;e<n;++e)d[f++]=r,r+=s}return[h,d]}var Cf=nc;class Af{constructor(e,t,n,r,s,a,o,i,u,l){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=s,this.defaultValue=a,this.defaultValueShape=o,this.rowPartitionValues=i,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=sc(l),this.raggedRank=ac(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Cf.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Cf.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Cf.VALUE_ROWIDS:return Af.getMaxWidthValueRowID(t);case Cf.ROW_SPLITS:return Af.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Cf[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],s=0;for(let a=1;a<t;++a){const t=e[a];t!==r&&(r=t,s=Math.max(a-n,s),n=a)}return Math.max(t-n,s)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return Of(e,n)}calculateOutputSize(e){const t=this.valuesShape;oc(this.defaultValueShape,t);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),r=rc(this.raggedRank,n,t);r[0]<0&&(r[0]=e);for(let e=1;e<=this.raggedRank;++e)r[e]<0&&(r[e]=this.getMaxWidth(e));return r}calculateFirstParentOutputIndex(e,t,n){const r=Math.min(e,n),s=[];let a=0;for(let e=0;e<r;++e,a+=t)s.push(a);for(let t=r;t<e;++t)s.push(-1);return M(s.length===e,(()=>"Final length of result must be equal to firstDimension.")),s}calculateOutputIndexRowSplit(e,t,n,r){const s=e.length,a=[];for(let o=0;o<s-1;++o){const s=e[o+1]-e[o];let i=Math.min(r,s),u=t[o];-1===u&&(i=0);for(let e=0;e<i;++e)a.push(u),u+=n;for(let e=0;e<s-i;++e)a.push(-1)}if(s>0&&a.length!==e[s-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,r){const s=e.length,a=[];if(0===s)return[];let o=0,i=e[0];if(i>=t.length)throw new Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let u=t[i];a.push(u);for(let l=1;l<s;++l){const s=e[l];if(s===i)u>=0&&(++o,o<r?u+=n:u=-1);else{if(o=0,i=s,s>=t.length)throw new Error(`Got nextValueRowId=${s} which is not less than ${t.length}`);u=t[s]}a.push(u)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,r){const s=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case Cf.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,n,r);case Cf.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,n,r);default:throw new Error(`Unsupported partition type: ${Cf[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Cf.FIRST_DIM_SIZE:return e[0];case Cf.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Cf.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Cf[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const r=Of(t,!1),s=j(this.valuesDType,B(r));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)a=this.calculateOutputIndex(e-1,a,n[e],t[e]);this.setOutput(this.raggedRank,a,s,r)}return[r,s]}setOutput(e,t,n,r){if(0===n.length)return;const s=this.values,a=n;let o=r.slice();o=o.slice(e+1);const i=B(o),u=t.length;let l=this.defaultValue;if(l.length!==i&&1!==l.length){const e=this.defaultValueShape;_n((()=>{const t=ta(l,e),n=ba(t,o);l=n.dataSync()}))}let c=0,p=0,h=0;for(let e=0;e<=u;++e){let r=e<u?t[e]:-1;if(r!==h){if(p<h){const e=s.subarray(c*i);Rf(a.subarray(p*i),e,(h-p)*i)}if(e>=u){const e=n.length;r=Math.floor(e/i)}if(r>h)if(1===this.defaultValue.length)a.subarray(h*i,r*i).fill(this.defaultValue[0]),h=r;else for(;r>h;)Rf(a.slice(h*i),l,i),++h;r<0?(c=e+1,p=h):(c=e,p=h,h=p+1)}else++h}}}function Rf(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function Of(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function Df(e,t,n,r,s,a,o,i,u,l){return new Af(e,t,n,r,s,a,o,i,u,l).compute()}function Mf(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return re(0,r);const s=re(Math.abs(Math.ceil((t-e)/n)),r);t<e&&1===n&&(n=-1),s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+n;return s}const Ff=Jd((e=>1/Math.sqrt(e)));function Lf(e,t,n,r,s,a,o,i,u,l){const c=[r/s,s],p=e.values,h=t.values;if(0===r)return Dr(n,t.dtype);const d=u instanceof Vt?u:Dr(c,t.dtype);"string"==typeof u||"number"==typeof u?d.values.fill(u):"boolean"==typeof u&&d.values.fill(+u);for(let e=0;e<a;e++){const a=[];let u=0;for(let t=0;t<o;t++){const n=p[e*o+t];a.push(n),u+=n*i[t]}if(u<0||u>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)l?d.values[u*s+n]+=h[e*s+n]:d.values[u*s+n]=0===t.rank?h[0]:h[e*s+n]}return d}tf(Qe,Ff);const Bf=Jd((e=>1/(1+Math.exp(-e))));function Pf(e,t,n,r,s){const a=vs(r,t,n),o=B(n),i=J(r);if(a){const n=Ts(t,i);return"string"===s?e.slice(n,n+o):e.subarray(n,n+o)}const u=Dr(r,s,"string"===s?ap(e):e),l=Dr(n,s);for(let e=0;e<l.size;++e){const n=l.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));l.set(u.get(...r),...n)}return"string"===s?op(l.values):l.values}function Uf(e,t,n,r,s,a,o){const i=t[0],u=a[0],l=new Array(u),c=new Array(i),p=t[1];if(0===u){if(0!==i)throw new Error(Gc(i));return[j(n,0),[0,p],j(s,0),l,c]}let h=!0,d=0;const f=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*p];if(n<0)throw new Error(Hc(t,n));if(n>=u)throw new Error(Kc(t,n,u));++f[n],h=h&&n>=d,d=n}let m=!0;for(let e=0;e<u;++e){const t=0===f[e];l[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&h){const t=e,n=r;for(let e=0;e<i;++e)c[e]=e;return[t,[i,p],n,l,c]}{const t=f[u-1],a=j(n,t*p),h=j(s,t),d=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*p],s=d[n],o=(0===n?0:f[n-1])+s;d[n]++;for(let n=0;n<p;++n)a[o*p+n]=e[t*p+n];h[o]=r[t],c[t]=o}for(let e=0;e<u;++e)if(0===d[e]){const t=0===e?0:f[e-1];a[t*p+0]=e;for(let e=1;e<p;++e)a[t*p+e]=0;h[t]=o}return[a,[t,p],h,l,c]}}function Vf(e,t,n,r,s){const a=B(r),o=t[0],i=s.length,u=[];let l=1,c=-1;for(let e=0;e<i;++e){const t=s[e];if(-1===t){if(-1!==c)throw new Error(jc(c,e));c=e,u.push(1)}else{if(t<0)throw new Error(qc(e,t));l*=t,u.push(t)}}if(-1!==c){if(l<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(a/l);if(l*e!==a)throw new Error(Yc(r,u));u[c]=e}if(B(u)!==a)throw new Error(Qc(r,u));const p=r.length,h=[];if(p>0){h[p-1]=1;for(let e=p-2;e>=0;--e)h[e]=h[e+1]*r[e+1]}const d=[];if(i>0){d[i-1]=1;for(let e=i-2;e>=0;--e)d[e]=d[e+1]*u[e+1]}const f=j(n,o*i);for(let t=0;t<o;++t){let n=0;for(let r=0;r<p;++r)n+=e[t*p+r]*h[r];for(let e=0;e<i;++e)f[t*i+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[o,i],u]}function Wf(e,t,n,r,s,a=!1,o=0){const i=r.length,u=[t[0],e.length/t[0]],l=u[1],c=i>0?s[i-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const p=t.slice();p[0]=c;const h=j(n,p.reduce(((e,t)=>e*t),1));if(0===i)return c>0&&h.fill(o),[h,p];if(c<=0)throw new Error("segment ids must be >= 0");let d=0,f=1,m=0,g=s[d];for(;;){let t=0;if(f<i){if(t=s[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(ep(g,c));g>m&&h.fill(o,m*l,g*l);for(let t=d;t<f;++t){const n=r[t];if(n<0||n>=u[0])throw new Error(tp(t,r[t],u[0]));for(let t=0;t<l;t++)h[g*l+t]+=e[n*l+t]}if(a)for(let e=0;e<l;e++)h[g*l+e]/=f-d;if(d=f,++f,m=g+1,g=t,f>i)break}return m<c&&h.fill(o,m*l,c*l),[h,p]}ef(Je,(e=>1/(1+Math.exp(-e))));const zf=Jd((e=>Math.sqrt(e))),Gf=(ef(et,(e=>Math.sqrt(e))),Jd(((e,t)=>{const{pattern:n,replaceGlobal:r,rewrite:s}=t;return e.replace(new RegExp(n,r?"g":""),s)})));function Hf(e,t,n,r){const s=Dr(e,t.dtype);for(let e=0;e<s.size;e++){const a=s.indexToLoc(e),o=new Array(a.length);for(let e=0;e<o.length;e++)o[e]=a[e]*n[e]+r[e];s.set(t.get(...o),...a)}return s}tf(tt,Gf);class Kf{constructor(e,t,n,r,s,a){this.separator=$t(e),this.nGramWidths=t,this.leftPad=$t(n),this.rightPad=$t(r),this.padWidth=s,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,s,a){for(let o=0;o<s;++o){const i=this.getPadWidth(a),u=Math.max(0,i-o),l=Math.max(0,i-(s-(o+1))),c=a-(u+l),p=t+(u>0?0:o-i);let h=0;h+=u*this.leftPad.length;for(let t=0;t<c;++t)h+=e[p+t].length;h+=l*this.rightPad.length,h+=(u+l+c-1)*this.separator.length,n[r+o]=new Uint8Array(h);const d=n[r+o];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[p+t]),m(this.separator);if(c>0){m(e[p+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let s=1;s<r;++s){let r=t[s]>=e;if(r=r&&t[s]<=n,!r)throw new Error(`Invalid split value ${t[s]}, must be in [${e}, ${n}]`);e=t[s]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const s=r-1,a=j("int32",r);if(0===n||0===r){const e=new Array(n);for(let e=0;e<=s;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=s;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===r&&(r=1),a[e]=a[e-1]+r}const o=new Array(a[s]);for(let n=0;n<s;++n){const r=t[n];let s=a[n];if(this.nGramWidths.forEach((a=>{const i=t[n+1]-t[n],u=this.getNumNGrams(i,a);this.createNGrams(e,r,o,s,u,a),s+=u})),this.preserveShort&&s===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const i=a+2*this.padWidth,u=1;this.createNGrams(e,r,o,s,u,i)}}return[o,a]}}function jf(e,t,n,r,s,a,o,i){return new Kf(n,r,s,a,o,i).compute(e,t)}function qf(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const s=t[0];let a=e.indexOf(s);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||r.push(t),a=(e=e.subarray(a+1)).indexOf(s)}return void(n&&0===e.length||r.push(e))}let s=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(s,a);n&&0===t.length||r.push(t),s=a+1}}function Xf(e,t,n){const r=e.length,s=[];let a=0,o=0;const i=new Array(r);for(let u=0;u<r;++u){const r=s.length;qf(e[u],t,n,s);const l=s.length-r;i[u]=l,a+=l,o=Math.max(o,l)}const u=j("int32",2*a),l=new Array(a),c=[r,o];let p=0;for(let e=0;e<r;++e)for(let t=0;t<i[e];++t)u[2*p]=e,u[2*p+1]=t,l[p]=s[p],++p;return[u,l,c]}function Yf(e,t){const n=j("int32",e.length);for(let r=0;r<e.length;++r)n[r]=Tt(e[r]).modulo(t).getLowBitsUnsigned();return n}const Qf=Ud(((e,t)=>e-t)),Zf=jd(((e,t,n,r)=>({real:e-n,imag:t-r})));function Jf(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=Dr(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const a=e.locToIndex(s);r.values[t]=e.values[a]}return r}Kd("Sub",Qf,Zf);const em=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function tm(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const s=r-n+1,a=t-n+1,o=Math.log(s),i=.5*Math.exp(2*o/3),u=.5*Math.sqrt(o*i*(s-i)/s)*Math.sign(a-s/2);tm(e,t,Math.max(n,Math.floor(t-a*i/s+u)),Math.min(r,Math.floor(t+(s-a)*i/s+u)))}const s=e[t];let a=n,o=r;for(D(e,n,t),em(e[r],s)>0&&D(e,n,r);a<o;){for(D(e,a,o),a++,o--;em(e[a],s)<0;)a+=1;for(;em(e[o],s)>0;)o-=1}0===em(e[n],s)?D(e,n,o):(o+=1,D(e,o,r)),o<=t&&(n=o+1),t<=o&&(r=o-1)}}function nm(e,t,n,r,s){const a=t[t.length-1],[o,i]=[e.length/a,a],u=K(n,o*r),l=K("int32",o*r);for(let t=0;t<o;t++){const n=t*i,a=e.subarray(n,n+i);let o=new Array(a.length);a.forEach(((e,t)=>o[t]={value:e,index:t})),r<o.length&&(tm(o,r),o=o.slice(0,r)),s&&o.sort(em);const c=t*r,p=u.subarray(c,c+r),h=l.subarray(c,c+r);for(let e=0;e<r;e++)p[e]=o[e].value,h[e]=o[e].index}const c=t.slice();return c[c.length-1]=r,[Dr(c,n,u),Dr(c,"int32",l)]}function rm(e,t,n,r){const s=G(t,n)[0],a=[1,n[0],1];for(let e=0;e<s;e++)a[0]*=n[e];a[1]=n[s];for(let e=s+1;e<n.length;e++)a[2]*=n[e];const o=new Map,i=new Int32Array(n[s]),u=new Vt(a,r,e),l=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[s];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)e.push(u.get(n,t,r));n=e.join(",")}const r=o.get(n);if(null!=r)i[t]=r;else{const e=o.size;o.set(n,e),i[t]=e,l.push(t)}}const p=a.slice();p[1]=o.size;const h=new Vt(p,r);l.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)h.set(u.get(n,e,r),n,t,r)}));const d=n.slice();return d[s]=p[1],{outputValues:h.values,outputShape:d,indices:i}}const{mx:sm,XI:am,Nk:om,f6:im,ct:um,YG:lm,hH:cm,z3:pm,sG:hm,uM:dm,vS:fm,qB:mm,GG:gm,rq:ym,lg:xm,WR:bm,cu:wm,GE:vm,px:Tm,jC:Sm,He:Em,hE:Nm,BF:$m,Dk:Im,cl:km,_B:_m,ub:Cm,_f:Am,Ku:Rm,qy:Om,Zy:Dm,bu:Mm,zv:Fm,dH:Lm,HS:Bm,yH:Pm,l3:Um,z9:Vm,x6:Wm,_m:zm,eW:Gm,GK:Hm,SP:Km,yr:jm,dl:qm,Dw:Xm,xT:Ym,_X:Qm,wz:Zm}=k;function Jm(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function eg(e,t){return 1===t?[e]:Jm(e,t)}class tg{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=Sd(this.outputShape.length),0===this.rank)this.userCode="\\n        void main() {\\n          setOutput(vec4(getA(), 0., 0., 0.));\\n        }\\n      ";else{const e=eg("rc",this.rank),t=yd(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),s=this.getOutput(e);this.userCode=`\\n        void main() {\\n          ${t} rc = getOutputCoords();\\n\\n          if(${n}) {\\n            setOutput(vec4(0));\\n          } else {\\n            ${r}\\n\\n            setOutput(vec4(${s}));\\n          }\\n        }\\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let s=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)s=`${e[e.length-1-t]},`+s;t.push(s)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\\n      int r = ${t[0]};\\n      int c = ${t[1]};\\n      int rp1 = r + 1;\\n      int cp1 = c + 1;\\n\\n      bool cEdge = cp1 >= ${n};\\n      bool rEdge = rp1 >= ${r};\\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\\n            cEdge ? 0. : getA(${t[1]}),\\n            rEdge ? 0. : getA(${t[2]}),\\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class ng{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=Sd(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\\n        ${t}\\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\\n          int flatIndex = getFlatIndex(thisRC);\\n\\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\\n\\n          result[${e}] =\\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\\n        ${e>0?"}":""}\\n      `}var r,s;this.userCode=`\\n      ${r=t,s=this.enableShapeUniforms,`\\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\\n      ${s?function(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),s=new Array(n-1);s[n-2]=r[n-1];for(let e=n-3;e>=0;--e)s[e]=`(${s[e+1]} * ${r[e+1]})`;return s}(e.map(((e,t)=>t)),t);return r.map(((t,s)=>`int ${e[s]} = ${n} / ${r[s]}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${r[s]}`:`index -= ${e[s]} * ${r[s]}`};`)).join("")}(["r","c","d"],"inputShape"):rd(["r","c","d"],r)}\\n      return ivec3(r, c, d);\\n    }\\n  `}\\n      ${this.enableShapeUniforms?"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\\n  }\\n":ad(e)}\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n\\n        ivec3 thisRC;\\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\\n\\n        ${n}\\n\\n        setOutput(result);\\n      }\\n    `}}class rg{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,n){const r=ag(t,n),s=og(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=sg(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].pop();return this.usedTextures[s].push(e),e}let o;return r===kh.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===kh.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===kh.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===kh.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===kh.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(o),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=ag(n,r),a=og(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const o=sg(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),i=pe().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const u=this.usedTextures[a],l=u&&u.indexOf(e);if(null==l||l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u[l]=u[u.length-1],u.pop(),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function sg(e,t,n,r,s){const a=function(e,t){switch(e){case kh.PACKED_2X2_FLOAT32:return Md(t);case kh.PACKED_2X2_FLOAT16:return Fd(t);case kh.UNPACKED_FLOAT32:return Rd(t);case kh.UNPACKED_FLOAT16:return Od(t);case kh.PACKED_4X1_UNSIGNED_BYTE:return Dd(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let o;if(s){const[t,n]=Ah(e[0],e[1]);o=t*n}else{const[t,n]=_h(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return o*i}function ag(e,t){if(e===Ih.UPLOAD)return kh.PACKED_2X2_FLOAT32;if(e===Ih.RENDER||null==e)return function(e){return pe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?kh.PACKED_2X2_FLOAT32:kh.UNPACKED_FLOAT32:e?kh.PACKED_2X2_FLOAT16:kh.UNPACKED_FLOAT16}(t);if(e===Ih.DOWNLOAD||e===Ih.PIXELS)return kh.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function og(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class ig{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=Sd(this.outputShape.length),this.userCode=`\\n      float unaryOperation(float x) {\\n        ${t}\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    `}}const ug="if (isnan(x)) return x;",lg="return x;",cg="return abs(x);",pg="return (x >= 0.0) ? x : (exp(x) - 1.0);",hg=ug+"\\n  return (x < 0.0) ? 0.0 : x;\\n",dg=ug+"\\n  return (x < 0.0) ? 0.0 : min(6.0, x);\\n",fg="return x;",mg="return 1.0 / (1.0 + exp(-1.0 * x));",gg="return x;",yg="\\n  vec4 result;\\n\\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\\n\\n  return result;\\n",xg="\\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n",bg="\\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n",wg="return 1.0 / (1.0 + exp(-1.0 * x));";class vg{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=Sd(this.outputShape.length),this.userCode=`\\n      vec4 unaryOperation(vec4 x) {\\n        ${t}\\n      }\\n\\n      void main() {\\n        vec4 x = getAAtOutCoords();\\n        vec4 y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    `}}class Tg{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=Sd(this.outputShape.length);const t=e.length,n=eg("rc",t),r=yd(t),s=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),o=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\\n      void main() {\\n        ${r} rc = getOutputCoords();\\n        vec4 packedInput = getA(${s});\\n\\n        setOutput(getChannel(packedInput, ${o}));\\n      }\\n    `}}const Sg=Fu,Eg={},Ng=pe().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class $g extends Se{nextDataId(){return $g.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!pe().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof Ld)t=e;else{const n=Nh(pe().getNumber("WEBGL_VERSION"),e);t=new Ld(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=Nh(pe().getNumber("WEBGL_VERSION"));t=new Ld(e),this.binaryCache=((n=pe().getNumber("WEBGL_VERSION"))in Eg||(Eg[n]={}),Eg[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new rg(this.gpgpu),this.numMBBeforeWarning=null==pe().global.screen?1024:pe().global.screen.height*pe().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new Te(this,kn())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,r,s,a){const o=this.makeTensorInfo(t,n),i=this.texData.get(o.dataId);i.isPacked=!1,i.texture={texture:e,texShape:[r,s]},i.texShape=[r,s];const u=jh(t),l=new _d(u,!1,a),c=this.runWebGLProgram(l,[o],n,[[r,s]]);return c.shape=t,i.texture=null,this.disposeIntermediateTensorInfo(o),c.dataId}write(e,t,n){if((pe().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||pe().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:Ih.UPLOAD,refCount:1}),r}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,r,s){if(pe().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:Ih.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:s,slice:a,shape:o,isPacked:i}=t;if(null!=a){let t;t=i?new vg(o,fg):new ig(o,fg);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;return u&&(l=Nt()),c="complex64"===r?Nc(this.readSync(s.real.dataId),this.readSync(s.imag.dataId)):this.getValuesFromTexture(e),u&&(this.downloadWaitMs+=Nt()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:s,dtype:a,complexTensorInfos:o,isPacked:i}=t;if(null!=s){let t;t=i?new vg(r,fg):new ig(r,fg);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if(pe().getBool("DEBUG")&&!pe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===pe().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,c=null;if("complex64"!==a&&pe().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...Ch(r))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);l=Nc(e[0],e[1])}else if(null==c)l=this.getValuesFromTexture(e);else{const e=B(r);l=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=u&&this.disposeIntermediateTensorInfo(u),null!=c){const e=this.gpgpu.gl;Oh(e,(()=>e.deleteBuffer(c)))}const p=this.convertAndCacheOnCPU(e,l),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&kn().removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,t={}){const n=this.texData.get(e),{values:r,shape:s,slice:a,dtype:o,isPacked:i,texture:u}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=i?new vg(s,fg):new ig(s,fg);const r=this.runWebGLProgram(n,[{dataId:e,shape:s,dtype:o}],o),a=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),a}if(null==u)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const l=this.decode(e,t.customTexShape),c=kn().makeTensorFromTensorInfo(l),p=this.texData.get(l.dataId);return Object.assign({tensorRef:c},p.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>It(e)));return Dr(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Dr(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!Dh(n)){if(pe().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: \'tf.env().set(\'WEBGL_RENDER_FLOAT32_ENABLED\', true);\'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),s=B(t);if(pe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...Ch(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const a=pe().getBool("WEBGL_PACK")&&!0===r,o=a?jh(t):t,i=a?new Id(o):new $d(o),u=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture.texture,l.texShape[0],l.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),c}timerAvailable(){return pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=_t(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=_t(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);o.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Nt(),endMs:null}}endTimer(e){return pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Nt(),e)}async getQueryTime(e){if(pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=Ng){return pe().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&B(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){de("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return Sg(e.shape,t)}packedUnaryOp(e,t,n){const r=new vg(e.shape,t),s=this.compileAndRun(r,[e],n);return kn().makeTensorFromTensorInfo(s)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=Lm(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(pe().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,cg,e.dtype);const t=new ig(e.shape,cg),n=this.compileAndRun(t,[e]);return kn().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&X(n[0])){const s=n.map((e=>$t(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){return kn().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new Tg(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new tg(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Hh(e.shape),...Kh(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[Hh(t),...Kh(t)],a=new ng(s,n),o=[n],i=this.runWebGLProgram(a,[r],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:r,shape:s,dtype:a}=n;null!=t&&M(B(s)<=t[0]*t[1]*4,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."));const o=jh(s);let i;i=r?new Nd(o):new Ed(o);const u=[null!=t?t:Ch(o)];return{dtype:a,shape:s,dataId:this.runWebGLProgram(i,[{shape:o,dtype:a,dataId:e}],a,u,!0,t).dataId}}runWebGLProgram(e,t,n,r,s=!1,a){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===$h.DENSE){const t=null!=a?a:Ch(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===B(o.shape))return i.values=K(o.dtype,0),o;const u=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&B(t.shape)<=pe().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!Xh(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),u.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const c={shape:o.shape,texData:i,isUniform:!1},p=function(e,t,n){let r="";t.concat(n).forEach((t=>{const s=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:o,uniformShape:i,keptDims:u}=xd(e.packedInputs,t.shape,a);let l="",c="",p="";if(1===i.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];l=`${e[0]>1}_${e[1]>1}`}else if(2!==i.length||e.packedInputs){if(i.length>2&&!e.packedInputs){const e=J(i);p=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${i[0]>1}_${i[1]>1}`;const h=t.shape.length,d=2===i.length&&P(t.shape,a),f=1===B(t.shape),m=ss(t.shape,n.shape),g=!e.packedInputs&&h===n.shape.length&&P(a,n.texData.texShape),y=e.packedInputs||i.length>2?"":`${a[0]>1}_${a[1]>1}`;r+=`${h}_${g}_${o?u:""}_${i.length}_${f}_${m}_${d}_${l}_${c}_${p}_${y}_${s}`}else{const e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${s}`}}));const s=e.userCode;let a=e.constructor.name;return a+="_"+r+"_"+s+`${pe().getNumber("WEBGL_VERSION")}`,a}(e,l,c),h=this.getAndSaveBinary(p,(()=>function(e,t,n,r){const s=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),a=s.map((e=>e.shapeInfo)),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},i=ud(s,o,t),u=function(e,t){const n=Gh(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(Oh(e,(()=>e.shaderSource(n,t))),Oh(e,(()=>e.compileShader(n))),pe().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw Lh(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,i),l=e.createProgram(u);return pe().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:u,source:i,webGLProgram:l,inShapeInfos:a,outShapeInfo:o,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(l),Object.assign({program:t,fragmentShader:u,source:i,webGLProgram:l,inShapeInfos:a,outShapeInfo:o},vd(e,t,l)))}(this.gpgpu,e,l,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),pe().get("ENGINE_COMPILE_ONLY")||function(e,t,n,r,s){t.program.enableShapeUniforms||(Td(t.inShapeInfos,n),Td([t.outShapeInfo],[r]));const a=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,o[0],o[1]):e.setOutputMatrixTexture(a.texture,o[0],o[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===pe().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let r=0;r<n.length;++r){const s=n[r],{uniform:a,offset:o,shape:i,texShape:u}=t.variablesLocations[r];if(i){const{uniformShape:n}=xd(t.program.packedInputs,s.shape,s.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(i,new Int32Array(n));break;case 2:e.gl.uniform2iv(i,new Int32Array(n));break;case 3:e.gl.uniform3iv(i,new Int32Array(n));break;case 4:e.gl.uniform4iv(i,new Int32Array(n))}}if(u&&e.gl.uniform2i(u,s.texData.texShape[0],s.texData.texShape[1]),null!=a)if(s.isUniform)if(B(s.shape)<2)e.gl.uniform1f(a,s.uniformValues[0]);else{let t=s.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=s.texData.slice&&null!=o&&e.gl.uniform1i(o,s.texData.slice.flatOffset),e.setInputMatrixTexture(s.texData.texture.texture,a,r)}const i=t.outShapeLocation;if(i)switch(r.shape.length){case 1:e.gl.uniform1iv(i,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(i,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(i,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(i,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const n=J(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&s)for(let n=0;n<t.program.customUniforms.length;++n){const r=t.program.customUniforms[n],a=t.customUniformLocations[n],o=s[n];if("float"===r.type)e.gl.uniform1fv(a,o);else if("vec2"===r.type)e.gl.uniform2fv(a,o);else if("vec3"===r.type)e.gl.uniform3fv(a,o);else if("vec4"===r.type)e.gl.uniform4fv(a,o);else if("int"===r.type)e.gl.uniform1iv(a,o);else if("ivec2"===r.type)e.gl.uniform2iv(a,o);else if("ivec3"===r.type)e.gl.uniform3iv(a,o);else{if("ivec4"!==r.type)throw Error(`uniform type ${r.type} is not supported yet.`);e.gl.uniform4iv(a,o)}}e.executeProgram()}(this.gpgpu,h,l,c,r),u.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=pe().getNumber("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Nt();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!pe().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,r,s=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,r,s)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(pe().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=_n((()=>{if(!pe().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=pe().getBool("DEBUG");pe().set("DEBUG",!1);const t=this.abs(po(1e-8)).dataSync()[0];if(pe().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:s,texture:a,usage:o,isPacked:i}=t;if(null!=a)return;const u=null!=this.activeTimers;let l;u&&(l=Nt());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=pe().getNumber("WEBGL_MAX_TEXTURE_SIZE"),r=pe().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(r===1/0&&pe().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(r=n/2),t&&(n*=2,r*=2,1===(e=e.map(((t,n)=>n>=e.length-2?O(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=H(e);e=t.newShape}let s=B(e),a=null;e.length<=1&&s<=n?a=[1,s]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const o=null!=a&&Math.max(...a)>r&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||o)if(t){const t=Hh(e);let n=2,r=2;e.length&&([n,r]=Kh(e)),s=t*(n/2)*(r/2),a=V(s).map((e=>2*e))}else a=V(s);return a}(n,i),t.texShape=c),null!=s){const e=jh(n);let a,o=c[1],p=c[0];const h=s instanceof Uint8Array||s instanceof Uint8ClampedArray;!i&&h||([o,p]=Ah(c[0],c[1])),a=i?new Cd(e,h):new _d(e,h);const d=h?[p,o]:c,f=this.makeTensorInfo(d,r),m=this.texData.get(f.dataId);m.usage=h?Ih.PIXELS:Ih.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,p,s);const g=[[p,o]],y=!0,x=this.runWebGLProgram(a,[f],r,g,y),b=this.texData.get(x.dataId);t.texShape=b.texShape,t.isPacked=b.isPacked,t.usage=b.usage,pe().get("ENGINE_COMPILE_ONLY")?this.disposeData(x.dataId):(t.texture=b.texture,t.values=null,this.texData.delete(x.dataId)),this.disposeIntermediateTensorInfo(f),u&&(this.uploadWaitMs+=Nt()-l)}else{const e=this.acquireTexture(c,o,r,i);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*q(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await new Promise((e=>Jl((()=>e())))),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw Lh(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:t,customUniformLocations:n,infLoc:r,nanLoc:s,outShapeLocation:a,outShapeStridesLocation:o,outTexShapeLocation:i}=vd(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=n,e.infLoc=r,e.nanLoc=s,e.outShapeLocation=a,e.outShapeStridesLocation=o,e.outTexShapeLocation=i}}createTensorFromGPUData(e,t,n){e.channels=e.channels||"RGBA";const{texture:r,height:s,width:a,channels:o}=e,i=kn().backend;if(!i.gpgpu.gl.isTexture(r))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through \'new tf.MathBackendWebGL(customCanvas)\'.");const u=i.writeTexture(r,t,n,s,a,o);return kn().makeTensorFromDataId(u,t,n,i)}}$g.nextDataId=0,fn()&&function(e,t,n=1){pn.registerBackend(e,t,n)}("webgl",(()=>new $g),2);class Ig{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=yd(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return kg.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\\n        ${t} sourceLoc;\\n        ${t} coords = getOutputCoords();\\n        ${e.map(((e,t)=>`sourceLoc.${kg[t]} = start[${t}] + coords.${kg[t]};`)).join("\\n")}\\n      `,this.userCode=`\\n      void main() {\\n        ${r}\\n        setOutput(getSource(${n}));\\n      }\\n    `}}const kg=["x","y","z","w","u","v"];class _g{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=yd(this.rank),n=eg("coords",this.rank),r=eg("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,o=`\\n      result.x = ${a};\\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\\n        ++${r[this.rank-1]};\\n        result.y = ${a};\\n        --${r[this.rank-1]};\\n      }\\n    `,i=1===this.rank?"":`\\n      --${n[this.rank-1]};\\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\\n        ++${r[this.rank-2]};\\n        result.z = ${a};\\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\\n          ++${r[this.rank-1]};\\n          result.w = ${a};\\n        }\\n      }\\n    `,u=this.rank<=4?`sourceLoc = coords +\\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\\n");this.userCode=`\\n      void main() {\\n        ${t} coords = getOutputCoords();\\n        ${t} sourceLoc;\\n        ${u}\\n        vec4 result = vec4(0.);\\n        ${o}\\n        ${i}\\n        setOutput(result);\\n      }\\n    `}}function Cg(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:o}=r,[i,u]=Ss(s,a,o);if(ls(s,i,u),0===B(u))return n.makeTensorInfo(u,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||"string"===s.dtype){const e=n.texData.get(s.dataId),t=Bm(e.values,i,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,t)}const{isPacked:l}=n.texData.get(s.dataId),c=vs(s.shape,i,u);if(l||!c){const e=pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _g(u):new Ig(u),t=[i];return n.runWebGLProgram(e,[s],s.dtype,t)}return n.uploadToGPU(s.dataId),function(e,t,n,r){const s=r.texData.get(e.dataId),a=r.makeTensorInfo(n,e.dtype),o=r.texData.get(a.dataId);Object.assign(o,s),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=Ts(t,J(e.shape));s.slice&&(i+=s.slice.flatOffset),o.slice={flatOffset:i,origDataId:s.slice&&s.slice.origDataId||e.dataId};const u=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,u+1),a}(s,i,u,n)}const Ag={kernelName:Ze,backendName:"webgl",kernelFunc:Cg};function Rg(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,o=n,i=B(s.shape),u=function(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can\'t be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}(a,i),l=B(u);M(i===l,(()=>`The new shape (${u}) has ${l} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`));const c=o.texData.get(s.dataId);return!c.isPacked||Xh(s.shape,u)||null!==c.texture&&Xh(c.shape,u)?(o.incRef(s.dataId),{dataId:s.dataId,shape:u,dtype:s.dtype}):function(e,t,n){const r=[Hh(e.shape),...Kh(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[Hh(t),...Kh(t)],o=new ng(a,r),i=[r],u=n.runWebGLProgram(o,[s],e.dtype,i,!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(s,u,o)}const Og={kernelName:Ye,backendName:"webgl",kernelFunc:Rg};class Dg{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=os(t,n),this.enableShapeUniforms=Sd(this.outputShape.length),this.userCode=`\\n      float binaryOperation(float a, float b) {\\n        ${e}\\n      }\\n\\n      void main() {\\n        float a = getAAtOutCoords();\\n        float b = getBAtOutCoords();\\n        setOutput(binaryOperation(a, b));\\n      }\\n    `}}class Mg{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=os(t,n);const s=this.outputShape.length;this.enableShapeUniforms=Sd(s);let a="";if(r)if(0===s||1===B(this.outputShape))a="\\n          result.y = 0.;\\n          result.z = 0.;\\n          result.w = 0.;\\n        ";else if(a=`\\n          ${yd(s)} coords = getOutputCoords();\\n        `,1===s)this.enableShapeUniforms?a+="\\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\\n            result.z = 0.;\\n            result.w = 0.;\\n          ":a+=`\\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\\n            result.z = 0.;\\n            result.w = 0.;\\n          `;else{const e=eg("coords",s);this.enableShapeUniforms?a+=`\\n            bool nextRowOutOfBounds =\\n              (${e[s-2]} + 1) >= outShape[${s} - 2];\\n            bool nextColOutOfBounds =\\n              (${e[s-1]} + 1) >= outShape[${s} - 1];\\n            result.y = nextColOutOfBounds ? 0. : result.y;\\n            result.z = nextRowOutOfBounds ? 0. : result.z;\\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\\n          `:a+=`\\n            bool nextRowOutOfBounds =\\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\\n            bool nextColOutOfBounds =\\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\\n            result.y = nextColOutOfBounds ? 0. : result.y;\\n            result.z = nextRowOutOfBounds ? 0. : result.z;\\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\\n          `}this.userCode=`\\n      vec4 binaryOperation(vec4 a, vec4 b) {\\n        ${e}\\n      }\\n\\n      void main() {\\n        vec4 a = getAAtOutCoords();\\n        vec4 b = getBAtOutCoords();\\n\\n        vec4 result = binaryOperation(a, b);\\n        ${a}\\n\\n        setOutput(result);\\n      }\\n    `}}function Fg(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const Lg={kernelName:Be,backendName:"webgl",kernelFunc:Fg};function Bg(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(a.dataId),i=Fg({inputs:{x:r},backend:n}),u=Fg({inputs:{x:s},backend:n});return o.complexTensorInfos={real:i,imag:u},a}const Pg="return (a < 0.) ? b * a : a;",Ug="\\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\\n",Vg="return (a < 0.) ? b * a : a;",Wg="\\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\\n";function zg(e,t=!1){if("linear"===e)return t?gg:lg;if("relu"===e)return t?xg:hg;if("elu"===e)return t?yg:pg;if("relu6"===e)return t?bg:dg;if("prelu"===e)return t?Wg:Vg;if("leakyrelu"===e)return t?Ug:Pg;if("sigmoid"===e)return t?wg:mg;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class Gg{constructor(e,t,n,r=!1,s=!1,a=!1,o=null,i=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=Sd(this.outputShape.length);const l=r?e[1]:e[2],c=Math.ceil(l/2),p=r?"i * 2, rc.y":"rc.y, i * 2",h=s?"rc.z, i * 2":"i * 2, rc.z",d=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          ${o}\\n        }`:u?`vec4 activation(vec4 a) {\\n          vec4 b = getLeakyreluAlphaAtOutCoords();\\n          ${o}\\n        }`:`vec4 activation(vec4 x) {\\n          ${o}\\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let x="rc.x",b="rc.x";e[0]<t[0]?x=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(b=`imod(rc.x, ${t[0]})`),this.userCode=`\\n      ${m}\\n      // Don\'t use uniform for sharedDimensionPacked for performance.\\n      const float sharedDimension = ${c}.0;\\n\\n      vec4 dot2x2ARowBCol(ivec3 rc) {\\n        vec4 result = vec4(0);\\n        int batchA = ${x};\\n        int batchB = ${b};\\n        for (int i = 0; i < ${c}; i++) {\\n          vec4 a = getMatrixA(batchA, ${p});\\n          vec4 b = getMatrixB(batchB, ${h});\\n\\n          // These swizzled products need to be separately added.\\n          // See: https://github.com/tensorflow/tfjs/issues/1735\\n          result += (${d[0]} * ${f[0]});\\n          result += (${d[1]} * ${f[1]});\\n        }\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n        vec4 result = dot2x2ARowBCol(rc);\\n\\n        ${y}\\n\\n        ${g}\\n\\n        setOutput(result);\\n      }\\n    `}}const Hg={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class Kg{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=os(t,n),this.userCode=`\\n      float binaryOpComplex(\\n          float areal, float aimag, float breal, float bimag) {\\n        ${e}\\n      }\\n\\n      void main() {\\n        float areal = getARealAtOutCoords();\\n        float aimag = getAImagAtOutCoords();\\n        float breal = getBRealAtOutCoords();\\n        float bimag = getBImagAtOutCoords();\\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\\n      }\\n    `}}const jg="return a * b;";function qg(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=en(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new Kg(Hg.REAL,r.shape,s.shape),o=new Kg(Hg.IMAG,r.shape,s.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],u=n.runWebGLProgram(a,i,"float32"),l=n.runWebGLProgram(o,i,"float32"),c=Bg({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[o,i]=$m(r.shape,s.shape,e.values,t.values,a),u=n.makeTensorInfo(i,a);return n.texData.get(u.dataId).values=o,u}let o;return o=pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Mg(jg,r.shape,s.shape):new Dg(jg,r.shape,s.shape),n.runWebGLProgram(o,[r,s],a)}const Xg={kernelName:He,backendName:"webgl",kernelFunc:qg};class Yg{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];const o=4*Math.floor(n/4),i=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${U(e)?e.toPrecision(2):e}, ones);`}let l="";s%n>0&&(l=`\\n        if (inIdx < 0 || inIdx >= ${s}) {\\n          return 0.0;\\n        }\\n      `),this.userCode=`\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        ${l}\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * ${n};\\n\\n        float sumValue = 0.0;\\n\\n        for (int i = 0; i < ${o}; i += 4) {\\n          int inIdx = inOffset + i;\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          ${u}\\n        }\\n\\n        int inIdx = inOffset + ${o};\\n        if (${1===i}) {\\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\\n\\n          ${u}\\n        } else if (${2===i}) {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1), 0.0, 0.0);\\n\\n          ${u}\\n        } else if (${3===i}) {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2), 0.0);\\n\\n          ${u}\\n        }\\n        setOutput(sumValue);\\n      }\\n    `}}class Qg{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let p=`\\n      if (${"sum"===t}) {\\n        sumValue += dot(values, ones);\\n      } else if (${"prod"===t}) {\\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\\n        prodValue *= tmp[0] * tmp[1];\\n      } else {\\n        minMaxValue = ${i}(values, minMaxValue);\\n        if (${"min"===t} || ${"max"===t}) {\\n          minMaxValue = ${i}(values, minMaxValue);\\n          bvec4 isNaN = isnan(values);\\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\\n            minMaxValue = vec4(NAN);\\n          }\\n        }\\n      }\\n    `,h="vec4";"all"===t?(o="1.0",p="\\n        bool reducedAllValue = all(values);\\n        float floatedReducedAllValue = float(reducedAllValue);\\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\\n      ",h="bvec4"):"any"===t&&(o="0.0",p="\\n        bool reducedAnyValue = any(values);\\n        float floatedReducedAnyValue = float(reducedAnyValue);\\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\\n      ",h="bvec4");let d="";s%n>0&&(d=`\\n        if (inIdx < 0 || inIdx >= ${s}) {\\n          return initializationValue;\\n        }\\n      `),this.userCode=`\\n      const float initializationValue = ${o};\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        ${d}\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * ${n};\\n\\n        vec4 minMaxValue = vec4(${o});\\n        float prodValue = 1.0;\\n        float sumValue = 0.0;\\n        float allValue = 1.0;\\n        float anyValue = 0.0;\\n\\n        for (int i = 0; i < ${l}; i += 4) {\\n          int inIdx = inOffset + i;\\n          ${h} values = ${h}(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          ${p}\\n        }\\n\\n        int inIdx = inOffset + ${l};\\n        if (${1===c}) {\\n          ${h} values = ${h}(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          ${p}\\n        } else if (${2===c}) {\\n          ${h} values = ${h}(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          ${p}\\n        } else if (${3===c}) {\\n          ${h} values = ${h}(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          ${p}\\n        }\\n        setOutput(${u});\\n      }\\n    `}}class Zg{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=yd(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\\n    void main() {\\n      ${r} resRC = getOutputCoords();\\n      setOutput(getA(${s}));\\n    }\\n    `}}class Jg{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=yd(this.rank),s=Jm("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=s[e];const o=`vec2(${a.slice(-2).join()})`,i=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${o})`;this.userCode=`\\n    void main() {\\n      ${r} rc = getOutputCoords();\\n      vec4 result = vec4(0.);\\n      result[0] = ${u};\\n      if(${i}) {\\n        result[1] = ${u};\\n      }\\n      --${s[this.rank-1]};\\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\\n        result[2] = ${u};\\n        if(${i}) {\\n          result[3] = ${u};\\n        }\\n      }\\n      setOutput(result);\\n    }\\n    `}}function ey(e,t,n){const r=pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Jg(e.shape,t):new Zg(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function ty(e,t,n,r){const s=t,a=e.shape.length,o=G(s,e.shape);let i=o;const u=ao(i,a),l=null!=u;let c=e;l&&(c=ey(e,u,r),i=io(i.length,a)),so("sum",i,a);const[p,h]=no(c.shape,i);let d=p;n&&(d=ro(p,o));const f=B(h),m=Rg({inputs:{x:c},attrs:{shape:[B(e.shape)/f,f]},backend:r}),g=function(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=uc(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let o=0;o<s.length;o++){const{inSize:i,windowSize:u,outSize:l}=s[o];let c,p;c="mean"===n?0===o?new Yg({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},i):new Yg({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l}):new Qg({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},n),p=a,a=r.runWebGLProgram(c,[a],t),p.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(p)}return a}(m,en(e.dtype,"int32"),"sum",r),y=Rg({inputs:{x:g},attrs:{shape:d},backend:r});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),l&&r.disposeIntermediateTensorInfo(c),y}function ny(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,o=n,i=s.shape.length,u=new Array(i);for(let e=0;e<u.length;e++)u[e]=s.shape[a[e]];let l;if(o.shouldExecuteOnCPU([s])){const e=o.texData.get(s.dataId).values,t=Qm(e,s.shape,s.dtype,a,u);l=o.makeTensorInfo(u,s.dtype),o.texData.get(l.dataId).values=t}else l=ey(s,a,o);return l}function ry({a:e,b:t,transposeA:n,transposeB:r,backend:s,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:u=null}){const l=e.shape.length,c=t.shape.length,p=n?e.shape[l-2]:e.shape[l-1],h=r?t.shape[c-1]:t.shape[c-2],d=n?e.shape[l-1]:e.shape[l-2],f=r?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=B(m),x=B(g),b=os(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);M(p===h,(()=>`Error in matMul: inner shapes (${p}) and (${h}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[y,p,d]:[y,d,p],v=r?[x,f,h]:[x,h,f],T=Rg({inputs:{x:e},backend:s,attrs:{shape:w}}),S=Rg({inputs:{x:t},backend:s,attrs:{shape:v}}),E=[T,S],N=Math.max(y,x),$=n?T.shape[1]:T.shape[2],I=null!=a,k=null!=o,_="leakyrelu"===u,C=null!=u?zg(u,!0):null;let A;if((1===d||1===f)&&$>1e3&&!1===(I||k||_||null!=C)){let e=T,t=S;n&&(e=ny({inputs:{x:T},backend:s,attrs:{perm:[0,2,1]}}),E.push(e)),r&&(t=ny({inputs:{x:S},backend:s,attrs:{perm:[0,2,1]}}),E.push(t));const a=1===f;let o=e;1!==f&&(o=Rg({inputs:{x:e},backend:s,attrs:{shape:[N,$,1]}}),E.push(o));const i=1===f?2:1;let u=t;a&&(u=Rg({inputs:{x:t},backend:s,attrs:{shape:[N,1,$]}}),E.push(u));const l=qg({inputs:{a:o,b:u},backend:s});A=function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:o}=r;return ty(s,a,o,n)}({inputs:{x:l},backend:s,attrs:{axis:i,keepDims:!0}}),E.push(l)}else{const u=en(e.dtype,t.dtype),l=new Gg(w,v,[N,d,f],n,r,I,C,k,_),c=[T,S];if(null!=a&&c.push(a),k&&c.push(o),_){const e=s.makeTensorInfo([],"float32",St(i,"float32"));c.push(e),E.push(e)}A=s.runWebGLProgram(l,c,u)}const R=Rg({inputs:{x:A},backend:s,attrs:{shape:b}});E.push(A);for(const e of E)s.disposeIntermediateTensorInfo(e);return R}const sy={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:p}=r;return ry({a:s,b:a,transposeA:u,transposeB:l,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:p,activation:c})}};class ay{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`\\n      const ivec2 pads = ivec2(${o}, ${i});\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[${c}];\\n\\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < ${t}; wR++) {\\n          float dyR = float(dyRCorner + wR) / ${r}.0;\\n\\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = ${t} - 1 - wR;\\n\\n          for (int wC = 0; wC < ${n}; wC++) {\\n            float dyC = float(dyCCorner + wC) / ${s}.0;\\n\\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = ${n} - 1 - wC;\\n\\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\\n\\n              if (${a}) {\\n                float xValue = getDy(batch, idyR, idyC, d2);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              } else {\\n                float xValue = getDy(batch, d2, idyR, idyC);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}class oy{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=Sd(this.outputShape.length);const t=e.filterHeight,n=e.filterWidth,r=t-1-e.padInfo.top,s=n-1-e.padInfo.left;this.userCode=`\\n      const ivec2 pads = ivec2(${r}, ${s});\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n\\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        vec4 result = vec4(0.);\\n        for (int wR = 0; wR < ${t}; wR++) {\\n          float dyR = float(dyRCorner + wR) / strides[0];\\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n          int wRPerm = ${t} - 1 - wR;\\n\\n          for (int wC = 0; wC < ${n}; wC++) {\\n            int wCPerm = ${n} - 1 - wC;\\n\\n            float dyC = float(dyCCorner + wC) / strides[1];\\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)\\n              && (fract(dyC) == 0.0);\\n            int idyC = int(dyC);\\n\\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)\\n              && (fract(dyC2) == 0.0);\\n            int idyC2 = int(dyC2);\\n\\n            if (idyCVal && idyCVal2) {\\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\\n                  dySample : getDy(batch, idyR, idyC2, d2);\\n\\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\\n                  dySample.xy : dySample.zw;\\n                result.xy += vec2(dot(dyValue, wValue.xy),\\n                  dot(dyValue, wValue.zw));\\n\\n                dyValue = mod(float(idyC2), 2.) == 0. ?\\n                  dySample2.xy : dySample2.zw;\\n                result.zw += vec2(dot(dyValue, wValue.xy),\\n                  dot(dyValue, wValue.zw));\\n              }\\n            } else if (idyCVal) {\\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\\n                  dySample.xy : dySample.zw;\\n                result.xy += vec2(dot(dyValue, wValue.xy),\\n                  dot(dyValue, wValue.zw));\\n              }\\n            } else if (idyCVal2) {\\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\\n                  dySample.xy : dySample.zw;\\n                result.zw += vec2(dot(dyValue, wValue.xy),\\n                  dot(dyValue, wValue.zw));\\n              }\\n            }\\n          }\\n        }\\n        setOutput(result);\\n      }\\n    `}}const iy={kernelName:Ae,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:o,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=r,p=Js(l),h=zs(o,a.shape,i,1,u,c,!1,p);if(pe().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===p){const e=[[h.strideHeight,h.strideWidth]],t=new oy(h);return n.runWebGLProgram(t,[s,a],"float32",e)}{const e=new ay(h);return n.runWebGLProgram(e,[s,a],"float32")}}},uy="return a + b;",ly=function({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:o,backend:i})=>{const{a:u,b:l}=o,c=i;if(r&&"complex64"===u.dtype){const t=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:u.shape},a={dataId:r.dataId,dtype:r.dtype,shape:l.shape},o=new Dg(e,u.shape,l.shape);return c.runWebGLProgram(o,[s,a],en(n.dtype,r.dtype))})),a=Bg({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const p=a||en(u.dtype,l.dtype);if(("string"===u.dtype||"string"===l.dtype||c.shouldExecuteOnCPU([u,l]))&&null!=s){const e=c.texData.get(u.dataId).values,t=c.texData.get(l.dataId).values,n="string"===u.dtype?ap(e):e,r="string"===u.dtype?ap(t):t,[a,o]=s(u.shape,l.shape,n,r,p),i=c.makeTensorInfo(o,p);return c.texData.get(i.dataId).values=a,i}let h;return h=pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new Mg(t,u.shape,l.shape,n):new Dg(e,u.shape,l.shape),c.runWebGLProgram(h,[u,l],p)}}({opSnippet:uy,packedOpSnippet:uy,supportsComplex:!0,cpuKernelImpl:sm}),cy={kernelName:Ne,backendName:"webgl",kernelFunc:ly},py=function({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:a})=>{const{x:o}=s,i=a,u=r||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,u);return i.makeTensorInfo(o.shape,u,t)}let l;return l=pe().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new vg(o.shape,t):new ig(o.shape,e),i.runWebGLProgram(l,[o],u)}}({opSnippet:ug+"\\n  return (x < 0.0) ? 0.0 : x;\\n",packedOpSnippet:"\\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n"}),hy={kernelName:Xe,backendName:"webgl",kernelFunc:py};class dy{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,p=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,x=m?3:1;let b="",w="";n&&(b=r?`float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          ${n}\\n        }`:s?`float activation(float a) {\\n          float b = getLeakyreluAlphaAtOutCoords();\\n          ${n}\\n        }`:`\\n          float activation(float x) {\\n            ${n}\\n          }\\n        `,w="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\\n      ${b}\\n\\n      const ivec2 strides = ivec2(${i}, ${u});\\n      const ivec2 pads = ivec2(${a}, ${o});\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d2 = coords[${x}];\\n\\n        ivec2 xRCCorner =\\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < ${p}; wR++) {\\n          int xR = xRCorner + wR * ${l};\\n\\n          if (xR < 0 || xR >= ${e.inHeight}) {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < ${h}; wC++) {\\n            int xC = xCCorner + wC * ${c};\\n\\n            if (xC < 0 || xC >= ${e.inWidth}) {\\n              continue;\\n            }\\n\\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\\n              vec4 wValues = vec4(\\n                getW(wR, wC, d1, d2),\\n                getW(wR, wC, d1 + 1, d2),\\n                getW(wR, wC, d1 + 2, d2),\\n                getW(wR, wC, d1 + 3, d2)\\n              );\\n\\n              if (${m}) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xR, xC, d1),\\n                  getX(batch, xR, xC, d1 + 1),\\n                  getX(batch, xR, xC, d1 + 2),\\n                  getX(batch, xR, xC, d1 + 3)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec4 xValues = vec4(\\n                  getX(batch, d1, xR, xC),\\n                  getX(batch, d1 + 1, xR, xC),\\n                  getX(batch, d1 + 2, xR, xC),\\n                  getX(batch, d1 + 3, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n\\n            if (${1===f}) {\\n\\n              if (${m}) {\\n                dotProd +=\\n                    getX(batch, xR, xC, ${d}) *\\n                    getW(wR, wC, ${d}, d2);\\n              } else {\\n                dotProd +=\\n                    getX(batch, ${d}, xR, xC) *\\n                    getW(wR, wC, ${d}, d2);\\n              }\\n\\n            } else if (${2===f}) {\\n              vec2 wValues = vec2(\\n                getW(wR, wC, ${d}, d2),\\n                getW(wR, wC, ${d} + 1, d2)\\n              );\\n\\n              if (${m}) {\\n                vec2 xValues = vec2(\\n                  getX(batch, xR, xC, ${d}),\\n                  getX(batch, xR, xC, ${d} + 1)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec2 xValues = vec2(\\n                  getX(batch, ${d}, xR, xC),\\n                  getX(batch, ${d} + 1, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            } else if (${3===f}) {\\n              vec3 wValues = vec3(\\n                getW(wR, wC, ${d}, d2),\\n                getW(wR, wC, ${d} + 1, d2),\\n                getW(wR, wC, ${d} + 2, d2)\\n              );\\n\\n              if (${m}) {\\n                vec3 xValues = vec3(\\n                  getX(batch, xR, xC, ${d}),\\n                  getX(batch, xR, xC, ${d} + 1),\\n                  getX(batch, xR, xC, ${d} + 2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec3 xValues = vec3(\\n                  getX(batch, ${d}, xR, xC),\\n                  getX(batch, ${d} + 1, xR, xC),\\n                  getX(batch, ${d} + 2, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            }\\n          }\\n        }\\n\\n        float result = dotProd;\\n        ${v}\\n        ${w}\\n        setOutput(result);\\n      }\\n    `}}class fy{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Sd(this.outputShape.length);const a=e.padInfo.left,o=e.strideWidth,i=e.dilationWidth,u=e.filterHeight,l=e.filterWidth,c=l;let p="\\n       int xR; int xC; int xCOffset;\\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<l;e++)p+=`\\n           vec4 xTexelC${2*e};\\n           int xTexelC${2*e}Ready;\\n           vec4 xTexelC${2*e+1};\\n           int xTexelC${2*e+1}Ready;\\n           vec4 xC${e};`;p+=`\\n     for (int r = 0; r < ${u}; r++) {\\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\\n       `;for(let e=0;e<l;e++)p+=`\\n           xTexelC${2*e} = vec4(0.0);\\n           xTexelC${2*e}Ready = 0;\\n           xTexelC${2*e+1} = vec4(0.0);\\n           xTexelC${2*e+1}Ready = 0;\\n           xC${e} = vec4(0.0);`;p+="\\n         xR = xRCorner + r * dilations[0];\\n         if (xR >=0 && xR < inDims[0]) {\\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(p+=`\\n           xC = xCCorner + ${n*i};\\n           `,1===o){if(n<l&&(a%2==1?(p+=`\\n                 xCOffset = xC + 1;\\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\\n\\n                   // Need to manually clear unused channels in case\\n                   // we\'re reading from recycled texture.\\n                   if (xCOffset + 1 >= inDims[1]) {\\n                     xTexelC${n}.zw = vec2(0.0);\\n                   }\\n                   xTexelC${n}Ready = 1;\\n                 }\\n               `,p+=1===i&&n>0?`\\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\\n                 `:`\\n                   xCOffset = xC + 1 - 2;\\n\\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\\n                     previous = getX(batch, xR, xCOffset, d1);\\n\\n                     // Need to manually clear unused channels in case\\n                     // we\'re reading from recycled texture.\\n                     if (xCOffset + 1 >= inDims[1]) {\\n                       previous.zw = vec2(0.0);\\n                     }\\n\\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\\n                   } else {\\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\\n                   }\\n                   `):p+=`\\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\\n                   xTexelC${n} = getX(batch, xR, xC, d1);\\n                   if (xC + 1 >= inDims[1]) {\\n                     xTexelC${n}.zw = vec2(0.0);\\n                   }\\n                   xTexelC${n}Ready = 1;\\n                 }\\n\\n                 xC${n} = xTexelC${n};\\n                 `,n+1<l)){const e=a%2==0?O(i):i;i%2==0&&a%2==1||i%2!=0&&a%2!=1?(p+=`\\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\\n\\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\\n\\n                     // Need to manually clear unused channels in case\\n                     // we\'re reading from recycled texture.\\n                     if (xCOffset + 1 >= inDims[1]) {\\n                       xTexelC${n+1}.zw = vec2(0.0);\\n                     }\\n                     xTexelC${n+1}Ready = 1;\\n                   }\\n                   `,p+=i>1?`\\n                     xCOffset -= 2;\\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\\n                      previous = getX(batch, xR, xCOffset, d1);\\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\\n                     } else {\\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\\n                     }\\n                     `:`\\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\\n                     `):p+=1===e?`\\n                     xC${n+1} = xTexelC${n};\\n                     `:`\\n                     xCOffset = xC + ${e};\\n\\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\\n                       if (xCOffset + 1 >= inDims[1]) {\\n                         xTexelC${n+1}.zw = vec2(0.0);\\n                       }\\n                       xTexelC${n+1}Ready = 1;\\n                     }\\n\\n                     xC${n+1} = xTexelC${n+1};\\n                     `}}else n<l&&(a%2==1?(p+=`\\n                 xCOffset = xC + 1 - strides[1];\\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\\n                   // Need to manually clear unused channels in case\\n                   // we\'re reading from recycled texture.\\n                   if (xCOffset + 1 >= inDims[1]) {\\n                     xTexelC${n}.zw = vec2(0.0);\\n                   }\\n                   xTexelC${n}Ready = 1;\\n                 }\\n\\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\\n                   // Need to manually clear unused channels in case\\n                   // we\'re reading from recycled texture.\\n                   if (xC + 2 >= inDims[1]) {\\n                     xTexelC${n+1}.zw = vec2(0.0);\\n                   }\\n                   xTexelC${n+1}Ready = 1;\\n                 }\\n\\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\\n               `,n+1<l&&(p+=`\\n                   final = vec4(0.0);\\n                   xCOffset = xC + 1 + strides[1];\\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\\n                     final = getX(batch, xR, xCOffset, d1);\\n                   }\\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\\n                 `)):(p+=`\\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\\n                   xTexelC${n} = getX(batch, xR, xC, d1);\\n                   if (xC + 1 >= inDims[1]) {\\n                     xTexelC${n}.zw = vec2(0.0);\\n                   }\\n                   xTexelC${n}Ready = 1;\\n                 }\\n\\n                 xCOffset = xC + strides[1];\\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\\n                   if (xCOffset + 1 >= inDims[1]) {\\n                     xTexelC${n+1}.zw = vec2(0.);\\n                   }\\n                   xTexelC${n+1}Ready = 1;\\n                 }\\n\\n                 xC${n} = vec4(\\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\\n               `,n+1<l&&(p+=`\\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\\n                 `)));n<l&&(p+=`\\n             wTexel = getW(r, ${n}, d1, d2);\\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\\n             if(d1 + 1 < ${e.inChannels}) {\\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\\n             }\\n           `,n+1<l&&(p+=`\\n               wTexel = getW(r, ${n+1}, d1, d2);\\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\\n               if(d1 + 1 < ${e.inChannels}) {\\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\\n               }\\n             `))}p+="\\n     }\\n   ",p+="\\n     }\\n   ",p+="\\n     }\\n   ";let h="",d="";n&&(h=r?`vec4 activation(vec4 a) {\\n           vec4 b = getPreluActivationWeightsAtOutCoords();\\n           ${n}\\n         }`:s?`vec4 activation(vec4 a) {\\n           vec4 b = getLeakyreluAlphaAtOutCoords();\\n           ${n}\\n         }`:`vec4 activation(vec4 x) {\\n           ${n}\\n         }`,d="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\\n       ${h}\\n\\n       void main() {\\n         ivec4 coords = getOutputCoords();\\n         int batch = coords.x;\\n         ivec2 xRCCorner = coords.yz * strides - pads;\\n         int d2 = coords.w;\\n         int xRCorner = xRCCorner.x;\\n         int xCCorner = xRCCorner.y;\\n\\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\\n         vec4 dotProd = vec4(0.000000000000001);\\n\\n         ${p}\\n\\n         vec4 result = dotProd - vec4(0.000000000000001);\\n         ${f}\\n         ${d}\\n         setOutput(result);\\n       }\\n     `}}class my{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=Sd(this.outputShape.length);const{dataFormat:n}=t,r=nd(),s="channelsLast"===n,a=s?1:2,o=s?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let u="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)u+=`\\n          blockIndex = rc.z + ${t};\\n          pos = rc.y + ${e};\\n\\n          ${i}\\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\\n\\n            if(d0 < inputShape[${a}] && d0 >= 0) {\\n              // Use custom imod instead mod. On Intel GPU, mod may generate\\n              // unexpected value.\\n              // https://github.com/tensorflow/tfjs/issues/5447\\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\\n                  inChannels);\\n\\n              if(d1 < inputShape[${o}] && d1 >= 0) {\\n\\n                ch = imod(pos, inChannels);\\n\\n                if (${s}) {\\n                  innerDims = vec2(d1, ch);\\n                  result[${2*e+t}] = getChannel(\\n                    getA(rc.x, d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[${2*e+t}] = getChannel(\\n                    getA(rc.x, ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        `;this.userCode=`\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        ${u}\\n\\n        ${r.output} = result;\\n      }\\n    `}}function gy(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}const yy={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:h,activation:d,leakyreluAlpha:f}=r,m=Js(c),g=zs(s.shape,a.shape,u,p,l,h,!1,m);let y;const x=[],b=null!=o,w=null!=i,v="leakyrelu"===d,T=()=>{const e=[s,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=Rg({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return x.push(t),t}return e};if(b&&e.push(t(o,c)),w&&e.push(t(i,c)),v){const t=n.makeTensorInfo([],"float32",St(f,"float32"));e.push(t),x.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&pe().getBool("WEBGL_EXP_CONV")){const e=d?zg(d,!0):null,t=new fy(g,b,e,w,v),r=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],s=T();y=n.runWebGLProgram(t,s,"float32",r)}else if(pe().getBool("WEBGL_CONV_IM2COL"))y=function({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:u,filterHeight:l,inChannels:c,outWidth:p,outHeight:h,dataFormat:d}=n,f="channelsLast"===d,m=u*l*c,g=h*p,y=[n.batchSize,m,g],x=[];if(null!=a){const e=gy(a.shape,f);null!=e&&(a=Rg({inputs:{x:a},backend:r,attrs:{shape:e}}),x.push(a))}if(null!=s){const e=gy(s.shape,f);null!=e&&(s=Rg({inputs:{x:s},backend:r,attrs:{shape:e}}),x.push(s))}const b=Rg({inputs:{x:t},backend:r,attrs:{shape:[1,m,B(t.shape)/m]}});x.push(b);const w=new my(y,n),v=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],T=r.runWebGLProgram(w,[e],"float32",v),S=Rg({inputs:{x:T},backend:r,attrs:{shape:y}});x.push(T),x.push(S);const E=null!=s,N=null!=a,$="leakyrelu"===i,I=i?zg(i,!0):null,k=new Gg(f?S.shape:b.shape,f?b.shape:S.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,E,I,N,$),_=f?[S,b]:[b,S];if(s&&_.push(s),N&&_.push(a),$){const e=r.makeTensorInfo([],"float32",St(o,"float32"));_.push(e),x.push(e)}const C=r.runWebGLProgram(k,_,"float32"),A=Rg({inputs:{x:C},backend:r,attrs:{shape:n.outShape}});x.push(C);for(const e of x)r.disposeIntermediateTensorInfo(e);return A}({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});else{const e=d?zg(d,!1):null,t=new dy(g,b,e,w,v),r=T();y=n.runWebGLProgram(t,r,"float32")}else y=function({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const u=e.shape,l=r.texData.get(e.dataId),c=n.inChannels,p=u[0]*u[1]*u[2],h=n.outChannels,d="channelsLast"===n.dataFormat,f=!1;let m;const g=[];if(null!=a){const e=gy(a.shape,d);null!=e&&(a=Rg({inputs:{x:a},backend:r,attrs:{shape:e}}),g.push(a))}if(null!=s){const e=gy(s.shape,d);null!=e&&(s=Rg({inputs:{x:s},backend:r,attrs:{shape:e}}),g.push(s))}if((1!==p&&1!==h||!(c>1e3))&&l.isPacked&&d&&null!=l.texture&&u[2]%2!=0&&P(l.shape.slice(-3),u.slice(-3))){const c=u[0]*u[1]*(u[2]+1),p={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},h=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,M(Xh(l.shape,p.shape),(()=>`packed reshape ${l.shape} to ${p.shape} isn\'t free`));const d=Rg({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(d);const y=ry({a:p,b:d,backend:r,transposeA:!1,transposeB:f,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o}),x=r.texData.get(y.dataId);M(x.isPacked,(()=>"batchMatMul result is expected to be packed")),l.shape=h,x.shape=n.outShape,m=Fg({inputs:{x:y},backend:r}),m.shape=n.outShape,g.push(y)}else{const u=n.outHeight*n.outWidth,l=Rg({inputs:{x:e},backend:r,attrs:{shape:d?[n.batchSize,u,n.inChannels]:[n.batchSize,n.inChannels,u]}}),c=Rg({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),p=ry({a:d?l:c,b:d?c:l,transposeA:!d,transposeB:f,backend:r,bias:s,activation:i,preluActivationWeights:a,leakyreluAlpha:o});m=Rg({inputs:{x:p},backend:r,attrs:{shape:n.outShape}}),g.push(l),g.push(c),g.push(p)}for(const e of g)r.disposeIntermediateTensorInfo(e);return m}({x:s,filter:a,convInfo:g,backend:n,bias:o,activation:d,preluActivationWeights:i,leakyreluAlpha:f});const S=Rg({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return x.push(y),x.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};class xy{constructor(e){this.outputShape=[],this.outputShape=tc(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,s=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int yR = coords.x;\\n        int yC = coords.y;\\n\\n        ${n.join("\\n        ")}\\n      }\\n    `}}class by{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=tc(e,t);const n=this.outputShape,r=n.length,s=yd(r),a=eg("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const u=o[t],l=o.slice(-2),c=o.join();let p=`if (${u} < ${i[0]}) {\\n        return getChannel(\\n            getT0(${c}), vec2(${l.join()}));\\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];p+=`\\n        if (${u} < ${i[e]}  && ${u} >= ${i[e-1]}) {\\n          return getChannel(\\n            getT${e}(${wy(o,u,t)}),\\n            vec2(${wy(l,u,t)}));\\n        }`}const h=i.length,d=i[i.length-1];p+=`\\n        return getChannel(\\n          getT${h}(${wy(o,u,d)}),\\n          vec2(${wy(l,u,d)}));`,this.userCode=`\\n      float getValue(${o.map((e=>"int "+e))}) {\\n        ${p}\\n      }\\n\\n      void main() {\\n        ${s} coords = getOutputCoords();\\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\\n\\n        ${a[r-1]} = ${a[r-1]} + 1;\\n        if (${a[r-1]} < ${n[r-1]}) {\\n          result.g = getValue(${a});\\n        }\\n\\n        ${a[r-2]} = ${a[r-2]} + 1;\\n        if (${a[r-2]} < ${n[r-2]}) {\\n          result.a = getValue(${a});\\n        }\\n\\n        ${a[r-1]} = ${a[r-1]} - 1;\\n        if (${a[r-2]} < ${n[r-2]} &&\\n            ${a[r-1]} < ${n[r-1]}) {\\n          result.b = getValue(${a});\\n        }\\n        setOutput(result);\\n      }\\n    `}}function wy(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function vy(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>function(e){const{inputs:t,backend:n}=e,{input:r}=t;return Fg({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}({inputs:{input:e},backend:n}))),s=e.map((e=>function(e){const{inputs:t,backend:n}=e,{input:r}=t;return Fg({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}({inputs:{input:e},backend:n}))),a=vy(r,t,n),o=vy(s,t,n),i=Bg({inputs:{real:a,imag:o},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),s.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),i}let s=n.shouldExecuteOnCPU(e);if("string"===r&&(s=!0),s){const s=e.map((e=>{const r=B(e.shape.slice(t));return Rg({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),a=s.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=tc(s.map((e=>e.shape)),1),i=1===s[0].shape[0],u=cm(a,o,r,i),l=tc(e.map((e=>e.shape)),t),c=n.makeTensorInfo(l,r,u);return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const a=e.filter((e=>B(e.shape)>0)),o=pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&a[0].shape.length>1;if(1===a.length){const t=o?new ig(e[0].shape,fg):new vg(e[0].shape,fg);return n.runWebGLProgram(t,e,r)}const i=pe().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(a.length>i){const e=[];for(let r=0;r<a.length;r+=i){const s=a.slice(r,r+i);e.push(vy(s,t,n))}const r=vy(e,t,n);for(const t of e)n.disposeIntermediateTensorInfo(t);return r}if(o){const e=new by(a.map((e=>e.shape)),t);return n.runWebGLProgram(e,a,r)}const{tensors2D:u,outShape:l}=function(e,t,n){const r=tc(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>Rg({inputs:{x:e},attrs:{shape:[-1,B(e.shape.slice(t))]},backend:n}))),outShape:r}}(a,t,n),c=new xy(u.map((e=>e.shape))),p=n.runWebGLProgram(c,u,r);u.forEach((e=>n.disposeIntermediateTensorInfo(e)));const h=Rg({inputs:{x:p},attrs:{shape:l},backend:n});return n.disposeIntermediateTensorInfo(p),h}function Ty(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=G(s,t[0].shape)[0];ec(t.map((e=>e.shape)),a);const o=tc(t.map((e=>e.shape)),a);if(0===B(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>B(e.shape)>0));return 1===i.length?Fg({inputs:{x:i[0]},backend:n}):vy(i,a,n)}const Sy={kernelName:Ce,backendName:"webgl",kernelFunc:Ty};class Ey{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\\n        const ivec2 strides = ivec2(${o}, ${i});\\n        const ivec2 pads = ivec2(${h}, ${d});\\n\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int batch = coords[0];\\n          int d = coords[3];\\n\\n          ivec2 xRCCorner = coords.yz * strides - pads;\\n          int xRCorner = xRCCorner.x;\\n          int xCCorner = xRCCorner.y;\\n\\n          // max/min x(?, ?, d) to get y(yR, yC, d).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n          float avgValue = 0.0;\\n\\n          for (int wR = 0; wR < ${c};\\n              wR += ${u}) {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= ${e.inHeight}) {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < ${p};\\n                wC += ${l}) {\\n              int xC = xCCorner + wC;\\n\\n              if (xC < 0 || xC >= ${e.inWidth}) {\\n                continue;\\n              }\\n\\n              float value = getX(batch, xR, xC, d);\\n\\n              // If a min / max value has already been found, use it. If not,\\n              // use the current value.\\n              float currMinMaxValue = mix(\\n                  value, minMaxValue, minMaxValueFound);\\n              if (value ${t} currMinMaxValue) {\\n                minMaxValue = value;\\n                minMaxValueFound = 1.0;\\n                minMaxPosition = ${r?s?m:g:`wR * ${p} + wC`};\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      `)}let x=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(x="avgValue / max(count, 1.0)");const b=4*Math.floor(a/4),w=a%4,v=`\\n      if (${f}) {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = max(values, minMaxValue);\\n      }\\n    `;this.userCode=`\\n      const ivec2 strides = ivec2(${o}, ${i});\\n      const ivec2 pads = ivec2(${h}, ${d});\\n      const float initializationValue = ${y};\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xR, int xC, int d) {\\n        if (xC < 0 || xC >= ${e.inWidth}) {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xR, xC, d);\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // max/min x(?, ?, d) to get y(yR, yC, d).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(${y});\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wR = 0; wR < ${c};\\n            wR += ${u}) {\\n          int xR = xRCorner + wR;\\n\\n          if (xR < 0 || xR >= ${e.inHeight}) {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < ${b}; wC += 4) {\\n            int xC = xCCorner + wC * ${l};\\n\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + ${l}, d),\\n              getValue(batch, xR, xC + 2 * ${l}, d),\\n              getValue(batch, xR, xC + 3 * ${l}, d)\\n            );\\n\\n            ${v}\\n          }\\n\\n          int xC = xCCorner + ${b};\\n          if (${1===w}) {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              initializationValue,\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            ${v}\\n          } else if (${2===w}) {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + ${l}, d),\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            ${v}\\n          } else if (${3===w}) {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + ${l}, d),\\n              getValue(batch, xR, xC + 2 * ${l}, d),\\n              initializationValue\\n            );\\n\\n            ${v}\\n          }\\n        }\\n        setOutput(${x});\\n      }\\n    `}}const Ny={kernelName:ze,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;!function(e){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&M("complex64"!==e.dtype,(()=>"maxPool does not support complex64 tensors in the WebGL backend."))}))}(s);const{filterSize:a,strides:o,pad:i,dimRoundingMode:u}=r;M(Qs(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations \'1\'`));const l=Vs(s.shape,a,o,1,i,u);if(1===l.filterWidth&&1===l.filterHeight&&P(l.inShape,l.outShape))return Fg({inputs:{x:s},backend:n});const c=new Ey(l,"max",!1);return n.runWebGLProgram(c,[s],s.dtype)}};class $y{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=yd(n.length),a=yd(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\\n      ${s} begin = ${s}(${e});\\n      ${s} strides = ${s}(${t});\\n\\n      void main() {\\n        ${a} coords = getOutputCoords();\\n        setOutput(getX(${o}));\\n      }\\n    `}}const Iy={kernelName:nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:o,strides:i,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:h}=r,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:x,end:b,strides:w}=Es(s.shape,a,o,i,u,l,c,p,h);let v;if(m)v=Rg({inputs:{x:s},backend:n,attrs:{shape:f}});else if(g||y){M(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=ps(x,b,w),t=Cg({inputs:{x:s},backend:n,attrs:{begin:x,size:e}});v=Rg({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else if(n.shouldExecuteOnCPU([s])){const e=n.readSync(s.dataId),t=Dr(s.shape,s.dtype,e),r=Gm(d,t,w,x);v=n.makeTensorInfo(f,s.dtype,r.values)}else{const e=new $y(x,w,d);v=n.runWebGLProgram(e,[s],s.dtype)}const T=Rg({inputs:{x:v},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(v),T}};function ky(e){const{inputs:t,attrs:n,backend:r}=e,{dim:s}=n,{input:a}=t,o=a.shape.length,i=a.shape.slice();let u=s;return s<0&&(M(-(o+1)<=s,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),u=o+s+1),i.splice(u,0,1),Rg({inputs:{x:a},backend:r,attrs:{shape:i}})}const _y={kernelName:je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return ky({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{F(a,e.shape,"All tensors passed to stack must have matching shapes"),M(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],u=Ty({inputs:t.map((e=>{const t=ky({inputs:{input:e},backend:n,attrs:{dim:s}});return i.push(t),t})),backend:n,attrs:{axis:s}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}};class Cy{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\\n      void main() {\\n        ${n.join("\\n        ")}\\n\\n        float result = ${r};\\n        setOutput(result);\\n      }\\n    `}}class Ay{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\\n      void main() {\\n        ${n.join("\\n        ")}\\n\\n        vec4 result = ${r};\\n        setOutput(result);\\n      }\\n    `}}const Ry={kernelName:$e,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return Fg({inputs:{x:s[0]},backend:r});if(s.length>pe().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const a=s.map((e=>e.dtype)).reduce(((e,t)=>en(e,t))),o=s.map((e=>e.shape)),i=pe().getBool("WEBGL_PACK")?new Ay(s[0].shape,o):new Cy(s[0].shape,o);return r.runWebGLProgram(i,s,a)}};we(Ag),we(Og),we(sy),we(iy),we(cy),we(hy),we(yy),we(Lg),we(Sy),we(Ny),we(Iy),we(_y),we(Xg),we(Ry);const Oy=[[-1,1],[-.8,.8],[-1,.3],[-1,.3],[-.7,.7]];class Dy{static processingTime;constructor(e,t){if(this.speechNetworks=e,this.melTensors=[],this.zeroAnimState=new Float32Array(5),this.zeroAnimState[0]=.5,this.zeroAnimState[1]=.48,this.zeroAnimState[2]=.52,this.zeroAnimState[3]=.43,this.zeroAnimState[4]=.46,this.avecSize=2,this.avecSizeHalf=1,this.groupLength=10,t>=0&&(Dy.processingTime=t),e.webglAvailable){if(Dy.processingTime)this.mode=0,console.log("recreate tf worker"),Dy.processingTime>40&&(this.mode+=1,this.setAvecProcessingSize(4),console.log("low performance mode"));else{for(let e=0;e<20;e++)this.getAnim(new Float32Array(800));this.mode=0;for(const e of[40,50]){const t=performance.now();for(let e=0;e<20;e++)this.getAnim(new Float32Array(800));const n=(performance.now()-t)/20;if(Dy.processingTime=n,!(n>e))break;this.mode+=1,this.setAvecProcessingSize(4)}}this.available=2!=this.mode}else this.available=!1,this.mode=0}setAvecProcessingSize(e){this.avecSize=e,this.avecSizeHalf=Math.floor(e/2),this.groupLength=Math.floor(20/e);for(const e of this.melGroups)e.dispose();this.aBufferCollector=[],this.melGroups=[],this.aVecCollector=[],this.currentDelay=0;for(let e=0;e<20;e++)this.getAnim(new Float32Array(800))}destroy(){for(const e of this.melGroups)e.dispose()}reset(){for(const e of this.melGroups)e.dispose();this.melGroups=[],this.aBufferCollector=[],this.aVecCollector=[];for(let e=0;e<20;e++)this.getAnim(new Float32Array(800))}getAnim(e){return this.makeMelOpt(e)||[[0,0,0,0,0],!1]}aBufferCollector=[];melGroups=[];aVecCollector=[];currentDelay=0;makeMelOpt(e){if(this.aBufferCollector.push(e),this.aBufferCollector.length==this.avecSize){const e=wu(this.aBufferCollector),t=this.speechNetworks.wav2melModel.predict(e);e.dispose();const n=[];for(let e=0;e<this.avecSize;e++)n.push(ua(t,[e,0,0,0],[1,t.shape[1],t.shape[2],t.shape[3]]));const r=sa(n,1);this.melGroups.push(r),this.aBufferCollector=[]}if(this.melGroups.length==this.groupLength){const e=performance.now(),t=sa(this.melGroups,1),n=this.speechNetworks.mel2phonModel.predict(t);t.dispose();const r=[0,0,0,0],s=[n.shape[0],n.shape[1],n.shape[2]-1,n.shape[3]],a=ua(n,r,s),o=this.speechNetworks.phon2avecModel.predict(a),i=ua(o,[0,10-this.avecSizeHalf,0,0],[1,this.avecSize,5,1]),u=performance.now();this.currentDelay=u-e;const l=i.arraySync();for(let e=0;e<this.avecSize;e++){const t=new Float32Array(5);for(let n=0;n<5;n++)t[n]=l[0][e][n][0];this.aVecCollector.push(this.avecToBshpCoef(t))}this.melGroups[0].dispose(),this.melGroups.shift(),i.dispose(),a.dispose(),o.dispose();const c=this.aVecCollector[0];return this.aVecCollector.shift(),[c,!1]}if(this.aVecCollector.length>0){const e=this.aVecCollector[0];return this.aVecCollector.shift(),[e,!0]}}makeMel(e){const t=wu([e]),n=this.speechNetworks.wav2melModel.predict(t);if(this.melTensors.push(n),20==this.melTensors.length){const e=sa(this.melTensors,1),n=this.speechNetworks.mel2phonModel.predict(e),r=[0,0,0,0],s=[n.shape[0],n.shape[1],n.shape[2]-1,n.shape[3]],a=ua(n,r,s),o=this.speechNetworks.phon2avecModel.predict(a),i=ua(o,[0,10,0,0],[1,1,5,1]),u=i.arraySync(),l=new Float32Array(5);for(let e=0;e<5;e++)l[e]=u[0][0][e][0];return this.melTensors[0].dispose(),t.dispose(),e.dispose(),n.dispose(),a.dispose(),o.dispose(),i.dispose(),this.melTensors.shift(),this.avecToBshpCoef(l)}}avecToBshpCoef(e){const t=new Float32Array(5);let n=0;for(let r=0;r<5;r++){let s=-7*(e[r]-this.zeroAnimState[r]);const a=Oy[r][0],o=Oy[r][1];s<a&&(s=a),s>o&&(s=o),n+=Math.abs(s),t[r]=s}if(n>1.5)for(let e=0;e<5;e++)t[e]*=1.5/n;return t}}const My=new class{constructor(){this.wav2melModel=null,this.mel2phonModel=null,this.phon2avecModel=null,this.isReady=!1,this.readyCallback=null,this.webglAvailable=!0,this.loadNetworks()}async loadNetworks(){await pn.setBackend("webgl");const e="https://flexatar-sdk.com/static/tf_models";try{this.wav2melModel=await Th(e+"/wav2mel/model.json"),this.mel2phonModel=await Th(e+"/mel2phon/model.json"),this.phon2avecModel=await Th(e+"/phon2avec/model.json")}catch(e){console.log("Unable to load tensorflow models")}"webgl"!=Rn()&&(console.error("webgl unavailable"),this.webglAvailable=!1),this.webglAvailable=this.webglAvailable&&this.wav2melModel&&this.mel2phonModel&&this.phon2avecModel,this.isReady=!0,this.readyCallback&&this.readyCallback()}destroy(){this.wav2melModel.dispose(),this.mel2phonModel.dispose(),this.phon2avecModel.dispose(),kn().disposeVariables(),On().dispose(),pn.disposeVariables(),"function"==typeof gc&&gc()}async awaitResources(){return this.isReady?Promise.resolve():new Promise((e=>{this.readyCallback=e}))}};My.awaitResources().then((()=>{let e,t;postMessage({nnReady:!0});let n=0,r=0,s=0;onmessage=a=>{if(a.data.start&&(e=new Dy(My,a.data.start),postMessage({ready:e.available,mode:e.mode,time:Dy.processingTime})),a.data.destroy)return e.destroy(),void My.destroy();if(a.data.reset&&(e.reset(),r=0,s=0),a.data.audioBuffer){const t=[],n=function(e,t){const n=[],r=Math.ceil(e.length/t);for(let s=0;s<r;s++){const r=s*t,a=r+t,o=e.slice(r,a);if(o.length<t){const e=new Float32Array(t);e.set(o),n.push(e)}else n.push(o)}return n}(a.data.audioBuffer,800),r=Math.floor(n.length/30);for(const s of n){const[a,o]=e.getAnim(new Float32Array(s));t.push(a),t.length%r==0&&postMessage({progress:t.length/n.length*100})}return void postMessage({anim_array:t})}const o=a.data.audio;if(!o)return void setTimeout((()=>{postMessage({anim:[0,0,0,0,0]})}),1e3);const i=performance.now(),[u,l]=e.getAnim(new Float32Array(o));t=Array.from(u);const c=performance.now();s+=c-i,r+=1,r>=4&&(r=0,n=s/4,s=0),l?setTimeout((()=>{postMessage({anim:t,time:n})}),e.currentDelay):postMessage({anim:t,time:n})}}));',"Worker",void 0,void 0)}class i{#e;#t;#n;#r;constructor(){this.#t=this.#s()}async startAudioContext(){this.#e||(this.#e=new(window.AudioContext||window.webkitAudioContext),await this.#e.audioWorklet.addModule("https://flexatar-sdk.com/static/js/libsamplerate.worklet.js"),await this.#e.audioWorklet.addModule("https://flexatar-sdk.com/static/js/audio_processor.js"))}static#a=-1;async#s(){await new Promise((e=>{this.lipsyncWorker=new o,this.lipsyncWorker.onmessage=t=>{"nnReady"in t.data&&e()}}));const e=new Promise((e=>{this.lipsyncWorker.onmessage=t=>{if("ready"in t.data){const n=t.data.ready;e(n,t.data.mode,t.data.time),i.#a=t.data.time,this.#r={available:n,mode:t.data.mode,time:t.data.time}}}})),t={start:i.#a};this.lipsyncWorker.postMessage(t);const n=await e;return this.lipsyncWorker.onmessage=e=>{const t=e.data.anim;t&&(this.#n&&this.#n(t),this.#o(t),this.#i&&this.#i.push(t))},n}get ready(){return this.#t}get status(){return this.#r}#u(){const e=new AudioWorkletNode(this.#e,"my-audio-processor"),t=this;e.port.onmessage=e=>{const n=e.data,r={audio:n};n&&n instanceof Float32Array&&t.lipsyncWorker.postMessage(r)},e.onprocessorerror=e=>{},this.processorNode=e,this.processorNode.port.postMessage(!0)}#l;#p;#c;#i;addLipsyncRecorder(e){e.speechPattern=[],this.#i=e.speechPattern}set mediaStream(e){if(this.#c&&(clearInterval(this.#c),this.#c=null),this.#h&&this.#h.disconnect(),this.#h=null,this.#l&&this.#l.disconnect(),this.#p&&this.#p.disconnect(),e){if(!this.#e)return void console.log("startAudioContext() must be called before setting stream");this.#u(),this.processorNode.port.postMessage(!0),this.connectToProcessorNode(e)}else{this.processorNode&&this.processorNode.port.postMessage(!1);const e=[0,0,.1,0,0],t=this;if(this.#c=setInterval((()=>{t.#n&&t.#n(e),this.#o(e)}),200),setTimeout((()=>{t.#c&&clearInterval(t.#c),t.#c=null}),1e3),this.#i){this.#i.splice(0,10);for(let e=0;e<10;e++)this.#i.push([0,0,.1,0,0])}}}connectToProcessorNode(e){const t=this.#e.createMediaStreamSource(e);if(this.#l=t,this.lipsyncWorker.postMessage({reset:!0}),2==t.channelCount){const e=this.#e.createChannelMerger(1);this.#p=e,t.connect(e),e.connect(this.processorNode)}else t.connect(this.processorNode)}#h;synchronizedStream(){this.#h||(this.#h=this.#e.createDelay(1));const e=this.#h;e.delayTime.value=.5,this.#l.connect(e);const t=this.#e.createMediaStreamDestination();return e.connect(t),t.stream}set onframe(e){this.#n&&(this.#n=e)}#o(e){for(const t of this.#d)t.speechState=e}get audioContext(){return this.#e}#f={};#d=[];connect(e){this.#f[e.id]||(this.#f[e.id]=e,this.#d=Object.values(this.#f))}disconnect(e){delete this.#f[e.id],this.#d=Object.values(this.#f),e.speechState=[0,0,.1,0,0]}disconnectAll(){const e=this.#f;this.#f={},this.#d=[],this.#d=Object.values(this.#f);const t=[0,0,.1,0,0];for(const n of Object.values(e))n.speechState=t}destroy(){this.lipsyncWorker.postMessage({destroy:!0}),this.lipsyncWorker.terminate(),this.#e&&this.#e.close(),this.#e=null}}async function u(){const e=new i;return await e.ready,e}var l=r.U;export{l as newInstance};