var FtarView;"undefined"==typeof document&&(__webpack_require__.b=self.location.origin+"/"),(()=>{"use strict";var e={d:(t,a)=>{for(var r in a)e.o(a,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:a[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};function a(){console.log("[FTAR_CONNECTION]",...arguments)}if(e.r(t),e.d(t,{ERR_UNAUTHORIZED:()=>w,ERR_UNEXPECTED:()=>h,GetToken:()=>v,Manager:()=>P,ManagerConnection:()=>_,deleteFlexatar:()=>c,flexatarEntry:()=>m,flexatarList:()=>p,getFlexatar:()=>l,getPreview:()=>u,makeFlexatar:()=>y,userInfo:()=>k}),void 0===r)var r=self;const s="ftarcache";async function o(e,t){const{strings:a}=await chrome.storage.local.get({strings:{}});a[e]=t,await chrome.storage.local.set({strings:a})}async function n(e){const{strings:t}=await chrome.storage.local.get({strings:{}});return t[e]}const i="https://api.flexatar-sdk.com";async function c(e,t){const a=i+"/"+e.id;t||(t=e.token);const r={};try{const e=await g(a,{method:"DELETE",headers:r},t);return e.ok?e.ok:401===e.status?{error:w}:{error:h}}catch(e){return console.error("Flexatar deletion:",e),!1}}async function l(e,t){const a="/ftar/"+t.id,r=await caches.open(s);let o=await r.match(a);if(!o){const s=await m(e,t.id,{ftar:!0});if(o=await fetch(s.ftar,{method:"GET"}),!o.ok)return;const n=await o.arrayBuffer(),i=new Response(new Uint8Array(n),{headers:{"Content-Type":"application/octet-stream"}});return await r.put(a,i),n}return await o.arrayBuffer()}async function u(e){const t="/ftarpreview/"+e.id,a=await caches.open(s);let r=await a.match(t);if(!r){if(r=await fetch(e.preview,{method:"GET"}),!r.ok)return;const s=await r.arrayBuffer(),o=new Response(new Uint8Array(s),{headers:{"Content-Type":"application/octet-stream"}});return await a.put(t,o),s}return await r.arrayBuffer()}function f(e,t="application/octet-stream"){const a=new Blob([e],{type:t});return new Promise(((e,t)=>{const r=new FileReader;r.onloadend=()=>e(r.result),r.onerror=t,r.readAsDataURL(a)}))}async function d(e,t,a,r=0){const s=a+"_ftarpreview_"+e.id,o=(await chrome.storage.local.get([s]))[s];if(o)return await(await fetch(o)).arrayBuffer();if(!e.preview&&r<5)return await new Promise((e=>setTimeout(e,500))),await d(e,t,a,r+1);let n=await fetch(e.preview,{method:"GET"});if(!n.ok)return;const i=await n.arrayBuffer(),c=await f(i),l={};return l[s]=c,await chrome.storage.local.set(l),i}async function g(e,t,a,r){t.headers.Authorization="Bearer "+await a.getToken();const s=await fetch(e,t);return 403!=s.status?s:(r||(r=2),r<=0?s:(r-=1,a.token=null,await g(e,t,a,r)))}const w="unauthorized",h="UNEXPECTED";async function p(e,t){const a=i+"/list",r=[];t.ftar&&r.push("ftar"),t.preview&&r.push("preview"),t.meta&&r.push("meta");const s=await g(a,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({all:r})},e);return s.ok?(await s.json()).all:401===s.status?{error:w}:{error:h}}async function m(e,t,a){const r=i+"/list",s={"Content-Type":"application/json"},o=[];a.ftar&&o.push("ftar"),a.preview&&o.push("preview"),a.meta&&o.push("meta");const n={};n[t]=o;try{const a=await g(r,{method:"POST",headers:s,body:JSON.stringify(n)},e);return a.ok?(await a.json()).requested[t]:401===a.status?{error:w}:{error:h}}catch(e){console.error("Flexatar list failed:",e)}}async function y(e,t,a,r){a||(a="");const s=i+"/make",o=await async function(e,t,a,r,s,o){const n=await o(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:r})},t);if(!n.ok)return console.log("faild obtain make link",await n.json()),{error:{status:n.status}};const i=await n.json();if(i.block)return{success:!1,reason:i.block};const c=i.link;if(!await async function(e,t){const a=new FormData;return Object.entries(e.fields).forEach((([e,t])=>{a.append(e,t)})),a.append("file",t),(await fetch(e.url,{method:"POST",body:a})).ok?(console.log("ftar send img ok"),!0):(console.error("send img failed"),!1)}(c,a))return;let l=0;return await new Promise((e=>{const t=setInterval((async()=>{const a=await fetch(i.poll,{method:"GET"});if(!a.ok)return l+=1,l>10&&(clearInterval(t),e()),void console.log("ftar not ready");const r=await a.json();console.log("ftar ready",r),clearInterval(t),e(r)}),5e3)}))}(s,e,t,a,0,g);if(o.error)return 401===o.error.status?{error:w}:{error:h};if(!o.success){let e=o.reason;return e||(e="bad_photo"),{err:!0,reason:e}}let n={ftar:!0,meta:!0};return r&&(n=r),await m(e,o.id,n)}async function k(e){a("requesting user info from cloud");const t=await g(i+"/info",{method:"GET",headers:{"Content-Type":"application/json"}},e);return t.ok||t.ok?await t.json():401===t.status?{error:w}:{error:h}}class v{constructor(e){this.getTokenFunc=e}#e;async getToken(){if(this.token)return this.token;let e=this.#e;this.#e||(this.#e=this.getTokenFunc(),e=this.#e);const t=await e;return this.token=t,this.#e=null,t}}async function I(e,t){const r=await async function(e){const t=await new Promise((e=>{chrome.storage.local.get(null,e)}));return Object.keys(t).filter((t=>t.startsWith(e)))}(e),s={};for(const t of r)s[t.replaceAll(e,"")]=t;for(const{id:e}of t)delete s[e];const o=Object.values(s);a("deleting removed res from storage",o),o.length>0&&await chrome.storage.local.remove(o)}async function T(e,t,r){const s=r+"_ftarlist";let i=t.opts.noCache?null:await n(s);if(t.opts.noCache=void 0,!i)if(a("loading list from cloud",t.opts),i=await p(e,t.opts),i){i=i.reverse(),a("ftarList",i),(async()=>{if(t.opts.preview)for(const t of i){const a=await d(t,e,r);console.log("previewBuffer",a),delete t.preview}})();const n=r+"_ftarpreview_";await I(n,i);const c=r+"_ftar_";await I(c,i),await o(s,i)}else i=[];return i}async function F(e,t){const r=e+"_FtarCount",s={};s[r]=t,a("setting ftar count at key",r,"count is",t),await chrome.storage.local.set(s)}const D=new class{constructor(){this.queue=[],this.isProcessing=!1}async enqueue(e){return new Promise(((t,a)=>{this.queue.push({task:e,resolve:t,reject:a}),this.processQueue()}))}async processQueue(){if(this.isProcessing||0===this.queue.length)return;this.isProcessing=!0;const{task:e,resolve:t,reject:a}=this.queue.shift();try{t(await e())}catch(e){a(e)}this.isProcessing=!1,this.processQueue()}};let E=0;class P{constructor(e){this.token=new FtarView.GetToken((async()=>await e()))}async getUserInfo(e){const t=e&&e.noCache,{currentUserId:a}=await chrome.storage.local.get({currentUserId:null});if(a&&!t){const e=a+"_FtarCount",t=(await chrome.storage.local.get([e]))[e];if(null!=t)return{user_id:a,FtarCount:t}}const r=await k(this.token),s=r.user_id;return await chrome.storage.local.set({currentUserId:s}),await F(s,r.FtarCount),r}ports=[];portsMustBeDeleted=[];async handShakePorts(){for(const e of this.ports){const t=setTimeout((()=>{console.log("manager port not responding"),this.portsMustBeDeleted.push(e),e.removeEventListener("message",a)}),5e3);function a(r){r.data&&r.data.handShake&&(clearTimeout(t),console.log("manager port ok"),e.removeEventListener("message",a))}e.addEventListener("message",a),e.postMessage({handShake:!0})}}addPort(e){const t=this;for(const e of this.portsMustBeDeleted)t.ports=t.ports.filter((t=>t!==e));this.portsMustBeDeleted=[],this.ports.push(e),e.onmessage=async r=>{const s=r.data;if(!s)return;console.log("msg on manager port:",s);const i=await D.enqueue((async()=>(E++,console.log("userInfo counter",E),await t.getUserInfo()))),l=i.user_id;if(s.ftarList){const t=await T(this.token,s,l);e.postMessage({msgID:s.msgID,payload:t})}else if(s.preview){const a=await d({id:s.preview},t.token,l);if(!a)return void e.postMessage({msgID:s.msgID,payload:null});console.log("previewBuffer",a),e.postMessage({msgID:s.msgID,payload:a},[a])}else if(s.flexatar){const t=await async function(e,t,a){if("default"===t.id)return await(await fetch(chrome.runtime.getURL("sandbox/default_ftar.p"))).arrayBuffer();const r=a+"_ftar_"+t.id,s=(await chrome.storage.local.get([r]))[r];if(s)return await(await fetch(s)).arrayBuffer();let o;if(t.ftar)o=await fetch(t.ftar,{method:"GET"});else{const a=await m(e,t.id,{ftar:!0});o=await fetch(a.ftar,{method:"GET"})}if(!o.ok)return;const n=await o.arrayBuffer(),i=await f(n),c={};return c[r]=i,await chrome.storage.local.set(c),n}(this.token,{id:s.flexatar},l);if(a("ftar buffer ",t),!t)return void e.postMessage({msgID:s.msgID,payload:null});a("setting current ftar id ",s.flexatar),await async function(e,t){const a={};a[t+"_currentFlexatarId"]=e,await chrome.storage.local.set(a)}(s.flexatar,l),e.postMessage({msgID:s.msgID,payload:t},[t])}else if(s.closing)t.ports=t.ports.filter((t=>t!==e)),e.close(),console.log("closing port on ftar manager",t.ports.length);else if(s.currentFtar){s.opts={preview:!0};const t=await T(this.token,s,l);a("get current ftar, list",t);const r=await async function(e,t){const r=e+"_currentFlexatarId";let s=(await chrome.storage.local.get([r]))[r];if(0===t.length)return null;for(const{id:e}of t)if(e===s)return a("returning founded id",e),s;const o={},n=t[0].id;return o[r]=n,await chrome.storage.local.set(o),n}(l,t);a("get current ftar, id",r),e.postMessage({msgID:s.msgID,payload:{id:r}})}else if(s.makeFlexatar){const a=function(e){const t=new Blob([e.buffer],{type:e.fileType});return new File([t],e.fileName,{type:e.fileType})}(s);if(a&&a.type.startsWith("image/"))for(;a.size>4194304;)a=await x(a);const r=await y(this.token,a,"noname",{ftar:!0,preview:!0});r.err||(await d(r,t.token,l),await async function(e,t){const a=e+"_ftarlist";let r=await n(a);r.unshift({id:t}),await o(a,r)}(l,r.id)),e.postMessage({msgID:s.msgID,payload:r})}else if(s.deleteFlexatar){const t=await c({id:s.deleteFlexatar,token:this.token});t&&(await async function(e,t){const a=t+"_ftar_"+e,r=t+"_ftarpreview_"+e;await chrome.storage.local.get([a,r])}(s.deleteFlexatar,l),await async function(e,t){const a=e+"_ftarlist";let r=await n(a);r=r.filter((({id:e})=>t!==e)),await o(a,r)}(l,s.deleteFlexatar),await async function(e){await chrome.storage.local.remove([e+"_currentFlexatarId"])}(l)),e.postMessage({msgID:s.msgID,payload:{success:t}})}else s.userInfo?s.opts?e.postMessage({msgID:s.msgID,payload:await t.getUserInfo(s.opts)}):e.postMessage({msgID:s.msgID,payload:i}):s.decrementFtarCount&&(await F(l,i.FtarCount-1),e.postMessage({msgID:s.msgID,payload:{success:!0}}))},e.postMessage({ready:!0}),this.handShakePorts()}}class _{constructor(){const e=new MessageChannel;this.port=e.port1,this.port.start(),this.outPort=e.port2,e.port1.onmessage=t=>{t.data&&t.data.handShake&&e.port1.postMessage(t.data)},this.ready=new Promise((t=>{e.port1.addEventListener("message",(function a(r){r.data&&r.data.ready&&(t(),e.port1.removeEventListener("message",a))}))}))}sendWithResponse(e){const t=Math.random().toString(32).slice(-10)+Date.now()+Math.random().toString(34).slice(-5)+Math.random().toString(36).slice(-5);e.msgID=t;const a=this.port;return new Promise((r=>{a.addEventListener("message",(function e(s){s.data&&(console.log("responese",s.data),s.data.msgID===t&&(r(s.data.payload),a.removeEventListener("message",e)))})),a.postMessage(e)}))}async getList(e){return e||(e={}),await this.sendWithResponse({ftarList:!0,opts:e})}async getPreview(e){return await this.sendWithResponse({preview:e})}async getFlexatar(e){return await this.sendWithResponse({flexatar:e})}close(){this.port.postMessage({closing:!0}),this.port.close()}async getCurrentFtar(){return await this.sendWithResponse({currentFtar:!0})}async makeFlexatar(e){const t=await function(e){const t=e.type,a=e.name;return new Promise(((r,s)=>{const o=new FileReader;o.readAsArrayBuffer(e),o.onload=()=>r({buffer:o.result,fileType:t,fileName:a}),o.onerror=e=>s(e)}))}(e);return t.makeFlexatar=!0,await this.sendWithResponse(t,[t.buffer])}async deleteFlexatar(e){return await this.sendWithResponse({deleteFlexatar:e})}async userInfo(e){return await this.sendWithResponse({userInfo:!0,opts:e})}async decrementFtarCount(){return await this.sendWithResponse({decrementFtarCount:!0})}}async function x(e){return new Promise((t=>{const a=new Image,r=new FileReader;r.onload=r=>{a.src=r.target.result,a.onload=()=>{const r=document.createElement("canvas");r.width=a.width/2,r.height=a.height/2,r.getContext("2d").drawImage(a,0,0,r.width,r.height),r.toBlob((a=>{const r=new File([a],e.name,{type:e.type,lastModified:Date.now()});t(r)}),e.type)}},r.readAsDataURL(e)}))}const M={Manager:P,ManagerConnection:_,getFlexatar:l,getPreview:u,flexatarList:p,makeFlexatar:y,deleteFlexatar:c,flexatarEntry:m,userInfo:k,GetToken:v,ERR_UNAUTHORIZED:w,ERR_UNEXPECTED:h};r.Ftar=M,FtarView=t})();