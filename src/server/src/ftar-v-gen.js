/*! For license information please see ftar-v-gen.js.LICENSE.txt */
!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.VGEN=n():e.VGEN=n()}(this,(()=>(()=>{"use strict";var __webpack_modules__={"./src/v-gen-lib.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n\nfunction getVGenElement(iframeUrl,token){\n    return new VGen(iframeUrl,token)\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    getVGenElement\n});\n\nclass TokenController{\n\n    #iframe\n    #id\n\n    constructor(iframe,opts){\n        this.#id = crypto.randomUUID()\n        console.log("init id",this.#id)\n        this.#iframe = iframe\n        this.#opts = opts\n        if (opts?.token){\n            this.#reloadTokenFunc = ()=>{\n                return opts.token\n            }\n        }\n        const self = this\n        const recvMessage = async (event) => {\n            let data = event.data;\n\n            if (!data.flexatar) return\n            data = data.flexatar\n            data = data[self.#id]\n            if (!data) return\n            if (data.type === \'reload_token\') {\n                    \n                const token = await self.#reloadTokenFunc()\n                self.#iframe.contentWindow.postMessage({flexatar:{type:"reload_token",token}}, "*")\n            }\n        }\n        window.addEventListener(\'message\', recvMessage)\n        this.destroy = ()=>{\n            window.removeEventListener(\'message\', recvMessage)\n        }\n    }\n\n    \n\n    #reloadTokenFunc = async () => {}\n    #errorCalback = ()=> {}\n    #opts\n   \n    setupTokenFetch(url,opts){\n        \n        let firstTry = true\n        this.#reloadTokenFunc = async () => {\n            if (firstTry &&  this.#opts?.token){\n                firstTry = false\n                return this.#opts.token\n            }\n            try{\n                const response = await fetch(url,opts)\n                if (!response.ok){\n                    this.#errorCalback({response})\n                    return \n                }\n                const tokenJson = await response.json()\n                if (!tokenJson.token){\n                    throw new ReferenceError("token field is undefined")\n                }\n                return tokenJson.token\n            }catch (exception){\n                this.#errorCalback({exception})\n                return\n            }\n        }\n    }\n    set ontokenerror(val){\n        this.#errorCalback = val\n    }\n\n\n    get id(){\n        return this.#id\n    }\n   \n    \n\n}\n\nclass VGen extends TokenController{\n    #iframe\n    \n    constructor(iframeUrl,opts){\n        const iframe = document.createElement("iframe")\n        super(iframe,opts)\n        iframe.style.margin = "10px"\n        iframe.style.width = "400px"\n        iframe.style.height = "500px"\n        iframe.src = `${iframeUrl}?id=${this.id}`\n        this.#iframe = iframe\n    }\n    mount(element){\n        element.appendChild(this.#iframe)\n    }\n    unmount(){\n        this.#iframe.remove()\n    }\n    get element(){\n        return this.#iframe\n    }\n\n}\n\n//# sourceURL=webpack://VGEN/./src/v-gen-lib.js?')}},__webpack_require__={d:(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},__webpack_exports__={};return __webpack_modules__["./src/v-gen-lib.js"](0,__webpack_exports__,__webpack_require__),__webpack_exports__})()));