/*! For license information please see ftar-v-gen.js.LICENSE.txt */
!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.VGEN=n():e.VGEN=n()}(this,(()=>(()=>{"use strict";var __webpack_modules__={"./src/v-gen-lib.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\nasync function shareVideo(videoUrl,vFileName) {\n\n   \n    try {\n        // Fetch the blob from the Object URL\n        const response = await fetch(videoUrl);\n        const blob = await response.blob();\n\n        // Create a File from the Blob (optional: specify a filename)\n        const file = new File([blob], vFileName, { type: blob.type });\n\n        // Check if Web Share API is available\n        if (navigator.canShare && navigator.canShare({ files: [file] })) {\n            await navigator.share({\n                files: [file],\n                title: "Flexatar Video",\n                text: "",\n            });\n            console.log("Video shared successfully!");\n        } else {\n\n            // console.error("Web Share API not supported or file sharing not available.");\n        }\n    } catch (error) {\n\n\n\n        console.error("Error sharing video:", error);\n    }\n}\n\n\nfunction getVGenElement(iframeUrl,token){\n    return new VGen(iframeUrl,token)\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    getVGenElement\n});\n\nclass TokenController{\n\n    #iframe\n    #id\n\n    constructor(iframe,opts){\n        this.#id = crypto.randomUUID()\n        this.#iframe = iframe\n        this.#opts = opts\n        if (opts?.token){\n            this.#reloadTokenFunc = ()=>{\n                return opts.token\n            }\n        }\n        const self = this\n        const recvMessage = async (event) => {\n            let data = event.data;\n\n            if (!data.flexatar) return\n            data = data.flexatar\n            data = data[self.#id]\n            if (!data) return\n            \n            if (data.type === \'reload_token\') {\n                    \n                const token = await self.#reloadTokenFunc()\n                self.#iframe.contentWindow.postMessage({flexatar:{type:"reload_token",token}}, "*")\n                return\n            }\n            if (data.type === \'share_video\') {\n                const videoUrl = data.url\n                const videoFNAme = data.fileName\n                // console.log("share",videoFNAme,videoUrl)\n                shareVideo(videoUrl,videoFNAme)\n            }\n        }\n        window.addEventListener(\'message\', recvMessage)\n        this.destroy = ()=>{\n            window.removeEventListener(\'message\', recvMessage)\n        }\n    }\n\n    \n\n    #reloadTokenFunc = async () => {}\n    #errorCalback = ()=> {}\n    #opts\n   \n    setupTokenFetch(url,opts){\n        \n        let firstTry = true\n        this.#reloadTokenFunc = async () => {\n            if (firstTry &&  this.#opts?.token){\n                firstTry = false\n                return this.#opts.token\n            }\n            try{\n                const response = await fetch(url,opts)\n                if (!response.ok){\n                    this.#errorCalback({response})\n                    return \n                }\n                const tokenJson = await response.json()\n                if (!tokenJson.token){\n                    throw new ReferenceError("token field is undefined")\n                }\n                return tokenJson.token\n            }catch (exception){\n                this.#errorCalback({exception})\n                return\n            }\n        }\n    }\n    set ontokenerror(val){\n        this.#errorCalback = val\n    }\n\n    get id(){\n        return this.#id\n    }\n}\n\nclass VGen extends TokenController {\n    #iframe;\n\n    constructor(iframeUrl, opts = {}) {\n        const iframe = document.createElement("iframe");\n        iframe.allow="microphone"\n\n        super(iframe, opts);\n\n        // Set default options if not provided\n        const { width = \'400px\', height = \'500px\', margin = \'10px\' } = opts;\n\n        let healthDetector;\n        iframe.onload = ()=>{\n            \n            healthDetector = setTimeout(()=>{ if (this.oninvalidurl) this.oninvalidurl(iframeUrl)},2000)\n            const heartBeatObject = {}\n            heartBeatObject[this.id] = {type:"heart_beat"}\n            window.parent.postMessage({flexatar: heartBeatObject }, \'*\');\n        }\n        iframe.onerror = ()=>{\n            if (this.oninvalidurl) this.oninvalidurl(iframeUrl)\n        }\n        \n        iframe.style.margin = margin;\n        iframe.style.width = width;\n        iframe.style.height = height;\n        iframe.src = `${iframeUrl}?id=${this.id}`;\n        this.#iframe = iframe;\n\n        const recvMessage = async (event) => {\n            let data = event.data;\n\n            if (!data.flexatar) return\n            data = data.flexatar\n            data = data[this.id]\n            if (data && data.type === \'heart_beat\') {\n                clearTimeout(healthDetector)\n            }\n          \n        }\n        window.addEventListener(\'message\', recvMessage)\n\n    }\n\n    mount(element) {\n        element.appendChild(this.#iframe);\n    }\n\n    unmount() {\n\n        this.#iframe.remove();\n    }\n    destroy() {\n        this.#iframe.remove();\n    }\n\n    get element() {\n        return this.#iframe;\n    }\n}\n\n//# sourceURL=webpack://VGEN/./src/v-gen-lib.js?')}},__webpack_require__={d:(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},__webpack_exports__={};return __webpack_modules__["./src/v-gen-lib.js"](0,__webpack_exports__,__webpack_require__),__webpack_exports__})()));